{
  "rustsec_label": "Safe",
  "in_rustsec_patched": false,
  "in_rustsec_current": false,
  "in_rust_sec": false,
  "rustsec_tag": null,
  "developers": [
    "ia0"
  ],
  "stars": 185,
  "forks": 27,
  "downloads": 102454547,
  "num_side_effects": 5,
  "failed_rudra": false,
  "audits": [
    {
      "organization": "google",
      "criteria": "[ \"safe-to-run\", \"does-not-implement-crypto\",]",
      "delta": "",
      "version": "2.6.0",
      "notes": ""
    },
    {
      "organization": "google",
      "criteria": "ub-risk-3",
      "delta": "",
      "version": "2.7.0",
      "notes": "https://github.com/ia0/data-encoding/issues/75 was partially addressed via\\n`#[doc(hidden)]` added in https://github.com/ia0/data-encoding/pull/76, but the\\noriginal repro from issue #75 can still trigger Undefined Behavior through\\npublic APIs exposed by the `data-encoding` crate (without using `unsafe`, and\\nwithout using APIs named something like `internal_field_do_not_use`).\\n\\nAdditionally, the discussion in\\nhttps://github.com/ia0/data-encoding/issues/124 leans toward `unsafe`\\nencapsulation at a crate level, requiring crate-**global** reasoning to\\nprove soundness of public crate APIs.  Specifically, the crate currently\\nhas a internal function that can cause Undefined Behavior if the caller\\ndoesn't uphold certain (implied, not explicitly documented) safety\\nrequirements.  The fact that such function is not marked as `unsafe`\\neffectively means that safety audit can't terminate and use **local**\\nreasoning near `unsafe` expression boundaries.\\n"
    },
    {
      "organization": "mozilla",
      "criteria": "safe-to-deploy",
      "delta": "2.3.2 -> 2.3.3",
      "version": "",
      "notes": ""
    }
  ],
  "dependencies": [],
  "passed_audit": false,
  "num_unsafe_calls": 5,
  "miri": false,
  "past_audit": true,
  "miri_details": {
    "status": "ok",
    "passed": 41,
    "failed": 0,
    "ignored": 1,
    "measured": 0,
    "filtered_out": 0,
    "time_seconds": 1.27
  }
}
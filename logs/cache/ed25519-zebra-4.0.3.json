{
  "rustsec_label": "Safe",
  "in_rustsec_patched": false,
  "in_rustsec_current": false,
  "in_rust_sec": false,
  "rustsec_tag": null,
  "developers": [
    "conradoplg",
    "github:zcashfoundation:owners"
  ],
  "stars": 32,
  "forks": 21,
  "downloads": 9425152,
  "num_side_effects": 0,
  "failed_rudra": false,
  "audits": [
    {
      "organization": "zcash",
      "criteria": "safe-to-deploy",
      "delta": "3.0.0 -> 3.1.0",
      "version": "",
      "notes": ""
    },
    {
      "organization": "zcash",
      "criteria": "safe-to-deploy",
      "delta": "3.1.0 -> 4.0.0",
      "version": "",
      "notes": "Changes are mainly in the pem and pkcs8 features and in Java or Scala code. These do not introduce unsafe code,\\nbut I cannot vouch for their cryptographic correctness or conformance to PEM or PKCS8 standards. I reviewed the\\nremaining changes from 3.1.0 to 4.0.0 fully.\\n"
    },
    {
      "organization": "zcash",
      "criteria": "[ \"safe-to-deploy\", \"crypto-reviewed\",]",
      "delta": "4.0.0 -> 4.0.3",
      "version": "",
      "notes": "`SigningKey::from([u8; 32])` parsing now uses `Scalar::from_bytes_mod_order` instead of\\n`Scalar::from_bits`. This means that the clamped scalar bits are now reduced before they\\nare used, which removes the implicit mul-by-cofactor during scalar multiplication (as the\\nlast 3 bits of the scalar are no longer guaranteed to be zero). However, this happens to\\nbe fine in the context of this crate:\\n\\n- `SigningKey` does not expose its inner `Scalar` directly, so we only need to consider\\n  how it is used within the crate.\\n- For multiplication within a prime-order (sub)group, we get the same result whether we\\n  reduce before or not. This means that the field-element multiplication during signing,\\n  and the prime-order subgroup component of any group-element scalar multiplication, are\\n  unaffected.\\n- The only group element that the `Scalar` is multiplied by is the Ed25519 basepoint,\\n  which is torsion free (so the implicit mul-by-cofactor is unnecessary).\\n"
    }
  ],
  "dependencies": [
    [
      "curve25519-dalek",
      "4.1.3"
    ],
    [
      "cfg-if",
      "1.0.0"
    ],
    [
      "cpufeatures",
      "0.2.17"
    ],
    [
      "libc",
      "0.2.171"
    ],
    [
      "curve25519-dalek-derive",
      "0.1.1"
    ],
    [
      "proc-macro2",
      "1.0.94"
    ],
    [
      "unicode-ident",
      "1.0.18"
    ],
    [
      "quote",
      "1.0.40"
    ],
    [
      "syn",
      "2.0.100"
    ],
    [
      "fiat-crypto",
      "0.2.9"
    ],
    [
      "subtle",
      "2.6.1"
    ],
    [
      "ed25519",
      "2.2.3"
    ],
    [
      "signature",
      "2.2.0"
    ],
    [
      "hashbrown",
      "0.15.2"
    ],
    [
      "hex",
      "0.4.3"
    ],
    [
      "rand_core",
      "0.9.3"
    ],
    [
      "sha2",
      "0.10.8"
    ],
    [
      "digest",
      "0.10.7"
    ],
    [
      "crypto-common",
      "0.1.6"
    ],
    [
      "generic-array",
      "1.2.0"
    ],
    [
      "typenum",
      "1.18.0"
    ],
    [
      "zeroize",
      "1.8.1"
    ]
  ],
  "passed_audit": true,
  "num_unsafe_calls": 0,
  "miri": true,
  "past_audit": true,
  "miri_details": {
    "status": "timeout",
    "passed": 0,
    "failed": 0,
    "ignored": 0,
    "measured": 0,
    "filtered_out": 0,
    "time_seconds": 0.0
  }
}
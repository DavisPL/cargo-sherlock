{
  "rustsec_label": "Safe",
  "in_rustsec_patched": false,
  "in_rustsec_current": false,
  "in_rust_sec": false,
  "rustsec_tag": null,
  "developers": [
    "rust-lang-owner",
    "github:rust-lang:libs"
  ],
  "stars": 1941,
  "forks": 484,
  "downloads": 385508427,
  "num_side_effects": 487,
  "failed_rudra": false,
  "audits": [
    {
      "organization": "bytecode-alliance",
      "criteria": "safe-to-deploy",
      "delta": "",
      "version": "1.0.73",
      "notes": "I am the author of this crate."
    },
    {
      "organization": "bytecode-alliance",
      "criteria": "safe-to-deploy",
      "delta": "1.0.83 -> 1.1.6",
      "version": "",
      "notes": ""
    },
    {
      "organization": "bytecode-alliance",
      "criteria": "safe-to-deploy",
      "delta": "1.1.6 -> 1.2.5",
      "version": "",
      "notes": "Lots of minor updates here and there along with refactorings and such. Everything in line with what `cc` is expected to do."
    },
    {
      "organization": "google",
      "criteria": "[ \"safe-to-run\", \"does-not-implement-crypto\",]",
      "delta": "",
      "version": "1.0.79",
      "notes": ""
    },
    {
      "organization": "google",
      "criteria": "[ \"safe-to-run\", \"does-not-implement-crypto\",]",
      "delta": "1.0.79 -> 1.0.82",
      "version": "",
      "notes": ""
    },
    {
      "organization": "google",
      "criteria": "[ \"safe-to-run\", \"does-not-implement-crypto\",]",
      "delta": "1.0.82 -> 1.0.83",
      "version": "",
      "notes": ""
    },
    {
      "organization": "mozilla",
      "criteria": "safe-to-deploy",
      "delta": "1.0.73 -> 1.0.78",
      "version": "",
      "notes": ""
    },
    {
      "organization": "mozilla",
      "criteria": "safe-to-deploy",
      "delta": "1.0.89 -> 1.2.10",
      "version": "",
      "notes": ""
    },
    {
      "organization": "mozilla",
      "criteria": "safe-to-deploy",
      "delta": "1.2.10 -> 1.2.11",
      "version": "",
      "notes": ""
    },
    {
      "organization": "mozilla",
      "criteria": "safe-to-deploy",
      "delta": "1.2.11 -> 1.2.12",
      "version": "",
      "notes": ""
    },
    {
      "organization": "mozilla",
      "criteria": "safe-to-deploy",
      "delta": "1.0.78 -> 1.0.83",
      "version": "",
      "notes": ""
    },
    {
      "organization": "zcash",
      "criteria": "safe-to-deploy",
      "delta": "1.0.94 -> 1.0.97",
      "version": "",
      "notes": ""
    },
    {
      "organization": "zcash",
      "criteria": "safe-to-deploy",
      "delta": "1.0.83 -> 1.0.94",
      "version": "",
      "notes": "The optimization to use `buffer.set_len(buffer.capacity())` in `command_helpers::StderrForwarder::forward_available`\\ndoesn't look panic-safe: if `stderr.read` panics and that panic is caught by a caller of `forward_available`, then\\nthe inner buffer of `StderrForwarder` will contain uninitialized data. This looks difficult to trigger in practice,\\nbut I have opened an issue <https://github.com/rust-lang/cc-rs/issues/1036>.\\n\\n`parallel::async_executor` contains `unsafe` pinning code but it looks reasonable. Similarly for the `unsafe`\\ninitialization code in `parallel::job_token::JobTokenServer` and file operations in `parallel::stderr`.\\n\\nThis crate executes commands, and my review is likely not sufficient to detect subtle backdoors.\\nI did not review the use of library handles in the `com` package on Windows.\\n"
    },
    {
      "organization": "zcash",
      "criteria": "safe-to-deploy",
      "delta": "1.1.6 -> 1.1.13",
      "version": "",
      "notes": ""
    }
  ],
  "dependencies": [
    [
      "shlex",
      "1.3.0"
    ]
  ],
  "passed_audit": false,
  "num_unsafe_calls": 93,
  "miri": false,
  "past_audit": true,
  "miri_details": {
    "status": "ok",
    "passed": 26,
    "failed": 0,
    "ignored": 0,
    "measured": 0,
    "filtered_out": 0,
    "time_seconds": 0.99
  }
}
{
  "rustsec_label": "Safe",
  "in_rustsec_patched": false,
  "in_rustsec_current": false,
  "in_rust_sec": false,
  "rustsec_tag": null,
  "developers": [
    "cramertj",
    "taiki-e"
  ],
  "stars": 5549,
  "forks": 641,
  "downloads": 270679053,
  "num_side_effects": 4,
  "failed_rudra": false,
  "audits": [
    {
      "organization": "bytecode-alliance",
      "criteria": "safe-to-deploy",
      "delta": "",
      "version": "0.3.27",
      "notes": "Unsafe used to implement a concurrency primitive AtomicWaker. Well-commented and not obviously incorrect. Like my other audits of these concurrency primitives inside the futures family, I couldn't certify that it is correct without formal methods, but that is out of scope for this vetting."
    },
    {
      "organization": "bytecode-alliance",
      "criteria": "safe-to-deploy",
      "delta": "0.3.28 -> 0.3.31",
      "version": "",
      "notes": ""
    },
    {
      "organization": "google",
      "criteria": "safe-to-run",
      "delta": "",
      "version": "0.3.14",
      "notes": ""
    },
    {
      "organization": "google",
      "criteria": "[ \"safe-to-run\", \"does-not-implement-crypto\",]",
      "delta": "",
      "version": "0.3.28",
      "notes": ""
    },
    {
      "organization": "google",
      "criteria": "[ \"safe-to-run\", \"does-not-implement-crypto\",]",
      "delta": "0.3.28 -> 0.3.31",
      "version": "",
      "notes": ""
    },
    {
      "organization": "mozilla",
      "criteria": "safe-to-deploy",
      "delta": "0.3.21 -> 0.3.23",
      "version": "",
      "notes": ""
    },
    {
      "organization": "mozilla",
      "criteria": "safe-to-deploy",
      "delta": "0.3.23 -> 0.3.25",
      "version": "",
      "notes": ""
    },
    {
      "organization": "mozilla",
      "criteria": "safe-to-deploy",
      "delta": "0.3.25 -> 0.3.26",
      "version": "",
      "notes": ""
    },
    {
      "organization": "mozilla",
      "criteria": "safe-to-deploy",
      "delta": "0.3.27 -> 0.3.26",
      "version": "",
      "notes": ""
    },
    {
      "organization": "mozilla",
      "criteria": "safe-to-deploy",
      "delta": "0.3.27 -> 0.3.28",
      "version": "",
      "notes": ""
    },
    {
      "organization": "zcash",
      "criteria": "safe-to-deploy",
      "delta": "0.3.25 -> 0.3.26",
      "version": "",
      "notes": "Adds optional dependency on `portable-atomic 1` that can be enabled to replace `core::sync::atomic`."
    },
    {
      "organization": "zcash",
      "criteria": "safe-to-deploy",
      "delta": "0.3.26 -> 0.3.27",
      "version": "",
      "notes": ""
    },
    {
      "organization": "zcash",
      "criteria": "safe-to-deploy",
      "delta": "0.3.27 -> 0.3.28",
      "version": "",
      "notes": "Adds an optimization in unsafe code (https://github.com/rust-lang/futures-rs/pull/2723).\\nThe new code in AtomicWaker calls self.waker.get() twice assuming the same resulting pointer, but this appears to be correct because the AtomicWaker is in the required locked state.\\n"
    },
    {
      "organization": "zcash",
      "criteria": "safe-to-deploy",
      "delta": "0.3.28 -> 0.3.29",
      "version": "",
      "notes": ""
    },
    {
      "organization": "zcash",
      "criteria": "safe-to-deploy",
      "delta": "0.3.29 -> 0.3.30",
      "version": "",
      "notes": "Removes `build.rs` now that it can rely on the `target_has_atomic` attribute."
    }
  ],
  "dependencies": [],
  "passed_audit": true,
  "num_unsafe_calls": 4,
  "miri": true,
  "past_audit": true,
  "miri_details": {
    "status": "crash",
    "passed": 0,
    "failed": 3,
    "ignored": 0,
    "measured": 0,
    "filtered_out": 0,
    "time_seconds": 0.04
  }
}
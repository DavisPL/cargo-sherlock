{
  "rustsec_label": "Patched",
  "in_rustsec_patched": true,
  "in_rustsec_current": false,
  "in_rust_sec": true,
  "rustsec_tag": "Vulnerability",
  "developers": [
    "Amanieu"
  ],
  "stars": 343,
  "forks": 45,
  "downloads": 221184651,
  "num_side_effects": 44,
  "failed_rudra": false,
  "audits": [
    {
      "organization": "bytecode-alliance",
      "criteria": "safe-to-deploy",
      "delta": "",
      "version": "1.1.4",
      "notes": "uses unsafe to implement thread local storage of objects"
    },
    {
      "organization": "google",
      "criteria": "[ \"safe-to-run\", \"does-not-implement-crypto\",]",
      "delta": "",
      "version": "1.1.4",
      "notes": ""
    },
    {
      "organization": "google",
      "criteria": "[ \"safe-to-deploy\", \"ub-risk-2\",]",
      "delta": "1.0.1 -> 1.1.7",
      "version": "",
      "notes": "Reviewed on https://fxrev.dev/906819"
    },
    {
      "organization": "zcash",
      "criteria": "safe-to-deploy",
      "delta": "1.1.4 -> 1.1.7",
      "version": "",
      "notes": "New `unsafe` usage:\\n- An extra `deallocate_bucket`, to replace a `Mutex::lock` with a `compare_exchange`.\\n- Setting and getting a `#[thread_local] static mut Option<Thread>` on nightly.\\n"
    },
    {
      "organization": "zcash",
      "criteria": "safe-to-deploy",
      "delta": "1.1.7 -> 1.1.8",
      "version": "",
      "notes": "Adds `unsafe` code that makes an assumption that `ptr::null_mut::<Entry<T>>()` is a valid representation\\nof an `AtomicPtr<Entry<T>>`, but this is likely a correct assumption.\\n"
    }
  ],
  "dependencies": [
    [
      "cfg-if",
      "1.0.0"
    ],
    [
      "once_cell",
      "1.21.1"
    ]
  ],
  "passed_audit": true,
  "num_unsafe_calls": 38,
  "miri": false,
  "past_audit": true,
  "miri_details": {
    "status": "ok",
    "passed": 2,
    "failed": 0,
    "ignored": 0,
    "measured": 0,
    "filtered_out": 0,
    "time_seconds": 0.26
  }
}
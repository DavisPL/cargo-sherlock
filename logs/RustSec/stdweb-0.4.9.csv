************************************
event,timestamp,label
RustSec,-,Critical
************************************
event,timestamp,organization,type,criteria,delta,version,notes
************************************
event,timestamp,name,username,url
Author,-,Koute,koute,https://github.com/koute
************************************
event,timestamp,downloads
Downloads,-,10547985
************************************
event,timestamp,total,flagged
Side Effects,-,124,67
************************************
Rudra,timestamp
"2024-06-21 18:16:08.426802 |INFO | [rudra-progress] Running cargo rudra
2024-06-21 18:16:12.170853 |INFO | [rudra-progress] Running rudra for target lib:stdweb
[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webcore/value.rs:67:37[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m67[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m            let real_result: bool = js!( return @{self} === @{other}; ).try_into().unwrap();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                    [0m[0m[1m[38;5;12m-----------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: `#[warn(semicolon_in_expressions_from_macros)]` on by default[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webcore/value.rs:67:37[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m67[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m            let real_result: bool = js!( return @{self} === @{other}; ).try_into().unwrap();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                    [0m[0m[1m[38;5;12m-----------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webcore/value.rs:67:37[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m67[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m            let real_result: bool = js!( return @{self} === @{other}; ).try_into().unwrap();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                    [0m[0m[1m[38;5;12m-----------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: anonymous parameters are deprecated and will be removed in the next edition[0m
[0m [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/try_from.rs:9:18[0m
[0m  [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m9[0m[0m [0m[0m[1m[38;5;12m| [0m[0m    fn try_from( T ) -> Result< Self, Self::Error >;[0m
[0m  [0m[0m[1m[38;5;12m| [0m[0m                 [0m[0m[1m[33m^[0m[0m [0m[0m[1m[33mhelp: try naming the parameter or explicitly ignoring it: `_: T`[0m
[0m  [0m[0m[1m[38;5;12m|[0m
[0m  [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: `#[warn(anonymous_parameters)]` on by default[0m
[0m  [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018![0m
[0m  [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webcore/object.rs:15:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m15[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m16[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return Object.keys( @{self} ).length;[0m
[0m[1m[38;5;12m17[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webcore/object.rs:15:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m15[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m16[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return Object.keys( @{self} ).length;[0m
[0m[1m[38;5;12m17[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webcore/object.rs:15:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m15[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m16[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return Object.keys( @{self} ).length;[0m
[0m[1m[38;5;12m17[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webcore/object.rs:68:21[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m68[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        let value = js! {[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_____________________-[0m
[0m[1m[38;5;12m69[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{value};[0m
[0m[1m[38;5;12m70[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        };[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webcore/object.rs:68:21[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m68[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        let value = js! {[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_____________________-[0m
[0m[1m[38;5;12m69[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{value};[0m
[0m[1m[38;5;12m70[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        };[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webcore/object.rs:98:21[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m98[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        let value = js! {[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_____________________-[0m
[0m[1m[38;5;12m99[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{value};[0m
[0m[1m[38;5;12m100[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        };[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webcore/object.rs:98:21[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m98[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        let value = js! {[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_____________________-[0m
[0m[1m[38;5;12m99[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{value};[0m
[0m[1m[38;5;12m100[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        };[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webcore/array.rs:13:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m13[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m14[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.length;[0m
[0m[1m[38;5;12m15[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webcore/array.rs:13:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m13[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m14[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.length;[0m
[0m[1m[38;5;12m15[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webcore/array.rs:65:21[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m65[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        let value = js! {[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_____________________-[0m
[0m[1m[38;5;12m66[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{value};[0m
[0m[1m[38;5;12m67[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        };[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webcore/array.rs:65:21[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m65[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        let value = js! {[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_____________________-[0m
[0m[1m[38;5;12m66[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{value};[0m
[0m[1m[38;5;12m67[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        };[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webcore/symbol.rs:22:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m22[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m23[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return Module.STDWEB_PRIVATE.get_raw_value( @{self.0} ) === Module.STDWEB_PRIVATE.get_raw_value( @{rhs.0} );[0m
[0m[1m[38;5;12m24[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webcore/symbol.rs:22:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m22[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m23[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return Module.STDWEB_PRIVATE.get_raw_value( @{self.0} ) === Module.STDWEB_PRIVATE.get_raw_value( @{rhs.0} );[0m
[0m[1m[38;5;12m24[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webcore/symbol.rs:22:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m22[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m23[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return Module.STDWEB_PRIVATE.get_raw_value( @{self.0} ) === Module.STDWEB_PRIVATE.get_raw_value( @{rhs.0} );[0m
[0m[1m[38;5;12m24[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webcore/symbol.rs:30:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m30[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!( @(no_return)[0m
[0m[1m[38;5;12m31[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            Module.STDWEB_PRIVATE.unregister_raw_value( @{self.0} );[0m
[0m[1m[38;5;12m32[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:325:41[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m325[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                          [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webcore/symbol.rs:30:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m30[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!( @(no_return)[0m
[0m[1m[38;5;12m31[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            Module.STDWEB_PRIVATE.unregister_raw_value( @{self.0} );[0m
[0m[1m[38;5;12m32[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webcore/promise.rs:34:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m34[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m35[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            var state = @{&self.state};[0m
[0m[1m[38;5;12m36[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            state.cancelled = true;[0m
[0m[1m[38;5;12m37[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            state.callback.drop();[0m
[0m[1m[38;5;12m38[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:325:41[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m325[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                          [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webcore/promise.rs:34:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m34[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m35[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            var state = @{&self.state};[0m
[0m[1m[38;5;12m36[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            state.cancelled = true;[0m
[0m[1m[38;5;12m37[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            state.callback.drop();[0m
[0m[1m[38;5;12m38[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webcore/promise.rs:56:10[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m56[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        (js! {[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m__________-[0m
[0m[1m[38;5;12m57[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            var input = @{input};[0m
[0m[1m[38;5;12m58[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            // This emulates the `Type(input) is Object` and `IsCallable(input.then)` ECMAScript abstract operations.[0m
[0m[1m[38;5;12m59[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return Object( input ) === input &&[0m
[0m[1m[38;5;12m60[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                   typeof input.then === ""function"";[0m
[0m[1m[38;5;12m61[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webcore/promise.rs:56:10[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m56[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        (js! {[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m__________-[0m
[0m[1m[38;5;12m57[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            var input = @{input};[0m
[0m[1m[38;5;12m58[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            // This emulates the `Type(input) is Object` and `IsCallable(input.then)` ECMAScript abstract operations.[0m
[0m[1m[38;5;12m59[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return Object( input ) === input &&[0m
[0m[1m[38;5;12m60[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                   typeof input.then === ""function"";[0m
[0m[1m[38;5;12m61[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webcore/promise.rs:56:10[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m56[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        (js! {[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m__________-[0m
[0m[1m[38;5;12m57[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            var input = @{input};[0m
[0m[1m[38;5;12m58[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            // This emulates the `Type(input) is Object` and `IsCallable(input.then)` ECMAScript abstract operations.[0m
[0m[1m[38;5;12m59[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return Object( input ) === input &&[0m
[0m[1m[38;5;12m60[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                   typeof input.then === ""function"";[0m
[0m[1m[38;5;12m61[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webcore/promise.rs:95:19[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m95[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m            Some( js!( return Promise.resolve( @{input} ); ).try_into().unwrap() )[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                  [0m[0m[1m[38;5;12m------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webcore/promise.rs:95:19[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m95[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m            Some( js!( return Promise.resolve( @{input} ); ).try_into().unwrap() )[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                  [0m[0m[1m[38;5;12m------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webcore/promise.rs:95:19[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m95[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m            Some( js!( return Promise.resolve( @{input} ); ).try_into().unwrap() )[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                  [0m[0m[1m[38;5;12m------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webcore/promise.rs:239:21[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m239[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        let state = js!([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_____________________-[0m
[0m[1m[38;5;12m240[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            var callback = @{Once( callback )};[0m
[0m[1m[38;5;12m241[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m242[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            var state = {[0m
[0m[1m[38;5;12m...[0m[0m   [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m258[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return state;[0m
[0m[1m[38;5;12m259[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webcore/promise.rs:239:21[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m239[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        let state = js!([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_____________________-[0m
[0m[1m[38;5;12m240[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            var callback = @{Once( callback )};[0m
[0m[1m[38;5;12m241[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m242[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            var state = {[0m
[0m[1m[38;5;12m...[0m[0m   [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m258[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return state;[0m
[0m[1m[38;5;12m259[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:422:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m422[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webcore/promise.rs:239:21[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m239[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        let state = js!([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_____________________-[0m
[0m[1m[38;5;12m240[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            var callback = @{Once( callback )};[0m
[0m[1m[38;5;12m241[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m242[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            var state = {[0m
[0m[1m[38;5;12m...[0m[0m   [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m258[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return state;[0m
[0m[1m[38;5;12m259[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webcore/promise.rs:239:21[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m239[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        let state = js!([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_____________________-[0m
[0m[1m[38;5;12m240[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            var callback = @{Once( callback )};[0m
[0m[1m[38;5;12m241[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m242[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            var state = {[0m
[0m[1m[38;5;12m...[0m[0m   [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m258[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return state;[0m
[0m[1m[38;5;12m259[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:17:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m17[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m18[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return new Date();[0m
[0m[1m[38;5;12m19[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:17:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m17[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m18[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return new Date();[0m
[0m[1m[38;5;12m19[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:36:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m36[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m37[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return new Date(@{year}, @{month}, @{day}, @{hours}, @{minutes}, @{seconds}, @{milliseconds});[0m
[0m[1m[38;5;12m38[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:36:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m36[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m37[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return new Date(@{year}, @{month}, @{day}, @{hours}, @{minutes}, @{seconds}, @{milliseconds});[0m
[0m[1m[38;5;12m38[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:36:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m36[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m37[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return new Date(@{year}, @{month}, @{day}, @{hours}, @{minutes}, @{seconds}, @{milliseconds});[0m
[0m[1m[38;5;12m38[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:50:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m50[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m51[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return new Date(@{date_string});[0m
[0m[1m[38;5;12m52[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:50:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m50[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m51[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return new Date(@{date_string});[0m
[0m[1m[38;5;12m52[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:50:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m50[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m51[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return new Date(@{date_string});[0m
[0m[1m[38;5;12m52[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:64:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m64[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m65[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return new Date(@{now});[0m
[0m[1m[38;5;12m66[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:64:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m64[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m65[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return new Date(@{now});[0m
[0m[1m[38;5;12m66[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:64:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m64[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m65[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return new Date(@{now});[0m
[0m[1m[38;5;12m66[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:75:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m75[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m76[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return Date.UTC(@{year}, @{month}, @{day}, @{hours}, @{minutes}, @{seconds}, @{milliseconds});[0m
[0m[1m[38;5;12m77[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:75:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m75[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m76[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return Date.UTC(@{year}, @{month}, @{day}, @{hours}, @{minutes}, @{seconds}, @{milliseconds});[0m
[0m[1m[38;5;12m77[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:75:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m75[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m76[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return Date.UTC(@{year}, @{month}, @{day}, @{hours}, @{minutes}, @{seconds}, @{milliseconds});[0m
[0m[1m[38;5;12m77[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:87:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m87[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m88[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return Date.parse(@{date_string});[0m
[0m[1m[38;5;12m89[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:87:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m87[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m88[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return Date.parse(@{date_string});[0m
[0m[1m[38;5;12m89[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:87:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m87[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m88[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return Date.parse(@{date_string});[0m
[0m[1m[38;5;12m89[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:97:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m97[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m98[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return Date.now();[0m
[0m[1m[38;5;12m99[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:97:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m97[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m98[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return Date.now();[0m
[0m[1m[38;5;12m99[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:107:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m107[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m108[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.getDate();[0m
[0m[1m[38;5;12m109[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:107:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m107[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m108[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.getDate();[0m
[0m[1m[38;5;12m109[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:107:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m107[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m108[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.getDate();[0m
[0m[1m[38;5;12m109[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:118:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m118[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m119[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.getDay();[0m
[0m[1m[38;5;12m120[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:118:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m118[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m119[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.getDay();[0m
[0m[1m[38;5;12m120[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:118:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m118[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m119[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.getDay();[0m
[0m[1m[38;5;12m120[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:128:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m128[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m129[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.getFullYear();[0m
[0m[1m[38;5;12m130[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:128:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m128[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m129[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.getFullYear();[0m
[0m[1m[38;5;12m130[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:128:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m128[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m129[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.getFullYear();[0m
[0m[1m[38;5;12m130[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:138:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m138[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m139[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.getHours();[0m
[0m[1m[38;5;12m140[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:138:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m138[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m139[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.getHours();[0m
[0m[1m[38;5;12m140[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:138:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m138[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m139[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.getHours();[0m
[0m[1m[38;5;12m140[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:148:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m148[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m149[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.getMilliseconds();[0m
[0m[1m[38;5;12m150[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:148:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m148[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m149[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.getMilliseconds();[0m
[0m[1m[38;5;12m150[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:148:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m148[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m149[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.getMilliseconds();[0m
[0m[1m[38;5;12m150[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:158:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m158[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m159[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.getMinutes();[0m
[0m[1m[38;5;12m160[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:158:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m158[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m159[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.getMinutes();[0m
[0m[1m[38;5;12m160[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:158:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m158[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m159[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.getMinutes();[0m
[0m[1m[38;5;12m160[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:169:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m169[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m170[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.getMonth();[0m
[0m[1m[38;5;12m171[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:169:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m169[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m170[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.getMonth();[0m
[0m[1m[38;5;12m171[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:169:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m169[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m170[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.getMonth();[0m
[0m[1m[38;5;12m171[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:179:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m179[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m180[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.getSeconds();[0m
[0m[1m[38;5;12m181[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:179:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m179[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m180[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.getSeconds();[0m
[0m[1m[38;5;12m181[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:179:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m179[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m180[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.getSeconds();[0m
[0m[1m[38;5;12m181[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:196:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m196[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m197[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.getTime();[0m
[0m[1m[38;5;12m198[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:196:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m196[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m197[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.getTime();[0m
[0m[1m[38;5;12m198[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:196:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m196[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m197[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.getTime();[0m
[0m[1m[38;5;12m198[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:206:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m206[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m207[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.getTimezoneOffset();[0m
[0m[1m[38;5;12m208[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:206:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m206[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m207[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.getTimezoneOffset();[0m
[0m[1m[38;5;12m208[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:206:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m206[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m207[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.getTimezoneOffset();[0m
[0m[1m[38;5;12m208[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:217:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m217[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m218[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.getUTCDate();[0m
[0m[1m[38;5;12m219[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:217:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m217[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m218[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.getUTCDate();[0m
[0m[1m[38;5;12m219[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:217:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m217[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m218[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.getUTCDate();[0m
[0m[1m[38;5;12m219[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:228:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m228[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m229[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.getUTCDay();[0m
[0m[1m[38;5;12m230[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:228:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m228[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m229[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.getUTCDay();[0m
[0m[1m[38;5;12m230[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:228:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m228[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m229[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.getUTCDay();[0m
[0m[1m[38;5;12m230[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:238:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m238[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m239[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.getUTCFullYear();[0m
[0m[1m[38;5;12m240[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:238:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m238[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m239[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.getUTCFullYear();[0m
[0m[1m[38;5;12m240[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:238:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m238[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m239[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.getUTCFullYear();[0m
[0m[1m[38;5;12m240[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:248:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m248[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m249[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.getUTCHours();[0m
[0m[1m[38;5;12m250[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:248:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m248[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m249[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.getUTCHours();[0m
[0m[1m[38;5;12m250[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:248:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m248[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m249[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.getUTCHours();[0m
[0m[1m[38;5;12m250[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:259:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m259[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m260[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.getUTCMilliseconds();[0m
[0m[1m[38;5;12m261[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:259:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m259[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m260[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.getUTCMilliseconds();[0m
[0m[1m[38;5;12m261[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:259:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m259[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m260[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.getUTCMilliseconds();[0m
[0m[1m[38;5;12m261[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:269:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m269[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m270[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.getUTCMinutes();[0m
[0m[1m[38;5;12m271[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:269:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m269[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m270[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.getUTCMinutes();[0m
[0m[1m[38;5;12m271[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:269:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m269[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m270[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.getUTCMinutes();[0m
[0m[1m[38;5;12m271[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:280:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m280[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m281[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.getUTCMonth();[0m
[0m[1m[38;5;12m282[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:280:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m280[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m281[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.getUTCMonth();[0m
[0m[1m[38;5;12m282[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:280:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m280[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m281[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.getUTCMonth();[0m
[0m[1m[38;5;12m282[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:290:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m290[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m291[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.getUTCSeconds();[0m
[0m[1m[38;5;12m292[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:290:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m290[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m291[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.getUTCSeconds();[0m
[0m[1m[38;5;12m292[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:290:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m290[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m291[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.getUTCSeconds();[0m
[0m[1m[38;5;12m292[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:300:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m300[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!{ @(no_return)[0m
[0m[1m[38;5;12m301[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.setDate(@{date});[0m
[0m[1m[38;5;12m302[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:300:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m300[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!{ @(no_return)[0m
[0m[1m[38;5;12m301[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.setDate(@{date});[0m
[0m[1m[38;5;12m302[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:310:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m310[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!{ @(no_return)[0m
[0m[1m[38;5;12m311[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.setFullYear(@{full_year});[0m
[0m[1m[38;5;12m312[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:310:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m310[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!{ @(no_return)[0m
[0m[1m[38;5;12m311[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.setFullYear(@{full_year});[0m
[0m[1m[38;5;12m312[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:321:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m321[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!{ @(no_return)[0m
[0m[1m[38;5;12m322[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.setHours(@{hours});[0m
[0m[1m[38;5;12m323[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:321:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m321[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!{ @(no_return)[0m
[0m[1m[38;5;12m322[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.setHours(@{hours});[0m
[0m[1m[38;5;12m323[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:331:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m331[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!{ @(no_return)[0m
[0m[1m[38;5;12m332[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.setMilliseconds(@{milliseconds});[0m
[0m[1m[38;5;12m333[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:331:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m331[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!{ @(no_return)[0m
[0m[1m[38;5;12m332[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.setMilliseconds(@{milliseconds});[0m
[0m[1m[38;5;12m333[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:341:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m341[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!{ @(no_return)[0m
[0m[1m[38;5;12m342[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.setMinutes(@{minutes});[0m
[0m[1m[38;5;12m343[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:341:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m341[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!{ @(no_return)[0m
[0m[1m[38;5;12m342[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.setMinutes(@{minutes});[0m
[0m[1m[38;5;12m343[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:351:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m351[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!{ @(no_return)[0m
[0m[1m[38;5;12m352[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.setMonth(@{month});[0m
[0m[1m[38;5;12m353[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:351:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m351[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!{ @(no_return)[0m
[0m[1m[38;5;12m352[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.setMonth(@{month});[0m
[0m[1m[38;5;12m353[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:361:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m361[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!{ @(no_return)[0m
[0m[1m[38;5;12m362[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.setSeconds(@{seconds});[0m
[0m[1m[38;5;12m363[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:361:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m361[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!{ @(no_return)[0m
[0m[1m[38;5;12m362[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.setSeconds(@{seconds});[0m
[0m[1m[38;5;12m363[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:372:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m372[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!{ @(no_return)[0m
[0m[1m[38;5;12m373[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.setTime(@{time});[0m
[0m[1m[38;5;12m374[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:372:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m372[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!{ @(no_return)[0m
[0m[1m[38;5;12m373[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.setTime(@{time});[0m
[0m[1m[38;5;12m374[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:382:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m382[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!{ @(no_return)[0m
[0m[1m[38;5;12m383[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.setUTCDate(@{date});[0m
[0m[1m[38;5;12m384[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:382:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m382[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!{ @(no_return)[0m
[0m[1m[38;5;12m383[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.setUTCDate(@{date});[0m
[0m[1m[38;5;12m384[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:392:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m392[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!{ @(no_return)[0m
[0m[1m[38;5;12m393[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.setUTCFullYear(@{full_year});[0m
[0m[1m[38;5;12m394[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:392:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m392[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!{ @(no_return)[0m
[0m[1m[38;5;12m393[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.setUTCFullYear(@{full_year});[0m
[0m[1m[38;5;12m394[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:403:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m403[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!{ @(no_return)[0m
[0m[1m[38;5;12m404[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.setUTCHours(@{hours});[0m
[0m[1m[38;5;12m405[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:403:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m403[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!{ @(no_return)[0m
[0m[1m[38;5;12m404[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.setUTCHours(@{hours});[0m
[0m[1m[38;5;12m405[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:413:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m413[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!{ @(no_return)[0m
[0m[1m[38;5;12m414[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.setUTCMilliseconds(@{milliseconds});[0m
[0m[1m[38;5;12m415[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:413:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m413[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!{ @(no_return)[0m
[0m[1m[38;5;12m414[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.setUTCMilliseconds(@{milliseconds});[0m
[0m[1m[38;5;12m415[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:423:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m423[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!{ @(no_return)[0m
[0m[1m[38;5;12m424[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.setUTCMinutes(@{minutes});[0m
[0m[1m[38;5;12m425[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:423:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m423[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!{ @(no_return)[0m
[0m[1m[38;5;12m424[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.setUTCMinutes(@{minutes});[0m
[0m[1m[38;5;12m425[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:433:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m433[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!{ @(no_return)[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.setUTCMonth(@{month});[0m
[0m[1m[38;5;12m435[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:433:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m433[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!{ @(no_return)[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.setUTCMonth(@{month});[0m
[0m[1m[38;5;12m435[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:443:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m443[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!{ @(no_return)[0m
[0m[1m[38;5;12m444[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.setUTCSeconds(@{seconds});[0m
[0m[1m[38;5;12m445[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:443:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m443[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!{ @(no_return)[0m
[0m[1m[38;5;12m444[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.setUTCSeconds(@{seconds});[0m
[0m[1m[38;5;12m445[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:454:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m454[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m455[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.toDateString();[0m
[0m[1m[38;5;12m456[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:454:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m454[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m455[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.toDateString();[0m
[0m[1m[38;5;12m456[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:454:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m454[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m455[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.toDateString();[0m
[0m[1m[38;5;12m456[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:467:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m467[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m468[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.toISOString();[0m
[0m[1m[38;5;12m469[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:467:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m467[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m468[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.toISOString();[0m
[0m[1m[38;5;12m469[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:467:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m467[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m468[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.toISOString();[0m
[0m[1m[38;5;12m469[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:478:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m478[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m479[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.toJSON();[0m
[0m[1m[38;5;12m480[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:478:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m478[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m479[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.toJSON();[0m
[0m[1m[38;5;12m480[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:478:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m478[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m479[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.toJSON();[0m
[0m[1m[38;5;12m480[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:489:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m489[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m490[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.toString();[0m
[0m[1m[38;5;12m491[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:489:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m489[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m490[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.toString();[0m
[0m[1m[38;5;12m491[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:489:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m489[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m490[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.toString();[0m
[0m[1m[38;5;12m491[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:500:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m500[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m501[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.toTimeString();[0m
[0m[1m[38;5;12m502[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:500:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m500[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m501[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.toTimeString();[0m
[0m[1m[38;5;12m502[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:500:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m500[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m501[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.toTimeString();[0m
[0m[1m[38;5;12m502[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:511:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m511[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m512[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.toUTCString();[0m
[0m[1m[38;5;12m513[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:511:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m511[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m512[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.toUTCString();[0m
[0m[1m[38;5;12m513[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:511:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m511[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m512[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.toUTCString();[0m
[0m[1m[38;5;12m513[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:521:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m521[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m522[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.valueOf();[0m
[0m[1m[38;5;12m523[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:521:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m521[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m522[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.valueOf();[0m
[0m[1m[38;5;12m523[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/date.rs:521:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m521[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m522[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.valueOf();[0m
[0m[1m[38;5;12m523[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/document.rs:34:14[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m34[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m    unsafe { js!( return document; ).into_reference_unchecked() }.unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m             [0m[0m[1m[38;5;12m-----------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/document.rs:45:13[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m45[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m            js!( return @{self}.createDocumentFragment(); ).into_reference_unchecked().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m            [0m[0m[1m[38;5;12m-----------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/document.rs:45:13[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m45[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m            js!( return @{self}.createDocumentFragment(); ).into_reference_unchecked().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m            [0m[0m[1m[38;5;12m-----------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/document.rs:45:13[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m45[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m            js!( return @{self}.createDocumentFragment(); ).into_reference_unchecked().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m            [0m[0m[1m[38;5;12m-----------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/document.rs:57:17[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m57[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m            Ok( js!( return @{self}.createElement( @{tag} ); ).into_reference_unchecked().unwrap() )[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                [0m[0m[1m[38;5;12m----------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/document.rs:57:17[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m57[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m            Ok( js!( return @{self}.createElement( @{tag} ); ).into_reference_unchecked().unwrap() )[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                [0m[0m[1m[38;5;12m----------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/document.rs:57:17[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m57[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m            Ok( js!( return @{self}.createElement( @{tag} ); ).into_reference_unchecked().unwrap() )[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                [0m[0m[1m[38;5;12m----------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/document.rs:67:13[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m67[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m            js!( return @{self}.createTextNode( @{text} ); ).into_reference_unchecked().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m            [0m[0m[1m[38;5;12m------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/document.rs:67:13[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m67[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m            js!( return @{self}.createTextNode( @{text} ); ).into_reference_unchecked().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m            [0m[0m[1m[38;5;12m------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/document.rs:67:13[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m67[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m            js!( return @{self}.createTextNode( @{text} ); ).into_reference_unchecked().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m            [0m[0m[1m[38;5;12m------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/document.rs:79:13[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m79[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m            js!([0m
[0m[1m[38;5;12m80[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                return @{self}.location;[0m
[0m[1m[38;5;12m81[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            ).into_reference_unchecked()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_____________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/document.rs:79:13[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m79[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m            js!([0m
[0m[1m[38;5;12m80[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                return @{self}.location;[0m
[0m[1m[38;5;12m81[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            ).into_reference_unchecked()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_____________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/document.rs:91:13[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m91[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m            js!([0m
[0m[1m[38;5;12m92[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                return @{self}.body;[0m
[0m[1m[38;5;12m93[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            ).into_reference_unchecked()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_____________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/document.rs:91:13[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m91[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m            js!([0m
[0m[1m[38;5;12m92[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                return @{self}.body;[0m
[0m[1m[38;5;12m93[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            ).into_reference_unchecked()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_____________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/document.rs:104:13[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m104[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m            js!([0m
[0m[1m[38;5;12m105[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                return @{self}.head;[0m
[0m[1m[38;5;12m106[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            ).into_reference_unchecked()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_____________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/document.rs:104:13[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m104[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m            js!([0m
[0m[1m[38;5;12m105[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                return @{self}.head;[0m
[0m[1m[38;5;12m106[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            ).into_reference_unchecked()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_____________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/document.rs:116:13[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m116[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m            js!([0m
[0m[1m[38;5;12m117[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                return @{self}.title;[0m
[0m[1m[38;5;12m118[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_____________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/document.rs:116:13[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m116[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m            js!([0m
[0m[1m[38;5;12m117[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                return @{self}.title;[0m
[0m[1m[38;5;12m118[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_____________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/document.rs:128:13[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m128[0m[0m [0m[0m[1m[38;5;12m| [0m[0m            js!( @(no_return) @{self}.title = @{title}; );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m            [0m[0m[1m[38;5;12m---------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                  [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/document.rs:128:13[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m128[0m[0m [0m[0m[1m[38;5;12m| [0m[0m            js!( @(no_return) @{self}.title = @{title}; );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m            [0m[0m[1m[38;5;12m---------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/document.rs:139:13[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m139[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m            js!([0m
[0m[1m[38;5;12m140[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                return @{self}.documentElement;[0m
[0m[1m[38;5;12m141[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_____________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/document.rs:139:13[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m139[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m            js!([0m
[0m[1m[38;5;12m140[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                return @{self}.documentElement;[0m
[0m[1m[38;5;12m141[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_____________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/document.rs:150:21[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m150[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        let value = js!([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_____________________-[0m
[0m[1m[38;5;12m151[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.pointerLockElement;[0m
[0m[1m[38;5;12m152[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/document.rs:150:21[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m150[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        let value = js!([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_____________________-[0m
[0m[1m[38;5;12m151[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.pointerLockElement;[0m
[0m[1m[38;5;12m152[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/document.rs:165:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m165[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!( @(no_return)[0m
[0m[1m[38;5;12m166[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.exitPointerLock();[0m
[0m[1m[38;5;12m167[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:325:41[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m325[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                          [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/document.rs:165:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m165[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!( @(no_return)[0m
[0m[1m[38;5;12m166[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.exitPointerLock();[0m
[0m[1m[38;5;12m167[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/window.rs:20:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m20[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m21[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            var val = @{&self.0};[0m
[0m[1m[38;5;12m22[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            val.window.cancelAnimationFrame(val.request);[0m
[0m[1m[38;5;12m23[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            val.callback.drop();[0m
[0m[1m[38;5;12m24[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:325:41[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m325[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                          [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/window.rs:20:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m20[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m21[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            var val = @{&self.0};[0m
[0m[1m[38;5;12m22[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            val.window.cancelAnimationFrame(val.request);[0m
[0m[1m[38;5;12m23[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            val.callback.drop();[0m
[0m[1m[38;5;12m24[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/window.rs:44:14[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m44[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m    unsafe { js!( return window; ).into_reference_unchecked() }.unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m             [0m[0m[1m[38;5;12m---------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/window.rs:54:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m54[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!( @(no_return)[0m
[0m[1m[38;5;12m55[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.alert( @{message} );[0m
[0m[1m[38;5;12m56[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/window.rs:54:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m54[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!( @(no_return)[0m
[0m[1m[38;5;12m55[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.alert( @{message} );[0m
[0m[1m[38;5;12m56[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/window.rs:71:13[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m71[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m            js!([0m
[0m[1m[38;5;12m72[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                return @{self.as_ref()}.localStorage;[0m
[0m[1m[38;5;12m73[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            ).into_reference_unchecked().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_____________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/window.rs:71:13[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m71[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m            js!([0m
[0m[1m[38;5;12m72[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                return @{self.as_ref()}.localStorage;[0m
[0m[1m[38;5;12m73[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            ).into_reference_unchecked().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_____________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/window.rs:93:13[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m93[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m            js!([0m
[0m[1m[38;5;12m94[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                return @{self.as_ref()}.sessionStorage;[0m
[0m[1m[38;5;12m95[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            ).into_reference_unchecked().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_____________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/window.rs:93:13[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m93[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m            js!([0m
[0m[1m[38;5;12m94[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                return @{self.as_ref()}.sessionStorage;[0m
[0m[1m[38;5;12m95[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            ).into_reference_unchecked().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_____________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/window.rs:107:13[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m107[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m            js!([0m
[0m[1m[38;5;12m108[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                return @{self}.location;[0m
[0m[1m[38;5;12m109[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            ).into_reference_unchecked()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_____________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/window.rs:107:13[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m107[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m            js!([0m
[0m[1m[38;5;12m108[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                return @{self}.location;[0m
[0m[1m[38;5;12m109[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            ).into_reference_unchecked()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_____________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/window.rs:127:29[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m127[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        let values: Value = js!{[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_____________________________-[0m
[0m[1m[38;5;12m128[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            var callback = @{Once(callback)};[0m
[0m[1m[38;5;12m129[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            var request = @{self}.requestAnimationFrame(callback);[0m
[0m[1m[38;5;12m130[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return { request: request, callback: callback, window: @{self} };[0m
[0m[1m[38;5;12m131[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        };[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/window.rs:127:29[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m127[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        let values: Value = js!{[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_____________________________-[0m
[0m[1m[38;5;12m128[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            var callback = @{Once(callback)};[0m
[0m[1m[38;5;12m129[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            var request = @{self}.requestAnimationFrame(callback);[0m
[0m[1m[38;5;12m130[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return { request: request, callback: callback, window: @{self} };[0m
[0m[1m[38;5;12m131[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        };[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/window.rs:127:29[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m127[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        let values: Value = js!{[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_____________________________-[0m
[0m[1m[38;5;12m128[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            var callback = @{Once(callback)};[0m
[0m[1m[38;5;12m129[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            var request = @{self}.requestAnimationFrame(callback);[0m
[0m[1m[38;5;12m130[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return { request: request, callback: callback, window: @{self} };[0m
[0m[1m[38;5;12m131[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        };[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:422:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m422[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/window.rs:127:29[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m127[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        let values: Value = js!{[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_____________________________-[0m
[0m[1m[38;5;12m128[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            var callback = @{Once(callback)};[0m
[0m[1m[38;5;12m129[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            var request = @{self}.requestAnimationFrame(callback);[0m
[0m[1m[38;5;12m130[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return { request: request, callback: callback, window: @{self} };[0m
[0m[1m[38;5;12m131[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        };[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/window.rs:142:13[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m142[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m            js!([0m
[0m[1m[38;5;12m143[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                return @{self}.history;[0m
[0m[1m[38;5;12m144[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            ).into_reference_unchecked().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_____________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/window.rs:142:13[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m142[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m            js!([0m
[0m[1m[38;5;12m143[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                return @{self}.history;[0m
[0m[1m[38;5;12m144[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            ).into_reference_unchecked().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_____________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/window.rs:154:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m154[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m155[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.innerWidth;[0m
[0m[1m[38;5;12m156[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/window.rs:154:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m154[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m155[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.innerWidth;[0m
[0m[1m[38;5;12m156[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/window.rs:165:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m165[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m166[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.innerHeight;[0m
[0m[1m[38;5;12m167[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/window.rs:165:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m165[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m166[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.innerHeight;[0m
[0m[1m[38;5;12m167[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/window.rs:177:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m177[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m178[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.outerWidth;[0m
[0m[1m[38;5;12m179[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/window.rs:177:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m177[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m178[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.outerWidth;[0m
[0m[1m[38;5;12m179[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/window.rs:189:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m189[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m190[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.outerHeight;[0m
[0m[1m[38;5;12m191[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/window.rs:189:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m189[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m190[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.outerHeight;[0m
[0m[1m[38;5;12m191[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/window.rs:202:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m202[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m203[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.pageYOffset;[0m
[0m[1m[38;5;12m204[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/window.rs:202:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m202[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m203[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.pageYOffset;[0m
[0m[1m[38;5;12m204[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/window.rs:212:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m212[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m213[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.pageXOffset;[0m
[0m[1m[38;5;12m214[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/window.rs:212:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m212[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m213[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.pageXOffset;[0m
[0m[1m[38;5;12m214[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/window.rs:222:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m222[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m223[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.devicePixelRatio;[0m
[0m[1m[38;5;12m224[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/window.rs:222:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m222[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m223[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.devicePixelRatio;[0m
[0m[1m[38;5;12m224[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/event.rs:23:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m23[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m24[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.bubbles;[0m
[0m[1m[38;5;12m25[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/event.rs:23:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m23[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m24[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.bubbles;[0m
[0m[1m[38;5;12m25[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/event.rs:34:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m34[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m35[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.cancelBubble;[0m
[0m[1m[38;5;12m36[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/event.rs:34:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m34[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m35[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.cancelBubble;[0m
[0m[1m[38;5;12m36[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/event.rs:47:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m47[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m48[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self.as_ref()}.cancelBubble = @{value};[0m
[0m[1m[38;5;12m49[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/event.rs:47:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m47[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m48[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self.as_ref()}.cancelBubble = @{value};[0m
[0m[1m[38;5;12m49[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/event.rs:58:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m58[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m59[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.cancelable;[0m
[0m[1m[38;5;12m60[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/event.rs:58:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m58[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m59[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.cancelable;[0m
[0m[1m[38;5;12m60[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/event.rs:69:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m69[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m70[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.currentTarget;[0m
[0m[1m[38;5;12m71[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().ok()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/event.rs:69:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m69[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m70[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.currentTarget;[0m
[0m[1m[38;5;12m71[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().ok()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/event.rs:80:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m80[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m81[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.defaultPrevented;[0m
[0m[1m[38;5;12m82[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/event.rs:80:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m80[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m81[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.defaultPrevented;[0m
[0m[1m[38;5;12m82[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/event.rs:90:15[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m90[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        match js!([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_______________-[0m
[0m[1m[38;5;12m91[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.eventPhase;[0m
[0m[1m[38;5;12m92[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap() {[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/event.rs:90:15[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m90[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        match js!([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_______________-[0m
[0m[1m[38;5;12m91[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.eventPhase;[0m
[0m[1m[38;5;12m92[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap() {[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/event.rs:106:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m106[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m107[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self.as_ref()}.stopImmediatePropagation();[0m
[0m[1m[38;5;12m108[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:325:41[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m325[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                          [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/event.rs:106:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m106[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m107[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self.as_ref()}.stopImmediatePropagation();[0m
[0m[1m[38;5;12m108[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/event.rs:117:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m117[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m118[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self.as_ref()}.stopPropagation();[0m
[0m[1m[38;5;12m119[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:325:41[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m325[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                          [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/event.rs:117:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m117[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m118[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self.as_ref()}.stopPropagation();[0m
[0m[1m[38;5;12m119[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/event.rs:129:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m129[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m130[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.target;[0m
[0m[1m[38;5;12m131[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().ok()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/event.rs:129:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m129[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m130[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.target;[0m
[0m[1m[38;5;12m131[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().ok()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/event.rs:140:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m140[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m141[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.timeStamp;[0m
[0m[1m[38;5;12m142[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().ok()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/event.rs:140:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m140[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m141[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.timeStamp;[0m
[0m[1m[38;5;12m142[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().ok()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/event.rs:149:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m149[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m150[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.isTrusted;[0m
[0m[1m[38;5;12m151[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/event.rs:149:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m149[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m150[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.isTrusted;[0m
[0m[1m[38;5;12m151[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/event.rs:162:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m162[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m163[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.type;[0m
[0m[1m[38;5;12m164[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/event.rs:162:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m162[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m163[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.type;[0m
[0m[1m[38;5;12m164[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/event.rs:174:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m174[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m175[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self.as_ref()}.preventDefault();[0m
[0m[1m[38;5;12m176[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:325:41[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m325[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                          [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/event.rs:174:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m174[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m175[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self.as_ref()}.preventDefault();[0m
[0m[1m[38;5;12m176[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/event.rs:224:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m224[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m225[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.detail;[0m
[0m[1m[38;5;12m226[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/event.rs:224:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m224[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m225[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.detail;[0m
[0m[1m[38;5;12m226[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/event.rs:235:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m235[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m236[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.view;[0m
[0m[1m[38;5;12m237[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().ok()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/event.rs:235:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m235[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m236[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.view;[0m
[0m[1m[38;5;12m237[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().ok()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/event_target.rs:29:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m29[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m30[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            var listener = @{&self.listener_reference};[0m
[0m[1m[38;5;12m31[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.reference}.removeEventListener( @{self.event_type}, listener );[0m
[0m[1m[38;5;12m32[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            listener.drop();[0m
[0m[1m[38;5;12m33[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:331:61[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m331[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name, $a3_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/event_target.rs:29:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m29[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m30[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            var listener = @{&self.listener_reference};[0m
[0m[1m[38;5;12m31[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.reference}.removeEventListener( @{self.event_type}, listener );[0m
[0m[1m[38;5;12m32[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            listener.drop();[0m
[0m[1m[38;5;12m33[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/event_target.rs:53:34[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m53[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        let listener_reference = js! {[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m__________________________________-[0m
[0m[1m[38;5;12m54[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            var listener = @{listener};[0m
[0m[1m[38;5;12m55[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{reference}.addEventListener( @{T::EVENT_TYPE}, listener );[0m
[0m[1m[38;5;12m56[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return listener;[0m
[0m[1m[38;5;12m57[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }.try_into().unwrap();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/event_target.rs:53:34[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m53[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        let listener_reference = js! {[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m__________________________________-[0m
[0m[1m[38;5;12m54[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            var listener = @{listener};[0m
[0m[1m[38;5;12m55[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{reference}.addEventListener( @{T::EVENT_TYPE}, listener );[0m
[0m[1m[38;5;12m56[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return listener;[0m
[0m[1m[38;5;12m57[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }.try_into().unwrap();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/event_target.rs:53:34[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m53[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        let listener_reference = js! {[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m__________________________________-[0m
[0m[1m[38;5;12m54[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            var listener = @{listener};[0m
[0m[1m[38;5;12m55[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{reference}.addEventListener( @{T::EVENT_TYPE}, listener );[0m
[0m[1m[38;5;12m56[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return listener;[0m
[0m[1m[38;5;12m57[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }.try_into().unwrap();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/event_target.rs:71:13[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m71[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        Ok( js! ([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_____________-[0m
[0m[1m[38;5;12m72[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.dispatchEvent( @{event.as_ref()} );[0m
[0m[1m[38;5;12m73[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap() )[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/event_target.rs:71:13[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m71[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        Ok( js! ([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_____________-[0m
[0m[1m[38;5;12m72[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.dispatchEvent( @{event.as_ref()} );[0m
[0m[1m[38;5;12m73[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap() )[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/event_target.rs:71:13[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m71[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        Ok( js! ([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_____________-[0m
[0m[1m[38;5;12m72[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.dispatchEvent( @{event.as_ref()} );[0m
[0m[1m[38;5;12m73[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap() )[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: unused doc comment[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webapi/node.rs:346:1[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m346[0m[0m [0m[0m[1m[38;5;12m| [0m[0m/// Errors thrown by `Node` insertion methods.[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m[0m [0m[0m[1m[33mrustdoc does not generate documentation for macro invocations[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: `#[warn(unused_doc_comments)]` on by default[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mhelp[0m[0m: to document an item produced by a macro, the macro must produce the documentation as part of its expansion[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:45:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m45[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m46[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self.as_ref()}.appendChild( @{child.as_ref()} );[0m
[0m[1m[38;5;12m47[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:45:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m45[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m46[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self.as_ref()}.appendChild( @{child.as_ref()} );[0m
[0m[1m[38;5;12m47[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:55:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m55[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try! ([0m
[0m[1m[38;5;12m56[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.removeChild( @{child.as_ref()} );[0m
[0m[1m[38;5;12m57[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:422:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m422[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:55:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m55[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try! ([0m
[0m[1m[38;5;12m56[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.removeChild( @{child.as_ref()} );[0m
[0m[1m[38;5;12m57[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:55:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m55[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try! ([0m
[0m[1m[38;5;12m56[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.removeChild( @{child.as_ref()} );[0m
[0m[1m[38;5;12m57[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:55:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m55[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try! ([0m
[0m[1m[38;5;12m56[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.removeChild( @{child.as_ref()} );[0m
[0m[1m[38;5;12m57[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:70:22[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m70[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        let cloned = js! {[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m______________________-[0m
[0m[1m[38;5;12m71[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.cloneNode( @{is_deep} );[0m
[0m[1m[38;5;12m72[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        };[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:70:22[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m70[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        let cloned = js! {[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m______________________-[0m
[0m[1m[38;5;12m71[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.cloneNode( @{is_deep} );[0m
[0m[1m[38;5;12m72[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        };[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:70:22[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m70[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        let cloned = js! {[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m______________________-[0m
[0m[1m[38;5;12m71[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.cloneNode( @{is_deep} );[0m
[0m[1m[38;5;12m72[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        };[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:82:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m82[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m83[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.contains( @{node.as_ref()} );[0m
[0m[1m[38;5;12m84[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:82:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m82[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m83[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.contains( @{node.as_ref()} );[0m
[0m[1m[38;5;12m84[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:82:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m82[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m83[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.contains( @{node.as_ref()} );[0m
[0m[1m[38;5;12m84[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:92:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m92[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try! ([0m
[0m[1m[38;5;12m93[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.insertBefore( @{new_node.as_ref()}, @{reference_node.as_ref()} );[0m
[0m[1m[38;5;12m94[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:422:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m422[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:92:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m92[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try! ([0m
[0m[1m[38;5;12m93[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.insertBefore( @{new_node.as_ref()}, @{reference_node.as_ref()} );[0m
[0m[1m[38;5;12m94[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:92:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m92[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try! ([0m
[0m[1m[38;5;12m93[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.insertBefore( @{new_node.as_ref()}, @{reference_node.as_ref()} );[0m
[0m[1m[38;5;12m94[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:92:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m92[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try! ([0m
[0m[1m[38;5;12m93[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.insertBefore( @{new_node.as_ref()}, @{reference_node.as_ref()} );[0m
[0m[1m[38;5;12m94[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:102:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m102[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try! ([0m
[0m[1m[38;5;12m103[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.replaceChild( @{new_child.as_ref()}, @{old_child.as_ref()} );[0m
[0m[1m[38;5;12m104[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:422:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m422[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:102:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m102[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try! ([0m
[0m[1m[38;5;12m103[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.replaceChild( @{new_child.as_ref()}, @{old_child.as_ref()} );[0m
[0m[1m[38;5;12m104[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:102:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m102[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try! ([0m
[0m[1m[38;5;12m103[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.replaceChild( @{new_child.as_ref()}, @{old_child.as_ref()} );[0m
[0m[1m[38;5;12m104[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:102:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m102[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try! ([0m
[0m[1m[38;5;12m103[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.replaceChild( @{new_child.as_ref()}, @{old_child.as_ref()} );[0m
[0m[1m[38;5;12m104[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:112:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m112[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m113[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.parentNode;[0m
[0m[1m[38;5;12m114[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().ok()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:112:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m112[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m113[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.parentNode;[0m
[0m[1m[38;5;12m114[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().ok()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:122:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m122[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m123[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.firstChild;[0m
[0m[1m[38;5;12m124[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().ok()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:122:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m122[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m123[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.firstChild;[0m
[0m[1m[38;5;12m124[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().ok()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:132:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m132[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m133[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.lastChild;[0m
[0m[1m[38;5;12m134[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().ok()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:132:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m132[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m133[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.lastChild;[0m
[0m[1m[38;5;12m134[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().ok()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:142:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m142[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m143[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.nextSibling;[0m
[0m[1m[38;5;12m144[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().ok()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:142:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m142[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m143[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.nextSibling;[0m
[0m[1m[38;5;12m144[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().ok()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:152:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m152[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m153[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.nodeName;[0m
[0m[1m[38;5;12m154[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:152:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m152[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m153[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.nodeName;[0m
[0m[1m[38;5;12m154[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:162:15[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m162[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        match js!([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_______________-[0m
[0m[1m[38;5;12m163[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.nodeType;[0m
[0m[1m[38;5;12m164[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap() {[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:162:15[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m162[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        match js!([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_______________-[0m
[0m[1m[38;5;12m163[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.nodeType;[0m
[0m[1m[38;5;12m164[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap() {[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:183:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m183[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m184[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.nodeValue;[0m
[0m[1m[38;5;12m185[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().ok()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:183:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m183[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m184[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.nodeValue;[0m
[0m[1m[38;5;12m185[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().ok()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:193:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m193[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m194[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self.as_ref()}.nodeValue = @{value};[0m
[0m[1m[38;5;12m195[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:193:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m193[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m194[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self.as_ref()}.nodeValue = @{value};[0m
[0m[1m[38;5;12m195[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:203:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m203[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m204[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.ownerDocument;[0m
[0m[1m[38;5;12m205[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().ok()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:203:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m203[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m204[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.ownerDocument;[0m
[0m[1m[38;5;12m205[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().ok()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:214:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m214[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m215[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.parentElement;[0m
[0m[1m[38;5;12m216[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().ok()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:214:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m214[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m215[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.parentElement;[0m
[0m[1m[38;5;12m216[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().ok()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:224:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m224[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m225[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.previousSibling;[0m
[0m[1m[38;5;12m226[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().ok()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:224:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m224[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m225[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.previousSibling;[0m
[0m[1m[38;5;12m226[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().ok()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:234:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m234[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m235[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.textContent;[0m
[0m[1m[38;5;12m236[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:234:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m234[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m235[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.textContent;[0m
[0m[1m[38;5;12m236[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:246:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m246[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m247[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self.as_ref()}.textContent = @{text};[0m
[0m[1m[38;5;12m248[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:246:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m246[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m247[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self.as_ref()}.textContent = @{text};[0m
[0m[1m[38;5;12m248[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:257:13[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m257[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m            js!([0m
[0m[1m[38;5;12m258[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                return @{self.as_ref()}.childNodes;[0m
[0m[1m[38;5;12m259[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            ).into_reference_unchecked().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_____________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:257:13[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m257[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m            js!([0m
[0m[1m[38;5;12m258[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                return @{self.as_ref()}.childNodes;[0m
[0m[1m[38;5;12m259[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            ).into_reference_unchecked().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_____________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:268:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m268[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m269[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.baseURI;[0m
[0m[1m[38;5;12m270[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:268:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m268[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m269[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.baseURI;[0m
[0m[1m[38;5;12m270[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:278:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m278[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m279[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.hasChildNodes();[0m
[0m[1m[38;5;12m280[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:278:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m278[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m279[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.hasChildNodes();[0m
[0m[1m[38;5;12m280[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:278:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m278[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m279[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.hasChildNodes();[0m
[0m[1m[38;5;12m280[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:288:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m288[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m289[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.isDefaultNamespace( @{namespace} );[0m
[0m[1m[38;5;12m290[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:288:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m288[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m289[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.isDefaultNamespace( @{namespace} );[0m
[0m[1m[38;5;12m290[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:288:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m288[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m289[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.isDefaultNamespace( @{namespace} );[0m
[0m[1m[38;5;12m290[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:300:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m300[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m301[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.isEqualNode( @{node.as_ref()} );[0m
[0m[1m[38;5;12m302[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:300:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m300[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m301[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.isEqualNode( @{node.as_ref()} );[0m
[0m[1m[38;5;12m302[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:300:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m300[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m301[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.isEqualNode( @{node.as_ref()} );[0m
[0m[1m[38;5;12m302[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:310:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m310[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m311[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.isSameNode( @{node.as_ref()} );[0m
[0m[1m[38;5;12m312[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:310:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m310[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m311[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.isSameNode( @{node.as_ref()} );[0m
[0m[1m[38;5;12m312[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:310:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m310[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m311[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.isSameNode( @{node.as_ref()} );[0m
[0m[1m[38;5;12m312[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:320:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m320[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m321[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.lookupPrefix( @{namespace} );[0m
[0m[1m[38;5;12m322[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().ok()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:320:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m320[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m321[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.lookupPrefix( @{namespace} );[0m
[0m[1m[38;5;12m322[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().ok()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:320:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m320[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m321[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.lookupPrefix( @{namespace} );[0m
[0m[1m[38;5;12m322[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().ok()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:330:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m330[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m331[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.lookupNamespaceURI( @{prefix} );[0m
[0m[1m[38;5;12m332[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().ok()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:330:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m330[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m331[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.lookupNamespaceURI( @{prefix} );[0m
[0m[1m[38;5;12m332[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().ok()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:330:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m330[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m331[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.lookupNamespaceURI( @{prefix} );[0m
[0m[1m[38;5;12m332[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().ok()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:340:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m340[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m341[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self.as_ref()}.normalize();[0m
[0m[1m[38;5;12m342[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:325:41[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m325[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                          [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:340:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m340[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m341[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self.as_ref()}.normalize();[0m
[0m[1m[38;5;12m342[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:383:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m383[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try!([0m
[0m[1m[38;5;12m384[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            var span = document.createElement(""span"");[0m
[0m[1m[38;5;12m385[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            span.innerHTML = @{html};[0m
[0m[1m[38;5;12m386[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            if( span.childNodes.length != 1 ) {[0m
[0m[1m[38;5;12m...[0m[0m   [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m392[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return span.childNodes[0];[0m
[0m[1m[38;5;12m393[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:422:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m422[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:383:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m383[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try!([0m
[0m[1m[38;5;12m384[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            var span = document.createElement(""span"");[0m
[0m[1m[38;5;12m385[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            span.innerHTML = @{html};[0m
[0m[1m[38;5;12m386[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            if( span.childNodes.length != 1 ) {[0m
[0m[1m[38;5;12m...[0m[0m   [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m392[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return span.childNodes[0];[0m
[0m[1m[38;5;12m393[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:383:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m383[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try!([0m
[0m[1m[38;5;12m384[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            var span = document.createElement(""span"");[0m
[0m[1m[38;5;12m385[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            span.innerHTML = @{html};[0m
[0m[1m[38;5;12m386[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            if( span.childNodes.length != 1 ) {[0m
[0m[1m[38;5;12m...[0m[0m   [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m392[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return span.childNodes[0];[0m
[0m[1m[38;5;12m393[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:383:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m383[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try!([0m
[0m[1m[38;5;12m384[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            var span = document.createElement(""span"");[0m
[0m[1m[38;5;12m385[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            span.innerHTML = @{html};[0m
[0m[1m[38;5;12m386[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            if( span.childNodes.length != 1 ) {[0m
[0m[1m[38;5;12m...[0m[0m   [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m392[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return span.childNodes[0];[0m
[0m[1m[38;5;12m393[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:430:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m430[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node.rs:383:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m383[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try!([0m
[0m[1m[38;5;12m384[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            var span = document.createElement(""span"");[0m
[0m[1m[38;5;12m385[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            span.innerHTML = @{html};[0m
[0m[1m[38;5;12m386[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            if( span.childNodes.length != 1 ) {[0m
[0m[1m[38;5;12m...[0m[0m   [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m392[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return span.childNodes[0];[0m
[0m[1m[38;5;12m393[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/element.rs:25:13[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m25[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m            js!( return @{self.as_ref()}.classList; ).into_reference_unchecked().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m            [0m[0m[1m[38;5;12m-----------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/element.rs:25:13[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m25[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m            js!( return @{self.as_ref()}.classList; ).into_reference_unchecked().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m            [0m[0m[1m[38;5;12m-----------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/element.rs:35:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m35[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m36[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.hasAttribute( @{name} );[0m
[0m[1m[38;5;12m37[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/element.rs:35:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m35[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m36[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.hasAttribute( @{name} );[0m
[0m[1m[38;5;12m37[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/element.rs:35:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m35[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m36[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.hasAttribute( @{name} );[0m
[0m[1m[38;5;12m37[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/element.rs:47:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m47[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m48[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.getAttribute( @{name} );[0m
[0m[1m[38;5;12m49[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/element.rs:47:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m47[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m48[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.getAttribute( @{name} );[0m
[0m[1m[38;5;12m49[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/element.rs:47:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m47[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m48[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.getAttribute( @{name} );[0m
[0m[1m[38;5;12m49[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/element.rs:59:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m59[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try!([0m
[0m[1m[38;5;12m60[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.setAttribute( @{name}, @{value} );[0m
[0m[1m[38;5;12m61[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:422:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m422[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/element.rs:59:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m59[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try!([0m
[0m[1m[38;5;12m60[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.setAttribute( @{name}, @{value} );[0m
[0m[1m[38;5;12m61[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/element.rs:59:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m59[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try!([0m
[0m[1m[38;5;12m60[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.setAttribute( @{name}, @{value} );[0m
[0m[1m[38;5;12m61[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/element.rs:59:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m59[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try!([0m
[0m[1m[38;5;12m60[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.setAttribute( @{name}, @{value} );[0m
[0m[1m[38;5;12m61[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/element.rs:69:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m69[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m70[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.scrollTop;[0m
[0m[1m[38;5;12m71[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/element.rs:69:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m69[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m70[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.scrollTop;[0m
[0m[1m[38;5;12m71[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/element.rs:79:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m79[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m80[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self.as_ref()}.scrollTop = @{value};[0m
[0m[1m[38;5;12m81[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/element.rs:79:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m79[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m80[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self.as_ref()}.scrollTop = @{value};[0m
[0m[1m[38;5;12m81[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/element.rs:89:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m89[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m90[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.scrollLeft;[0m
[0m[1m[38;5;12m91[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/element.rs:89:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m89[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m90[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.scrollLeft;[0m
[0m[1m[38;5;12m91[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/element.rs:99:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m99[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m100[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self.as_ref()}.scrollLeft = @{value};[0m
[0m[1m[38;5;12m101[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/element.rs:99:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m99[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m100[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self.as_ref()}.scrollLeft = @{value};[0m
[0m[1m[38;5;12m101[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/element.rs:110:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m110[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m111[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.getAttributeNames();[0m
[0m[1m[38;5;12m112[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/element.rs:110:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m110[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m111[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.getAttributeNames();[0m
[0m[1m[38;5;12m112[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/element.rs:110:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m110[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m111[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.getAttributeNames();[0m
[0m[1m[38;5;12m112[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/element.rs:120:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m120[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m121[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self.as_ref()}.removeAttribute( @{name} );[0m
[0m[1m[38;5;12m122[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/element.rs:120:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m120[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m121[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self.as_ref()}.removeAttribute( @{name} );[0m
[0m[1m[38;5;12m122[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/element.rs:131:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m131[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m132[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.hasAttributes();[0m
[0m[1m[38;5;12m133[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/element.rs:131:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m131[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m132[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.hasAttributes();[0m
[0m[1m[38;5;12m133[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/element.rs:131:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m131[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m132[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.hasAttributes();[0m
[0m[1m[38;5;12m133[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/element.rs:142:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m142[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try!([0m
[0m[1m[38;5;12m143[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.setPointerCapture( @{pointer_id} );[0m
[0m[1m[38;5;12m144[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:422:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m422[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/element.rs:142:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m142[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try!([0m
[0m[1m[38;5;12m143[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.setPointerCapture( @{pointer_id} );[0m
[0m[1m[38;5;12m144[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/element.rs:142:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m142[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try!([0m
[0m[1m[38;5;12m143[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.setPointerCapture( @{pointer_id} );[0m
[0m[1m[38;5;12m144[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/element.rs:142:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m142[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try!([0m
[0m[1m[38;5;12m143[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.setPointerCapture( @{pointer_id} );[0m
[0m[1m[38;5;12m144[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/element.rs:153:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m153[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try!([0m
[0m[1m[38;5;12m154[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.releasePointerCapture( @{pointer_id} );[0m
[0m[1m[38;5;12m155[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:422:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m422[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/element.rs:153:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m153[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try!([0m
[0m[1m[38;5;12m154[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.releasePointerCapture( @{pointer_id} );[0m
[0m[1m[38;5;12m155[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/element.rs:153:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m153[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try!([0m
[0m[1m[38;5;12m154[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.releasePointerCapture( @{pointer_id} );[0m
[0m[1m[38;5;12m155[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/element.rs:153:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m153[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try!([0m
[0m[1m[38;5;12m154[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.releasePointerCapture( @{pointer_id} );[0m
[0m[1m[38;5;12m155[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/element.rs:164:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m164[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        js!( return @{self.as_ref()}.hasPointerCapture( @{pointer_id} ); ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m------------------------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/element.rs:164:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m164[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        js!( return @{self.as_ref()}.hasPointerCapture( @{pointer_id} ); ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m------------------------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/element.rs:164:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m164[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        js!( return @{self.as_ref()}.hasPointerCapture( @{pointer_id} ); ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m------------------------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_element.rs:21:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m21[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m22[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.x;[0m
[0m[1m[38;5;12m23[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_element.rs:21:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m21[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m22[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.x;[0m
[0m[1m[38;5;12m23[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_element.rs:30:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m30[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m31[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.y;[0m
[0m[1m[38;5;12m32[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_element.rs:30:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m30[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m31[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.y;[0m
[0m[1m[38;5;12m32[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_element.rs:39:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m39[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m40[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.width;[0m
[0m[1m[38;5;12m41[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_element.rs:39:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m39[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m40[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.width;[0m
[0m[1m[38;5;12m41[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_element.rs:48:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m48[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m49[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.height;[0m
[0m[1m[38;5;12m50[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_element.rs:48:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m48[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m49[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.height;[0m
[0m[1m[38;5;12m50[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_element.rs:57:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m57[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m58[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.top;[0m
[0m[1m[38;5;12m59[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_element.rs:57:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m57[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m58[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.top;[0m
[0m[1m[38;5;12m59[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_element.rs:66:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m66[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m67[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.right;[0m
[0m[1m[38;5;12m68[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_element.rs:66:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m66[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m67[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.right;[0m
[0m[1m[38;5;12m68[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_element.rs:75:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m75[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m76[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.bottom;[0m
[0m[1m[38;5;12m77[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_element.rs:75:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m75[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m76[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.bottom;[0m
[0m[1m[38;5;12m77[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_element.rs:84:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m84[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m85[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.left;[0m
[0m[1m[38;5;12m86[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_element.rs:84:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m84[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m85[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.left;[0m
[0m[1m[38;5;12m86[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_element.rs:100:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m100[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m101[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self.as_ref()}.focus();[0m
[0m[1m[38;5;12m102[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:325:41[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m325[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                          [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_element.rs:100:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m100[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m101[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self.as_ref()}.focus();[0m
[0m[1m[38;5;12m102[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_element.rs:110:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m110[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m111[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self.as_ref()}.blur();[0m
[0m[1m[38;5;12m112[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:325:41[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m325[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                          [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_element.rs:110:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m110[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m111[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self.as_ref()}.blur();[0m
[0m[1m[38;5;12m112[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_element.rs:122:13[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m122[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m            js!([0m
[0m[1m[38;5;12m123[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                return @{self.as_ref()}.dataset;[0m
[0m[1m[38;5;12m124[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            ).into_reference_unchecked().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_____________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_element.rs:122:13[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m122[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m            js!([0m
[0m[1m[38;5;12m123[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                return @{self.as_ref()}.dataset;[0m
[0m[1m[38;5;12m124[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            ).into_reference_unchecked().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_____________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_element.rs:132:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m132[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m133[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.getBoundingClientRect();[0m
[0m[1m[38;5;12m134[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_element.rs:132:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m132[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m133[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.getBoundingClientRect();[0m
[0m[1m[38;5;12m134[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_element.rs:132:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m132[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m133[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.getBoundingClientRect();[0m
[0m[1m[38;5;12m134[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_element.rs:142:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m142[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m143[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.offsetWidth;[0m
[0m[1m[38;5;12m144[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_element.rs:142:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m142[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m143[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.offsetWidth;[0m
[0m[1m[38;5;12m144[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_element.rs:151:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m151[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m152[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.offsetHeight;[0m
[0m[1m[38;5;12m153[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_element.rs:151:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m151[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m152[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.offsetHeight;[0m
[0m[1m[38;5;12m153[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_element.rs:166:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m166[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m167[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.innerText;[0m
[0m[1m[38;5;12m168[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_element.rs:166:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m166[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m167[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.innerText;[0m
[0m[1m[38;5;12m168[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/canvas.rs:35:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m35[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m36[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.height;[0m
[0m[1m[38;5;12m37[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/canvas.rs:35:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m35[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m36[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.height;[0m
[0m[1m[38;5;12m37[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/canvas.rs:47:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m47[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m48[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.height = @{value};[0m
[0m[1m[38;5;12m49[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/canvas.rs:47:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m47[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m48[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.height = @{value};[0m
[0m[1m[38;5;12m49[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/canvas.rs:59:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m59[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m60[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.width;[0m
[0m[1m[38;5;12m61[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/canvas.rs:59:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m59[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m60[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.width;[0m
[0m[1m[38;5;12m61[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/canvas.rs:71:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m71[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m72[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.width = @{value};[0m
[0m[1m[38;5;12m73[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/canvas.rs:71:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m71[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m72[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.width = @{value};[0m
[0m[1m[38;5;12m73[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/canvas.rs:90:13[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m90[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        Ok( js! ([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_____________-[0m
[0m[1m[38;5;12m91[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.toDataURL(@{mime_type}, @{quality});[0m
[0m[1m[38;5;12m92[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap() )[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/canvas.rs:90:13[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m90[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        Ok( js! ([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_____________-[0m
[0m[1m[38;5;12m91[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.toDataURL(@{mime_type}, @{quality});[0m
[0m[1m[38;5;12m92[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap() )[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/canvas.rs:90:13[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m90[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        Ok( js! ([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_____________-[0m
[0m[1m[38;5;12m91[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.toDataURL(@{mime_type}, @{quality});[0m
[0m[1m[38;5;12m92[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap() )[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/canvas.rs:101:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m101[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m102[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.toBlob(@{Once(f)}, @{mime_type}, @{quality});[0m
[0m[1m[38;5;12m103[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:334:71[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m334[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name, $a3_name, $a4_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                        [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/canvas.rs:101:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m101[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m102[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.toBlob(@{Once(f)}, @{mime_type}, @{quality});[0m
[0m[1m[38;5;12m103[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/image.rs:30:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m30[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m31[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return new Image();[0m
[0m[1m[38;5;12m32[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/image.rs:30:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m30[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m31[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return new Image();[0m
[0m[1m[38;5;12m32[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/image.rs:40:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m40[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m41[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return new Image(@{width}, @{height});[0m
[0m[1m[38;5;12m42[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/image.rs:40:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m40[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m41[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return new Image(@{width}, @{height});[0m
[0m[1m[38;5;12m42[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/image.rs:40:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m40[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m41[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return new Image(@{width}, @{height});[0m
[0m[1m[38;5;12m42[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/image.rs:51:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m51[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m52[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.alt;[0m
[0m[1m[38;5;12m53[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/image.rs:51:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m51[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m52[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.alt;[0m
[0m[1m[38;5;12m53[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/image.rs:61:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m61[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m62[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.alt = @{value};[0m
[0m[1m[38;5;12m63[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/image.rs:61:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m61[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m62[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.alt = @{value};[0m
[0m[1m[38;5;12m63[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/image.rs:72:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m72[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m73[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.complete;[0m
[0m[1m[38;5;12m74[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/image.rs:72:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m72[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m73[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.complete;[0m
[0m[1m[38;5;12m74[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/image.rs:82:15[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m82[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        match js!([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_______________-[0m
[0m[1m[38;5;12m83[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.crossOrigin;[0m
[0m[1m[38;5;12m84[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ) {[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/image.rs:82:15[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m82[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        match js!([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_______________-[0m
[0m[1m[38;5;12m83[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.crossOrigin;[0m
[0m[1m[38;5;12m84[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ) {[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/image.rs:97:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m97[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m98[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.crossOrigin = @{[0m
[0m[1m[38;5;12m99[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                match value {[0m
[0m[1m[38;5;12m100[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                    CrossOriginSetting::None => None,[0m
[0m[1m[38;5;12m...[0m[0m   [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m104[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            }[0m
[0m[1m[38;5;12m105[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/image.rs:97:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m97[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m98[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.crossOrigin = @{[0m
[0m[1m[38;5;12m99[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                match value {[0m
[0m[1m[38;5;12m100[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                    CrossOriginSetting::None => None,[0m
[0m[1m[38;5;12m...[0m[0m   [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m104[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            }[0m
[0m[1m[38;5;12m105[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/image.rs:113:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m113[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m114[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.height;[0m
[0m[1m[38;5;12m115[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/image.rs:113:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m113[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m114[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.height;[0m
[0m[1m[38;5;12m115[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/image.rs:123:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m123[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m124[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.height = @{value};[0m
[0m[1m[38;5;12m125[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/image.rs:123:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m123[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m124[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.height = @{value};[0m
[0m[1m[38;5;12m125[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/image.rs:133:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m133[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m134[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.isMap;[0m
[0m[1m[38;5;12m135[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/image.rs:133:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m133[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m134[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.isMap;[0m
[0m[1m[38;5;12m135[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/image.rs:143:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m143[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m144[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.isMap = @{value};[0m
[0m[1m[38;5;12m145[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/image.rs:143:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m143[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m144[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.isMap = @{value};[0m
[0m[1m[38;5;12m145[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/image.rs:153:15[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m153[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        match js!([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_______________-[0m
[0m[1m[38;5;12m154[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.naturalHeight;[0m
[0m[1m[38;5;12m155[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap() {[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/image.rs:153:15[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m153[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        match js!([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_______________-[0m
[0m[1m[38;5;12m154[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.naturalHeight;[0m
[0m[1m[38;5;12m155[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap() {[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/image.rs:166:15[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m166[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        match js!([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_______________-[0m
[0m[1m[38;5;12m167[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.naturalWidth;[0m
[0m[1m[38;5;12m168[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap() {[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/image.rs:166:15[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m166[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        match js!([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_______________-[0m
[0m[1m[38;5;12m167[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.naturalWidth;[0m
[0m[1m[38;5;12m168[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap() {[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/image.rs:179:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m179[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m180[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.src;[0m
[0m[1m[38;5;12m181[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/image.rs:179:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m179[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m180[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.src;[0m
[0m[1m[38;5;12m181[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/image.rs:189:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m189[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m190[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.src = @{value};[0m
[0m[1m[38;5;12m191[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/image.rs:189:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m189[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m190[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.src = @{value};[0m
[0m[1m[38;5;12m191[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/image.rs:199:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m199[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m200[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.useMap;[0m
[0m[1m[38;5;12m201[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/image.rs:199:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m199[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m200[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.useMap;[0m
[0m[1m[38;5;12m201[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/image.rs:209:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m209[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m210[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m             @{self}.useMap = @{value};[0m
[0m[1m[38;5;12m211[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/image.rs:209:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m209[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m210[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m             @{self}.useMap = @{value};[0m
[0m[1m[38;5;12m211[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/image.rs:219:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m219[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m220[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.width;[0m
[0m[1m[38;5;12m221[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/image.rs:219:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m219[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m220[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.width;[0m
[0m[1m[38;5;12m221[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/image.rs:229:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m229[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m230[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.width = @{value};[0m
[0m[1m[38;5;12m231[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/image.rs:229:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m229[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m230[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.width = @{value};[0m
[0m[1m[38;5;12m231[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/input.rs:28:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m28[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m29[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.value;[0m
[0m[1m[38;5;12m30[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/input.rs:28:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m28[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m29[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.value;[0m
[0m[1m[38;5;12m30[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/input.rs:37:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m37[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m38[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.value = @{value};[0m
[0m[1m[38;5;12m39[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/input.rs:37:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m37[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m38[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.value = @{value};[0m
[0m[1m[38;5;12m39[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/textarea.rs:27:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m27[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m28[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.value;[0m
[0m[1m[38;5;12m29[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/textarea.rs:27:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m27[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m28[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.value;[0m
[0m[1m[38;5;12m29[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/textarea.rs:36:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m36[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m37[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.value = @{value};[0m
[0m[1m[38;5;12m38[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/textarea.rs:36:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m36[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m37[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.value = @{value};[0m
[0m[1m[38;5;12m38[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/select.rs:47:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m47[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m48[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.value[0m
[0m[1m[38;5;12m49[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/select.rs:47:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m47[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m48[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.value[0m
[0m[1m[38;5;12m49[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/select.rs:55:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m55[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!{[0m
[0m[1m[38;5;12m56[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @(no_return)[0m
[0m[1m[38;5;12m57[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.value = @{value};[0m
[0m[1m[38;5;12m58[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/select.rs:55:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m55[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!{[0m
[0m[1m[38;5;12m56[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @(no_return)[0m
[0m[1m[38;5;12m57[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.value = @{value};[0m
[0m[1m[38;5;12m58[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/select.rs:64:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m64[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m65[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            var self = @{self};[0m
[0m[1m[38;5;12m66[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            if (self.selectedIndex < 0) {[0m
[0m[1m[38;5;12m67[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                return null;[0m
[0m[1m[38;5;12m...[0m[0m   [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m70[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            }[0m
[0m[1m[38;5;12m71[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/select.rs:64:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m64[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m65[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            var self = @{self};[0m
[0m[1m[38;5;12m66[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            if (self.selectedIndex < 0) {[0m
[0m[1m[38;5;12m67[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                return null;[0m
[0m[1m[38;5;12m...[0m[0m   [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m70[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            }[0m
[0m[1m[38;5;12m71[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/select.rs:64:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m64[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m65[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            var self = @{self};[0m
[0m[1m[38;5;12m66[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            if (self.selectedIndex < 0) {[0m
[0m[1m[38;5;12m67[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                return null;[0m
[0m[1m[38;5;12m...[0m[0m   [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m70[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            }[0m
[0m[1m[38;5;12m71[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:422:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m422[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/select.rs:64:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m64[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m65[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            var self = @{self};[0m
[0m[1m[38;5;12m66[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            if (self.selectedIndex < 0) {[0m
[0m[1m[38;5;12m67[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                return null;[0m
[0m[1m[38;5;12m...[0m[0m   [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m70[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            }[0m
[0m[1m[38;5;12m71[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/select.rs:78:25[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m78[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m            Some(si) => js!{[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_________________________-[0m
[0m[1m[38;5;12m79[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                @(no_return)[0m
[0m[1m[38;5;12m80[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                @{self}.selectedIndex = @{si};[0m
[0m[1m[38;5;12m81[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            },[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_____________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/select.rs:78:25[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m78[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m            Some(si) => js!{[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_________________________-[0m
[0m[1m[38;5;12m79[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                @(no_return)[0m
[0m[1m[38;5;12m80[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                @{self}.selectedIndex = @{si};[0m
[0m[1m[38;5;12m81[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            },[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_____________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/select.rs:78:25[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m78[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m            Some(si) => js!{[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_________________________-[0m
[0m[1m[38;5;12m79[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                @(no_return)[0m
[0m[1m[38;5;12m80[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                @{self}.selectedIndex = @{si};[0m
[0m[1m[38;5;12m81[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            },[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_____________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/select.rs:78:25[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m78[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m            Some(si) => js!{[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_________________________-[0m
[0m[1m[38;5;12m79[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                @(no_return)[0m
[0m[1m[38;5;12m80[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                @{self}.selectedIndex = @{si};[0m
[0m[1m[38;5;12m81[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            },[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_____________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/select.rs:82:21[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m82[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m            None => js!{[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_____________________-[0m
[0m[1m[38;5;12m83[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                @(no_return)[0m
[0m[1m[38;5;12m84[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                @{self}.selectedIndex = -1;[0m
[0m[1m[38;5;12m85[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_____________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/select.rs:82:21[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m82[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m            None => js!{[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_____________________-[0m
[0m[1m[38;5;12m83[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                @(no_return)[0m
[0m[1m[38;5;12m84[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                @{self}.selectedIndex = -1;[0m
[0m[1m[38;5;12m85[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_____________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/select.rs:82:21[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m82[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m            None => js!{[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_____________________-[0m
[0m[1m[38;5;12m83[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                @(no_return)[0m
[0m[1m[38;5;12m84[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                @{self}.selectedIndex = -1;[0m
[0m[1m[38;5;12m85[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_____________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:325:41[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m325[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                          [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/select.rs:82:21[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m82[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m            None => js!{[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_____________________-[0m
[0m[1m[38;5;12m83[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                @(no_return)[0m
[0m[1m[38;5;12m84[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                @{self}.selectedIndex = -1;[0m
[0m[1m[38;5;12m85[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_____________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/select.rs:121:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m121[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m122[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.multiple;[0m
[0m[1m[38;5;12m123[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/select.rs:121:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m121[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m122[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.multiple;[0m
[0m[1m[38;5;12m123[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/select.rs:130:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m130[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m131[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.selectedOptions;[0m
[0m[1m[38;5;12m132[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/select.rs:130:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m130[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m131[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.selectedOptions;[0m
[0m[1m[38;5;12m132[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/option.rs:29:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m29[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m30[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.index;[0m
[0m[1m[38;5;12m31[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/option.rs:29:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m29[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m30[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.index;[0m
[0m[1m[38;5;12m31[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/option.rs:38:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m38[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m39[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.value;[0m
[0m[1m[38;5;12m40[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_elements/option.rs:38:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m38[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m39[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.value;[0m
[0m[1m[38;5;12m40[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/token_list.rs:19:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m19[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js!( return @{self}.length; ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m-----------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/token_list.rs:19:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m19[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js!( return @{self}.length; ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m-----------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/token_list.rs:27:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m27[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m28[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.add( @{token} );[0m
[0m[1m[38;5;12m29[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/token_list.rs:27:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m27[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m28[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.add( @{token} );[0m
[0m[1m[38;5;12m29[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/token_list.rs:39:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m39[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m40[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.remove( @{token} );[0m
[0m[1m[38;5;12m41[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/token_list.rs:39:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m39[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m40[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.remove( @{token} );[0m
[0m[1m[38;5;12m41[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/token_list.rs:51:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m51[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js!( return @{self}.contains( @{token} ); ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m-------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/token_list.rs:51:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m51[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js!( return @{self}.contains( @{token} ); ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m-------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/token_list.rs:51:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m51[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js!( return @{self}.contains( @{token} ); ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m-------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node_list.rs:30:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m30[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js!( return @{self}.length; ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m-----------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node_list.rs:30:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m30[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js!( return @{self}.length; ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m-----------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node_list.rs:38:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m38[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m39[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}[ @{index} ];[0m
[0m[1m[38;5;12m40[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node_list.rs:38:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m38[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m39[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}[ @{index} ];[0m
[0m[1m[38;5;12m40[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:430:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m430[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node_list.rs:38:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m38[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m39[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}[ @{index} ];[0m
[0m[1m[38;5;12m40[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node_list.rs:87:21[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m87[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        let value = js!([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_____________________-[0m
[0m[1m[38;5;12m88[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.list}[ @{self.index} ];[0m
[0m[1m[38;5;12m89[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node_list.rs:87:21[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m87[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        let value = js!([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_____________________-[0m
[0m[1m[38;5;12m88[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.list}[ @{self.index} ];[0m
[0m[1m[38;5;12m89[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:430:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m430[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/node_list.rs:87:21[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m87[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        let value = js!([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_____________________-[0m
[0m[1m[38;5;12m88[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.list}[ @{self.index} ];[0m
[0m[1m[38;5;12m89[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/string_map.rs:18:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m18[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js!( return @{self}[ @{key} ]; ).try_into().ok()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m--------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/string_map.rs:18:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m18[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js!( return @{self}[ @{key} ]; ).try_into().ok()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m--------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:430:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m430[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/string_map.rs:18:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m18[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js!( return @{self}[ @{key} ]; ).try_into().ok()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m--------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/string_map.rs:24:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m24[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!( @(no_return)[0m
[0m[1m[38;5;12m25[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}[ @{key} ] = @{value};[0m
[0m[1m[38;5;12m26[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:331:61[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m331[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name, $a3_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/string_map.rs:24:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m24[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!( @(no_return)[0m
[0m[1m[38;5;12m25[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}[ @{key} ] = @{value};[0m
[0m[1m[38;5;12m26[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/string_map.rs:34:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m34[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!( @(no_return)[0m
[0m[1m[38;5;12m35[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            delete @{self}[ @{key} ];[0m
[0m[1m[38;5;12m36[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/string_map.rs:34:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m34[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!( @(no_return)[0m
[0m[1m[38;5;12m35[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            delete @{self}[ @{key} ];[0m
[0m[1m[38;5;12m36[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/string_map.rs:41:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m41[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js!( return @{key} in @{self}; ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m--------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/string_map.rs:41:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m41[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js!( return @{key} in @{self}; ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m--------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/location.rs:26:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m26[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js_try!( return @{self}.href; ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m-------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:422:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m422[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/location.rs:26:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m26[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js_try!( return @{self}.href; ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m-------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/location.rs:26:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m26[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js_try!( return @{self}.href; ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m-------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/location.rs:26:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m26[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js_try!( return @{self}.href; ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m-------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/location.rs:42:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m42[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js_try!( return @{self}.origin; ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m---------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:422:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m422[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/location.rs:42:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m42[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js_try!( return @{self}.origin; ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m---------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/location.rs:42:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m42[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js_try!( return @{self}.origin; ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m---------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/location.rs:42:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m42[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js_try!( return @{self}.origin; ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m---------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/location.rs:52:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m52[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js_try!( return @{self}.protocol; ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m-----------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:422:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m422[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/location.rs:52:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m52[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js_try!( return @{self}.protocol; ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m-----------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/location.rs:52:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m52[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js_try!( return @{self}.protocol; ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m-----------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/location.rs:52:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m52[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js_try!( return @{self}.protocol; ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m-----------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/location.rs:63:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m63[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js_try!( return @{self}.host; ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m-------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:422:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m422[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/location.rs:63:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m63[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js_try!( return @{self}.host; ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m-------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/location.rs:63:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m63[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js_try!( return @{self}.host; ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m-------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/location.rs:63:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m63[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js_try!( return @{self}.host; ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m-------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/location.rs:73:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m73[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js_try!( return @{self}.hostname; ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m-----------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:422:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m422[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/location.rs:73:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m73[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js_try!( return @{self}.hostname; ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m-----------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/location.rs:73:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m73[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js_try!( return @{self}.hostname; ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m-----------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/location.rs:73:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m73[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js_try!( return @{self}.hostname; ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m-----------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/location.rs:81:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m81[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js_try!( return @{self}.port; ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m-------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:422:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m422[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/location.rs:81:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m81[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js_try!( return @{self}.port; ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m-------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/location.rs:81:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m81[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js_try!( return @{self}.port; ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m-------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/location.rs:81:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m81[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js_try!( return @{self}.port; ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m-------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/location.rs:89:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m89[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js_try!( return @{self}.pathname; ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m-----------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:422:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m422[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/location.rs:89:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m89[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js_try!( return @{self}.pathname; ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m-----------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/location.rs:89:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m89[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js_try!( return @{self}.pathname; ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m-----------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/location.rs:89:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m89[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js_try!( return @{self}.pathname; ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m-----------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/location.rs:100:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m100[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        js_try!( return @{self}.search; ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m---------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:422:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m422[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/location.rs:100:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m100[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        js_try!( return @{self}.search; ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m---------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/location.rs:100:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m100[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        js_try!( return @{self}.search; ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m---------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/location.rs:100:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m100[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        js_try!( return @{self}.search; ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m---------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/location.rs:109:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m109[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        js_try!( return @{self}.hash; ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m-------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:422:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m422[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/location.rs:109:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m109[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        js_try!( return @{self}.hash; ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m-------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/location.rs:109:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m109[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        js_try!( return @{self}.hash; ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m-------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/location.rs:109:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m109[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        js_try!( return @{self}.hash; ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m-------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/storage.rs:20:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m20[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js!( return @{self}.length; ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m-----------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/storage.rs:20:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m20[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js!( return @{self}.length; ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m-----------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/storage.rs:28:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m28[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js!( return @{self}.getItem( @{key} ); ).try_into().ok()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m----------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/storage.rs:28:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m28[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js!( return @{self}.getItem( @{key} ); ).try_into().ok()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m----------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/storage.rs:28:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m28[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js!( return @{self}.getItem( @{key} ); ).try_into().ok()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m----------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/storage.rs:36:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m36[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!( @(no_return)[0m
[0m[1m[38;5;12m37[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.setItem( @{key}, @{value} );[0m
[0m[1m[38;5;12m38[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:331:61[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m331[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name, $a3_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/storage.rs:36:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m36[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!( @(no_return)[0m
[0m[1m[38;5;12m37[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.setItem( @{key}, @{value} );[0m
[0m[1m[38;5;12m38[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/storage.rs:48:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m48[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!( @(no_return)[0m
[0m[1m[38;5;12m49[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.removeItem( @{key} );[0m
[0m[1m[38;5;12m50[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/storage.rs:48:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m48[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!( @(no_return)[0m
[0m[1m[38;5;12m49[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.removeItem( @{key} );[0m
[0m[1m[38;5;12m50[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/storage.rs:58:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m58[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!( @(no_return)[0m
[0m[1m[38;5;12m59[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.clear();[0m
[0m[1m[38;5;12m60[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:325:41[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m325[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                          [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/storage.rs:58:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m58[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!( @(no_return)[0m
[0m[1m[38;5;12m59[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.clear();[0m
[0m[1m[38;5;12m60[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/storage.rs:68:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m68[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js!( return @{self}.key( @{nth} ); ).try_into().ok()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/storage.rs:68:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m68[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js!( return @{self}.key( @{nth} ); ).try_into().ok()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/storage.rs:68:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m68[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js!( return @{self}.key( @{nth} ); ).try_into().ok()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/storage.rs:73:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m73[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js!( return !!@{self}.getItem( @{key} ); ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/storage.rs:73:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m73[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js!( return !!@{self}.getItem( @{key} ); ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/storage.rs:73:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m73[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js!( return !!@{self}.getItem( @{key} ); ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/blob.rs:17:27[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m17[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        let length: u64 = js!( return @{reference}.size; ).try_into().unwrap();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                          [0m[0m[1m[38;5;12m--------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/blob.rs:17:27[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m17[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        let length: u64 = js!( return @{reference}.size; ).try_into().unwrap();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                          [0m[0m[1m[38;5;12m--------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/blob.rs:27:28[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m27[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        let mime: String = js!( return @{reference}.type; ).try_into().unwrap();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[38;5;12m--------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/blob.rs:27:28[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m27[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        let mime: String = js!( return @{reference}.type; ).try_into().unwrap();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[38;5;12m--------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/file.rs:23:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m23[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js!( return @{self}.name; ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m---------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/file.rs:23:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m23[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js!( return @{self}.name; ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m---------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/file_list.rs:22:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m22[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js!( return @{self}.length; ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m-----------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/file_list.rs:22:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m22[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js!( return @{self}.length; ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m-----------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/file_list.rs:69:21[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m69[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        let value = js!([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_____________________-[0m
[0m[1m[38;5;12m70[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.list}[ @{self.index} ];[0m
[0m[1m[38;5;12m71[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/file_list.rs:69:21[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m69[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        let value = js!([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_____________________-[0m
[0m[1m[38;5;12m70[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.list}[ @{self.index} ];[0m
[0m[1m[38;5;12m71[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:430:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m430[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/file_list.rs:69:21[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m69[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        let value = js!([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_____________________-[0m
[0m[1m[38;5;12m70[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.list}[ @{self.index} ];[0m
[0m[1m[38;5;12m71[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/file_reader.rs:50:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m50[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js!( return new FileReader(); ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m-------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/file_reader.rs:50:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m50[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js!( return new FileReader(); ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m-------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/file_reader.rs:86:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m86[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        let state: i32 = js!( return @{self}.readyState; ).try_into().unwrap();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                         [0m[0m[1m[38;5;12m---------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/file_reader.rs:86:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m86[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        let state: i32 = js!( return @{self}.readyState; ).try_into().unwrap();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                         [0m[0m[1m[38;5;12m---------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/file_reader.rs:102:22[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m102[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        let result = js!( return @{self}.result; );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                     [0m[0m[1m[38;5;12m-----------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/file_reader.rs:102:22[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m102[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        let result = js!( return @{self}.result; );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                     [0m[0m[1m[38;5;12m-----------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/array_buffer.rs:22:13[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m22[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        Ok( js!( return new ArrayBuffer( @{length} ); ).try_into().unwrap() )[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m            [0m[0m[1m[38;5;12m-------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/array_buffer.rs:22:13[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m22[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        Ok( js!( return new ArrayBuffer( @{length} ); ).try_into().unwrap() )[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m            [0m[0m[1m[38;5;12m-------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/array_buffer.rs:22:13[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m22[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        Ok( js!( return new ArrayBuffer( @{length} ); ).try_into().unwrap() )[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m            [0m[0m[1m[38;5;12m-------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/array_buffer.rs:29:22[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m29[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        let length = js!( return @{reference}.byteLength; ).try_into().unwrap();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                     [0m[0m[1m[38;5;12m--------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/array_buffer.rs:29:22[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m29[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        let length = js!( return @{reference}.byteLength; ).try_into().unwrap();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                     [0m[0m[1m[38;5;12m--------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/typed_array.rs:89:1[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m89[0m[0m  [0m[0m[1m[38;5;12m| [0m[0marraykind!( i8, Int8Array, HEAP8 );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m----------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                  [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/typed_array.rs:89:1[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m89[0m[0m  [0m[0m[1m[38;5;12m| [0m[0marraykind!( i8, Int8Array, HEAP8 );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m----------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/typed_array.rs:90:1[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m90[0m[0m  [0m[0m[1m[38;5;12m| [0m[0marraykind!( u8, Uint8Array, HEAPU8 );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                  [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/typed_array.rs:90:1[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m90[0m[0m  [0m[0m[1m[38;5;12m| [0m[0marraykind!( u8, Uint8Array, HEAPU8 );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/typed_array.rs:91:1[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m91[0m[0m  [0m[0m[1m[38;5;12m| [0m[0marraykind!( i16, Int16Array, HEAP16 );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m-------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                  [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/typed_array.rs:91:1[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m91[0m[0m  [0m[0m[1m[38;5;12m| [0m[0marraykind!( i16, Int16Array, HEAP16 );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m-------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/typed_array.rs:92:1[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m92[0m[0m  [0m[0m[1m[38;5;12m| [0m[0marraykind!( u16, Uint16Array, HEAPU16 );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m---------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                  [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/typed_array.rs:92:1[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m92[0m[0m  [0m[0m[1m[38;5;12m| [0m[0marraykind!( u16, Uint16Array, HEAPU16 );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m---------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/typed_array.rs:93:1[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m93[0m[0m  [0m[0m[1m[38;5;12m| [0m[0marraykind!( i32, Int32Array, HEAP32 );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m-------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                  [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/typed_array.rs:93:1[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m93[0m[0m  [0m[0m[1m[38;5;12m| [0m[0marraykind!( i32, Int32Array, HEAP32 );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m-------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/typed_array.rs:94:1[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m94[0m[0m  [0m[0m[1m[38;5;12m| [0m[0marraykind!( u32, Uint32Array, HEAPU32 );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m---------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                  [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/typed_array.rs:94:1[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m94[0m[0m  [0m[0m[1m[38;5;12m| [0m[0marraykind!( u32, Uint32Array, HEAPU32 );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m---------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/typed_array.rs:95:1[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m95[0m[0m  [0m[0m[1m[38;5;12m| [0m[0marraykind!( f32, Float32Array, HEAPF32 );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m----------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                  [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/typed_array.rs:95:1[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m95[0m[0m  [0m[0m[1m[38;5;12m| [0m[0marraykind!( f32, Float32Array, HEAPF32 );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m----------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/typed_array.rs:96:1[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m96[0m[0m  [0m[0m[1m[38;5;12m| [0m[0marraykind!( f64, Float64Array, HEAPF64 );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m----------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                  [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/typed_array.rs:96:1[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m96[0m[0m  [0m[0m[1m[38;5;12m| [0m[0marraykind!( f64, Float64Array, HEAPF64 );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m----------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/typed_array.rs:118:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m118[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        js!( return @{self}.buffer; ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m-----------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/typed_array.rs:118:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m118[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        js!( return @{self}.buffer; ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m-----------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/typed_array.rs:126:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m126[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        js!( return @{reference}.length; ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m----------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/typed_array.rs:126:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m126[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        js!( return @{reference}.length; ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m----------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/xml_http_request.rs:65:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m65[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js!( return new XMLHttpRequest(); ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m-----------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/xml_http_request.rs:65:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m65[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js!( return new XMLHttpRequest(); ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m-----------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/xml_http_request.rs:74:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m74[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        let state: u16 = js!( return @{self}.readyState; ).try_into().unwrap();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                         [0m[0m[1m[38;5;12m---------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/xml_http_request.rs:74:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m74[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        let state: u16 = js!( return @{self}.readyState; ).try_into().unwrap();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                         [0m[0m[1m[38;5;12m---------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/xml_http_request.rs:91:37[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m91[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        let repsonse_type: String = js! ( return @{self}.responseType; ).try_into().unwrap();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                    [0m[0m[1m[38;5;12m------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/xml_http_request.rs:91:37[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m91[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        let repsonse_type: String = js! ( return @{self}.responseType; ).try_into().unwrap();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                    [0m[0m[1m[38;5;12m------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/xml_http_request.rs:108:24[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m108[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        let response = js!(return @{self}.responseText;);[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                       [0m[0m[1m[38;5;12m---------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/xml_http_request.rs:108:24[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m108[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        let response = js!(return @{self}.responseText;);[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                       [0m[0m[1m[38;5;12m---------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/xml_http_request.rs:121:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m121[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        js!(return @{self}.response;)[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m-----------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/xml_http_request.rs:121:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m121[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        js!(return @{self}.response;)[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m-----------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/xml_http_request.rs:129:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m129[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        js!(return @{self}.status;).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m---------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/xml_http_request.rs:129:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m129[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        js!(return @{self}.status;).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m---------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/xml_http_request.rs:137:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m137[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m138[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.open(@{method}, @{url}, true);[0m
[0m[1m[38;5;12m139[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        };[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:331:61[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m331[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name, $a3_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/xml_http_request.rs:137:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m137[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m138[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.open(@{method}, @{url}, true);[0m
[0m[1m[38;5;12m139[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        };[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/xml_http_request.rs:151:22[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m151[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        let header = js!( return @{self}.getResponseHeader(@{header}); );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                     [0m[0m[1m[38;5;12m---------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/xml_http_request.rs:151:22[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m151[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        let header = js!( return @{self}.getResponseHeader(@{header}); );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                     [0m[0m[1m[38;5;12m---------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/xml_http_request.rs:151:22[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m151[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        let header = js!( return @{self}.getResponseHeader(@{header}); );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                     [0m[0m[1m[38;5;12m---------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/xml_http_request.rs:166:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m166[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m167[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.setRequestHeader(@{header}, @{value});[0m
[0m[1m[38;5;12m168[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        };[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:331:61[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m331[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name, $a3_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/xml_http_request.rs:166:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m166[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m167[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.setRequestHeader(@{header}, @{value});[0m
[0m[1m[38;5;12m168[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        };[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/xml_http_request.rs:178:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m178[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m179[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.send();[0m
[0m[1m[38;5;12m180[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        };[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:325:41[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m325[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                          [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/xml_http_request.rs:178:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m178[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m179[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.send();[0m
[0m[1m[38;5;12m180[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        };[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/xml_http_request.rs:190:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m190[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m191[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.send(@{body});[0m
[0m[1m[38;5;12m192[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        };[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/xml_http_request.rs:190:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m190[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m191[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.send(@{body});[0m
[0m[1m[38;5;12m192[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        };[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/xml_http_request.rs:202:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m202[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m203[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.send(@{UnsafeTypedArray(body)});[0m
[0m[1m[38;5;12m204[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        };[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/xml_http_request.rs:202:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m202[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m203[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.send(@{UnsafeTypedArray(body)});[0m
[0m[1m[38;5;12m204[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        };[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/xml_http_request.rs:217:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m217[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m218[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.abort();[0m
[0m[1m[38;5;12m219[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        };[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:325:41[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m325[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                          [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/xml_http_request.rs:217:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m217[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m218[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.abort();[0m
[0m[1m[38;5;12m219[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        };[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/history.rs:37:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m37[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!{ @(no_return)[0m
[0m[1m[38;5;12m38[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.pushState(@{state}, @{title}, @{url});[0m
[0m[1m[38;5;12m39[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        };[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:334:71[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m334[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name, $a3_name, $a4_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                        [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/history.rs:37:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m37[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!{ @(no_return)[0m
[0m[1m[38;5;12m38[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.pushState(@{state}, @{title}, @{url});[0m
[0m[1m[38;5;12m39[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        };[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/history.rs:49:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m49[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!{ @(no_return)[0m
[0m[1m[38;5;12m50[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.replaceState(@{state}, @{title}, @{url});[0m
[0m[1m[38;5;12m51[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        };[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:334:71[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m334[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name, $a3_name, $a4_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                        [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/history.rs:49:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m49[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!{ @(no_return)[0m
[0m[1m[38;5;12m50[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.replaceState(@{state}, @{title}, @{url});[0m
[0m[1m[38;5;12m51[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        };[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/history.rs:62:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m62[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m63[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.go(@{offset});[0m
[0m[1m[38;5;12m64[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        };[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/history.rs:62:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m62[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m63[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.go(@{offset});[0m
[0m[1m[38;5;12m64[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        };[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/history.rs:73:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m73[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m74[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.back();[0m
[0m[1m[38;5;12m75[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        };[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:325:41[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m325[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                          [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/history.rs:73:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m73[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m74[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.back();[0m
[0m[1m[38;5;12m75[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        };[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/history.rs:84:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m84[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m85[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.forward();[0m
[0m[1m[38;5;12m86[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        };[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:325:41[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m325[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                          [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/history.rs:84:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m84[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m85[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.forward();[0m
[0m[1m[38;5;12m86[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        };[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/history.rs:95:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m95[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m96[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.length;[0m
[0m[1m[38;5;12m97[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/history.rs:95:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m95[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m96[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.length;[0m
[0m[1m[38;5;12m97[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: unused doc comment[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webapi/web_socket.rs:280:1[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m280[0m[0m [0m[0m[1m[38;5;12m| [0m[0m/// Errors thrown by `WebSocket::new`.[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m[0m [0m[0m[1m[33mrustdoc does not generate documentation for macro invocations[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mhelp[0m[0m: to document an item produced by a macro, the macro must produce the documentation as part of its expansion[0m

[0m[1m[33mwarning[0m[0m[1m: unused doc comment[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webapi/web_socket.rs:286:1[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m286[0m[0m [0m[0m[1m[38;5;12m| [0m[0m/// Errors thrown by `WebSocket::close_with_status`.[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m[0m [0m[0m[1m[33mrustdoc does not generate documentation for macro invocations[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mhelp[0m[0m: to document an item produced by a macro, the macro must produce the documentation as part of its expansion[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/web_socket.rs:139:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m139[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try!([0m
[0m[1m[38;5;12m140[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return new WebSocket(@{url});[0m
[0m[1m[38;5;12m141[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:422:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m422[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/web_socket.rs:139:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m139[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try!([0m
[0m[1m[38;5;12m140[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return new WebSocket(@{url});[0m
[0m[1m[38;5;12m141[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/web_socket.rs:139:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m139[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try!([0m
[0m[1m[38;5;12m140[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return new WebSocket(@{url});[0m
[0m[1m[38;5;12m141[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/web_socket.rs:139:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m139[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try!([0m
[0m[1m[38;5;12m140[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return new WebSocket(@{url});[0m
[0m[1m[38;5;12m141[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/web_socket.rs:149:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m149[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try!([0m
[0m[1m[38;5;12m150[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return new WebSocket(@{url}, @{protocols});[0m
[0m[1m[38;5;12m151[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:422:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m422[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/web_socket.rs:149:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m149[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try!([0m
[0m[1m[38;5;12m150[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return new WebSocket(@{url}, @{protocols});[0m
[0m[1m[38;5;12m151[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/web_socket.rs:149:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m149[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try!([0m
[0m[1m[38;5;12m150[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return new WebSocket(@{url}, @{protocols});[0m
[0m[1m[38;5;12m151[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/web_socket.rs:149:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m149[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try!([0m
[0m[1m[38;5;12m150[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return new WebSocket(@{url}, @{protocols});[0m
[0m[1m[38;5;12m151[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/web_socket.rs:160:35[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m160[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        let binary_type: String = js!( return @{self}.binaryType; ).try_into().unwrap();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                  [0m[0m[1m[38;5;12m---------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/web_socket.rs:160:35[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m160[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        let binary_type: String = js!( return @{self}.binaryType; ).try_into().unwrap();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                  [0m[0m[1m[38;5;12m---------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/web_socket.rs:170:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m170[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        js!( @(no_return) @{self}.binaryType = @{binary_type.to_str()}; );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m-----------------------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                  [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/web_socket.rs:170:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m170[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        js!( @(no_return) @{self}.binaryType = @{binary_type.to_str()}; );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m-----------------------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/web_socket.rs:181:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m181[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        js!( return @{self}.bufferedAmount; ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m-------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/web_socket.rs:181:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m181[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        js!( return @{self}.bufferedAmount; ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m-------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/web_socket.rs:190:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m190[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        js!( return @{self}.extensions; ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m---------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/web_socket.rs:190:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m190[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        js!( return @{self}.extensions; ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m---------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/web_socket.rs:200:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m200[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        js!( return @{self}.protocol; ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m-------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/web_socket.rs:200:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m200[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        js!( return @{self}.protocol; ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m-------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/web_socket.rs:208:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m208[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        js!( return @{self}.readyState; ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m---------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/web_socket.rs:208:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m208[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        js!( return @{self}.readyState; ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m---------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/web_socket.rs:216:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m216[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        js!( return @{self}.url; ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m--------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/web_socket.rs:216:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m216[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        js!( return @{self}.url; ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m--------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/web_socket.rs:225:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m225[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        js!( @(no_return) @{self}.close(); );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:325:41[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m325[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        __js_raw_asm!( $code, $a1_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                        [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/web_socket.rs:225:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m225[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        js!( @(no_return) @{self}.close(); );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/web_socket.rs:234:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m234[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try!( @(no_return)[0m
[0m[1m[38;5;12m235[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.close(@{code.0}, @{reason});[0m
[0m[1m[38;5;12m236[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:422:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m422[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/web_socket.rs:234:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m234[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try!( @(no_return)[0m
[0m[1m[38;5;12m235[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.close(@{code.0}, @{reason});[0m
[0m[1m[38;5;12m236[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/web_socket.rs:234:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m234[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try!( @(no_return)[0m
[0m[1m[38;5;12m235[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.close(@{code.0}, @{reason});[0m
[0m[1m[38;5;12m236[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/web_socket.rs:234:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m234[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try!( @(no_return)[0m
[0m[1m[38;5;12m235[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self}.close(@{code.0}, @{reason});[0m
[0m[1m[38;5;12m236[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/web_socket.rs:245:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m245[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        js!( @(no_return) @{self}.send(@{text}); );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                  [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/web_socket.rs:245:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m245[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        js!( @(no_return) @{self}.send(@{text}); );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/web_socket.rs:255:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m255[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        js!( @(no_return) @{self}.send(@{blob}); );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                  [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/web_socket.rs:255:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m255[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        js!( @(no_return) @{self}.send(@{blob}); );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/web_socket.rs:265:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m265[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        js!( @(no_return) @{self}.send(@{array_buffer}); );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m--------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                  [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/web_socket.rs:265:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m265[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        js!( @(no_return) @{self}.send(@{array_buffer}); );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m--------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/web_socket.rs:275:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m275[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        js!( @(no_return) @{self}.send(@{ UnsafeTypedArray(bytes) }); );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m---------------------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                  [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/web_socket.rs:275:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m275[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        js!( @(no_return) @{self}.send(@{ UnsafeTypedArray(bytes) }); );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m---------------------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:288:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m288[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m289[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{canvas}.getContext(""2d"");[0m
[0m[1m[38;5;12m290[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:288:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m288[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m289[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{canvas}.getContext(""2d"");[0m
[0m[1m[38;5;12m290[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:288:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m288[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m289[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{canvas}.getContext(""2d"");[0m
[0m[1m[38;5;12m290[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:303:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m303[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try! ( @(no_return)[0m
[0m[1m[38;5;12m304[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.addColorStop(@{offset}, @{color});[0m
[0m[1m[38;5;12m305[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:422:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m422[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:303:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m303[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try! ( @(no_return)[0m
[0m[1m[38;5;12m304[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.addColorStop(@{offset}, @{color});[0m
[0m[1m[38;5;12m305[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:303:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m303[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try! ( @(no_return)[0m
[0m[1m[38;5;12m304[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.addColorStop(@{offset}, @{color});[0m
[0m[1m[38;5;12m305[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:303:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m303[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try! ( @(no_return)[0m
[0m[1m[38;5;12m304[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.addColorStop(@{offset}, @{color});[0m
[0m[1m[38;5;12m305[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:330:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m330[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m331[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.height;[0m
[0m[1m[38;5;12m332[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:330:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m330[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m331[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.height;[0m
[0m[1m[38;5;12m332[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:340:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m340[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m341[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.width;[0m
[0m[1m[38;5;12m342[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:340:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m340[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m341[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.width;[0m
[0m[1m[38;5;12m342[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:354:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m354[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m355[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.canvas;[0m
[0m[1m[38;5;12m356[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:354:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m354[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m355[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.canvas;[0m
[0m[1m[38;5;12m356[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:365:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m365[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m366[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.fillStyle[0m
[0m[1m[38;5;12m367[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:365:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m365[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m366[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.fillStyle[0m
[0m[1m[38;5;12m367[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:376:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m376[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m377[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.fillStyle = @{color};[0m
[0m[1m[38;5;12m378[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:376:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m376[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m377[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.fillStyle = @{color};[0m
[0m[1m[38;5;12m378[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:387:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m387[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m388[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.fillStyle = @{gradient};[0m
[0m[1m[38;5;12m389[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:387:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m387[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m388[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.fillStyle = @{gradient};[0m
[0m[1m[38;5;12m389[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:398:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m398[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.fillStyle = @{pattern};[0m
[0m[1m[38;5;12m400[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:398:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m398[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.fillStyle = @{pattern};[0m
[0m[1m[38;5;12m400[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:410:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m410[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m411[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.font[0m
[0m[1m[38;5;12m412[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:410:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m410[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m411[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.font[0m
[0m[1m[38;5;12m412[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:422:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m422[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m423[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.font = @{font};[0m
[0m[1m[38;5;12m424[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:422:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m422[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m423[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.font = @{font};[0m
[0m[1m[38;5;12m424[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:434:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m435[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.globalAlpha[0m
[0m[1m[38;5;12m436[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:434:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m435[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.globalAlpha[0m
[0m[1m[38;5;12m436[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:446:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m446[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m447[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.globalAlpha = @{global_alpha};[0m
[0m[1m[38;5;12m448[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:446:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m446[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m447[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.globalAlpha = @{global_alpha};[0m
[0m[1m[38;5;12m448[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:458:47[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m458[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        let composite_operation_str: String = js! ([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_______________________________________________-[0m
[0m[1m[38;5;12m459[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.globalCompositeOperation[0m
[0m[1m[38;5;12m460[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:458:47[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m458[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        let composite_operation_str: String = js! ([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_______________________________________________-[0m
[0m[1m[38;5;12m459[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.globalCompositeOperation[0m
[0m[1m[38;5;12m460[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:527:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m527[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! {@(no_return)[0m
[0m[1m[38;5;12m528[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.globalCompositeOperation = @{composite_string};[0m
[0m[1m[38;5;12m529[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:527:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m527[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! {@(no_return)[0m
[0m[1m[38;5;12m528[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.globalCompositeOperation = @{composite_string};[0m
[0m[1m[38;5;12m529[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:539:36[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m539[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        let line_cap_str: String = js! ([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m____________________________________-[0m
[0m[1m[38;5;12m540[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.lineCap[0m
[0m[1m[38;5;12m541[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:539:36[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m539[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        let line_cap_str: String = js! ([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m____________________________________-[0m
[0m[1m[38;5;12m540[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.lineCap[0m
[0m[1m[38;5;12m541[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:563:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m563[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m564[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.lineCap = @{line_cap_string};[0m
[0m[1m[38;5;12m565[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:563:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m563[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m564[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.lineCap = @{line_cap_string};[0m
[0m[1m[38;5;12m565[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:573:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m573[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m574[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.lineDashOffset;[0m
[0m[1m[38;5;12m575[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:573:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m573[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m574[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.lineDashOffset;[0m
[0m[1m[38;5;12m575[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:583:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m583[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m584[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.lineDashOffset = @{line_dash_offset};[0m
[0m[1m[38;5;12m585[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:583:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m583[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m584[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.lineDashOffset = @{line_dash_offset};[0m
[0m[1m[38;5;12m585[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:595:37[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m595[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        let line_join_str: String = js! ([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_____________________________________-[0m
[0m[1m[38;5;12m596[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.lineJoin;[0m
[0m[1m[38;5;12m597[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:595:37[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m595[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        let line_join_str: String = js! ([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_____________________________________-[0m
[0m[1m[38;5;12m596[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.lineJoin;[0m
[0m[1m[38;5;12m597[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:618:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m618[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m619[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.lineJoin = @{line_join_str};[0m
[0m[1m[38;5;12m620[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:618:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m618[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m619[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.lineJoin = @{line_join_str};[0m
[0m[1m[38;5;12m620[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:629:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m629[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m630[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.lineWidth;[0m
[0m[1m[38;5;12m631[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:629:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m629[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m630[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.lineWidth;[0m
[0m[1m[38;5;12m631[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:640:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m640[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m641[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.lineWidth = @{line_width};[0m
[0m[1m[38;5;12m642[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:640:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m640[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m641[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.lineWidth = @{line_width};[0m
[0m[1m[38;5;12m642[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:651:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m651[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m652[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.miterLimit;[0m
[0m[1m[38;5;12m653[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:651:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m651[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m652[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.miterLimit;[0m
[0m[1m[38;5;12m653[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:662:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m662[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m663[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.miterLimit = @{miter_limit};[0m
[0m[1m[38;5;12m664[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:662:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m662[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m663[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.miterLimit = @{miter_limit};[0m
[0m[1m[38;5;12m664[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:673:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m673[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m674[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.shadowBlur;[0m
[0m[1m[38;5;12m675[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:673:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m673[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m674[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.shadowBlur;[0m
[0m[1m[38;5;12m675[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:684:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m684[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m685[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.shadowBlur = @{shadow_blur};[0m
[0m[1m[38;5;12m686[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:684:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m684[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m685[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.shadowBlur = @{shadow_blur};[0m
[0m[1m[38;5;12m686[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:694:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m694[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m695[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.shadowColor;[0m
[0m[1m[38;5;12m696[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:694:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m694[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m695[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.shadowColor;[0m
[0m[1m[38;5;12m696[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:704:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m704[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m705[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.shadowColor = @{shadow_color};[0m
[0m[1m[38;5;12m706[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:704:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m704[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m705[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.shadowColor = @{shadow_color};[0m
[0m[1m[38;5;12m706[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:714:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m714[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m715[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.shadowOffsetX;[0m
[0m[1m[38;5;12m716[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:714:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m714[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m715[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.shadowOffsetX;[0m
[0m[1m[38;5;12m716[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:724:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m724[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m725[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.shadowOffsetX = @{shadow_offset_x};[0m
[0m[1m[38;5;12m726[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:724:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m724[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m725[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.shadowOffsetX = @{shadow_offset_x};[0m
[0m[1m[38;5;12m726[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:734:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m734[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m735[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.shadowOffsetY;[0m
[0m[1m[38;5;12m736[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:734:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m734[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m735[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.shadowOffsetY;[0m
[0m[1m[38;5;12m736[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:744:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m744[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m745[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.shadowOffsetY = @{shadow_offset_y};[0m
[0m[1m[38;5;12m746[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:744:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m744[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m745[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.shadowOffsetY = @{shadow_offset_y};[0m
[0m[1m[38;5;12m746[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:754:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m754[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m755[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.strokeStyle;[0m
[0m[1m[38;5;12m756[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:754:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m754[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m755[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.strokeStyle;[0m
[0m[1m[38;5;12m756[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:764:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m764[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m765[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.strokeStyle = @{color};[0m
[0m[1m[38;5;12m766[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:764:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m764[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m765[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.strokeStyle = @{color};[0m
[0m[1m[38;5;12m766[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:774:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m774[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m775[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.strokeStyle = @{gradient};[0m
[0m[1m[38;5;12m776[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:774:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m774[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m775[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.strokeStyle = @{gradient};[0m
[0m[1m[38;5;12m776[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:784:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m784[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m785[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.strokeStyle = @{pattern};[0m
[0m[1m[38;5;12m786[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:784:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m784[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m785[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.strokeStyle = @{pattern};[0m
[0m[1m[38;5;12m786[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:796:38[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m796[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        let text_align_str: String = js! ([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m______________________________________-[0m
[0m[1m[38;5;12m797[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.textAlign;[0m
[0m[1m[38;5;12m798[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:796:38[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m796[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        let text_align_str: String = js! ([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m______________________________________-[0m
[0m[1m[38;5;12m797[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.textAlign;[0m
[0m[1m[38;5;12m798[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:823:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m823[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m824[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.textAlign = @{text_align_str};[0m
[0m[1m[38;5;12m825[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:823:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m823[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m824[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.textAlign = @{text_align_str};[0m
[0m[1m[38;5;12m825[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:833:41[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m833[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        let text_baseline_str: String = js! ([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_________________________________________-[0m
[0m[1m[38;5;12m834[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.textBaseline;[0m
[0m[1m[38;5;12m835[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:833:41[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m833[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        let text_baseline_str: String = js! ([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_________________________________________-[0m
[0m[1m[38;5;12m834[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.textBaseline;[0m
[0m[1m[38;5;12m835[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:860:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m860[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m861[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.textBaseline = @{text_baseline_str};[0m
[0m[1m[38;5;12m862[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:860:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m860[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m861[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.textBaseline = @{text_baseline_str};[0m
[0m[1m[38;5;12m862[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:872:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m872[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m873[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.arc(@{x}, @{y}, @{radius}, @{start_angle}, @{end_angle}, @{anticlockwise});[0m
[0m[1m[38;5;12m874[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:343:101[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m343[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name, $a3_name, $a4_name, $a5_name, $a6_name, $a7_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:872:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m872[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m873[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.arc(@{x}, @{y}, @{radius}, @{start_angle}, @{end_angle}, @{anticlockwise});[0m
[0m[1m[38;5;12m874[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:893:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m893[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try! ( @(no_return)[0m
[0m[1m[38;5;12m894[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.arcTo(@{x1}, @{y1}, @{x2}, @{y2}, @{radius});[0m
[0m[1m[38;5;12m895[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:422:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m422[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:893:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m893[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try! ( @(no_return)[0m
[0m[1m[38;5;12m894[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.arcTo(@{x1}, @{y1}, @{x2}, @{y2}, @{radius});[0m
[0m[1m[38;5;12m895[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:893:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m893[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try! ( @(no_return)[0m
[0m[1m[38;5;12m894[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.arcTo(@{x1}, @{y1}, @{x2}, @{y2}, @{radius});[0m
[0m[1m[38;5;12m895[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:893:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m893[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try! ( @(no_return)[0m
[0m[1m[38;5;12m894[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.arcTo(@{x1}, @{y1}, @{x2}, @{y2}, @{radius});[0m
[0m[1m[38;5;12m895[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:903:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m903[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m904[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.beginPath();[0m
[0m[1m[38;5;12m905[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:325:41[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m325[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                          [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:903:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m903[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m904[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.beginPath();[0m
[0m[1m[38;5;12m905[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:915:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m915[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m916[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.bezierCurveTo(@{cp1x}, @{cp1y}, @{cp2x}, @{cp2y}, @{x}, @{y});[0m
[0m[1m[38;5;12m917[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:343:101[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m343[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name, $a3_name, $a4_name, $a5_name, $a6_name, $a7_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:915:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m915[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m916[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.bezierCurveTo(@{cp1x}, @{cp1y}, @{cp2x}, @{cp2y}, @{x}, @{y});[0m
[0m[1m[38;5;12m917[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:926:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m926[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m927[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.clearRect(@{x}, @{y}, @{width}, @{height});[0m
[0m[1m[38;5;12m928[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:337:81[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m337[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name, $a3_name, $a4_name, $a5_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                  [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:926:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m926[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m927[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.clearRect(@{x}, @{y}, @{width}, @{height});[0m
[0m[1m[38;5;12m928[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:938:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m938[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m939[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.clip(@{fill_rule_str});[0m
[0m[1m[38;5;12m940[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:938:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m938[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m939[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.clip(@{fill_rule_str});[0m
[0m[1m[38;5;12m940[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:950:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m950[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m951[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.closePath();[0m
[0m[1m[38;5;12m952[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:325:41[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m325[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                          [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:950:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m950[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m951[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.closePath();[0m
[0m[1m[38;5;12m952[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:960:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m960[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m961[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.createLinearGradient(@{x0}, @{y0}, @{x1}, @{y1});[0m
[0m[1m[38;5;12m962[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:960:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m960[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m961[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.createLinearGradient(@{x0}, @{y0}, @{x1}, @{y1});[0m
[0m[1m[38;5;12m962[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:960:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m960[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m961[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.createLinearGradient(@{x0}, @{y0}, @{x1}, @{y1});[0m
[0m[1m[38;5;12m962[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:971:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m971[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try! ([0m
[0m[1m[38;5;12m972[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.createImageData(@{width}, @{height});[0m
[0m[1m[38;5;12m973[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:422:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m422[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:971:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m971[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try! ([0m
[0m[1m[38;5;12m972[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.createImageData(@{width}, @{height});[0m
[0m[1m[38;5;12m973[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:971:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m971[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try! ([0m
[0m[1m[38;5;12m972[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.createImageData(@{width}, @{height});[0m
[0m[1m[38;5;12m973[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:971:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m971[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try! ([0m
[0m[1m[38;5;12m972[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.createImageData(@{width}, @{height});[0m
[0m[1m[38;5;12m973[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:982:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m982[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m983[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.createImageData(@{image_data});[0m
[0m[1m[38;5;12m984[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:982:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m982[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m983[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.createImageData(@{image_data});[0m
[0m[1m[38;5;12m984[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:982:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m982[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m983[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.createImageData(@{image_data});[0m
[0m[1m[38;5;12m984[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1011:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1011[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m1012[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.createPattern(@{image}, @{repetition_string});[0m
[0m[1m[38;5;12m1013[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1011:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1011[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m1012[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.createPattern(@{image}, @{repetition_string});[0m
[0m[1m[38;5;12m1013[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1011:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1011[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m1012[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.createPattern(@{image}, @{repetition_string});[0m
[0m[1m[38;5;12m1013[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1022:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1022[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try! ([0m
[0m[1m[38;5;12m1023[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.createRadialGradient(@{x0}, @{y0}, @{r0}, @{x1}, @{y1}, @{r1});[0m
[0m[1m[38;5;12m1024[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:422:85[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m422[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1022:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1022[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try! ([0m
[0m[1m[38;5;12m1023[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.createRadialGradient(@{x0}, @{y0}, @{r0}, @{x1}, @{y1}, @{r1});[0m
[0m[1m[38;5;12m1024[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1022:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1022[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try! ([0m
[0m[1m[38;5;12m1023[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.createRadialGradient(@{x0}, @{y0}, @{r0}, @{x1}, @{y1}, @{r1});[0m
[0m[1m[38;5;12m1024[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1022:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1022[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try! ([0m
[0m[1m[38;5;12m1023[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.createRadialGradient(@{x0}, @{y0}, @{r0}, @{x1}, @{y1}, @{r1});[0m
[0m[1m[38;5;12m1024[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1032:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1032[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m1033[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.drawFocusIfNeeded(@{element.as_ref()});[0m
[0m[1m[38;5;12m1034[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1032:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1032[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m1033[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.drawFocusIfNeeded(@{element.as_ref()});[0m
[0m[1m[38;5;12m1034[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1042:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1042[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try! (@(no_return)[0m
[0m[1m[38;5;12m1043[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.drawImage(@{image}, @{dx}, @{dy});[0m
[0m[1m[38;5;12m1044[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:422:85[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m422[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1042:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1042[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try! (@(no_return)[0m
[0m[1m[38;5;12m1043[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.drawImage(@{image}, @{dx}, @{dy});[0m
[0m[1m[38;5;12m1044[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1042:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1042[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try! (@(no_return)[0m
[0m[1m[38;5;12m1043[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.drawImage(@{image}, @{dx}, @{dy});[0m
[0m[1m[38;5;12m1044[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1042:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1042[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try! (@(no_return)[0m
[0m[1m[38;5;12m1043[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.drawImage(@{image}, @{dx}, @{dy});[0m
[0m[1m[38;5;12m1044[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1052:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1052[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try! (@(no_return)[0m
[0m[1m[38;5;12m1053[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.drawImage(@{image}, @{dx}, @{dy}, @{d_width}, @{d_height});[0m
[0m[1m[38;5;12m1054[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:422:85[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m422[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1052:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1052[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try! (@(no_return)[0m
[0m[1m[38;5;12m1053[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.drawImage(@{image}, @{dx}, @{dy}, @{d_width}, @{d_height});[0m
[0m[1m[38;5;12m1054[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1052:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1052[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try! (@(no_return)[0m
[0m[1m[38;5;12m1053[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.drawImage(@{image}, @{dx}, @{dy}, @{d_width}, @{d_height});[0m
[0m[1m[38;5;12m1054[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1052:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1052[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try! (@(no_return)[0m
[0m[1m[38;5;12m1053[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.drawImage(@{image}, @{dx}, @{dy}, @{d_width}, @{d_height});[0m
[0m[1m[38;5;12m1054[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1065:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1065[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try!(@(no_return)[0m
[0m[1m[38;5;12m1066[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.drawImage(@{image}, @{sx}, @{sy}, @{s_width}, @{s_height}, @{dx}, @{dy}, @{d_width}, @{d_height});[0m
[0m[1m[38;5;12m1067[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:422:85[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m422[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1065:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1065[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try!(@(no_return)[0m
[0m[1m[38;5;12m1066[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.drawImage(@{image}, @{sx}, @{sy}, @{s_width}, @{s_height}, @{dx}, @{dy}, @{d_width}, @{d_height});[0m
[0m[1m[38;5;12m1067[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1065:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1065[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try!(@(no_return)[0m
[0m[1m[38;5;12m1066[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.drawImage(@{image}, @{sx}, @{sy}, @{s_width}, @{s_height}, @{dx}, @{dy}, @{d_width}, @{d_height});[0m
[0m[1m[38;5;12m1067[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1065:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1065[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try!(@(no_return)[0m
[0m[1m[38;5;12m1066[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.drawImage(@{image}, @{sx}, @{sy}, @{s_width}, @{s_height}, @{dx}, @{dy}, @{d_width}, @{d_height});[0m
[0m[1m[38;5;12m1067[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1078:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1078[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m1079[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.fill(@{fill_rule_str});[0m
[0m[1m[38;5;12m1080[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }    [0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1078:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1078[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m1079[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.fill(@{fill_rule_str});[0m
[0m[1m[38;5;12m1080[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }    [0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1089:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1089[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m1090[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.fillRect(@{x}, @{y}, @{width}, @{height});[0m
[0m[1m[38;5;12m1091[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:337:81[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m337[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name, $a3_name, $a4_name, $a5_name );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                                  [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1089:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1089[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m1090[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.fillRect(@{x}, @{y}, @{width}, @{height});[0m
[0m[1m[38;5;12m1091[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1103:13[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1103[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m            js! { @(no_return)[0m
[0m[1m[38;5;12m1104[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                @{&self.0}.fillText(@{text}, @{x}, @{y}, @{max_width});[0m
[0m[1m[38;5;12m1105[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            }[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_____________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:337:81[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m337[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name, $a3_name, $a4_name, $a5_name );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                                  [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1103:13[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1103[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m            js! { @(no_return)[0m
[0m[1m[38;5;12m1104[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                @{&self.0}.fillText(@{text}, @{x}, @{y}, @{max_width});[0m
[0m[1m[38;5;12m1105[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            }[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_____________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1108:13[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1108[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m            js! { @(no_return)[0m
[0m[1m[38;5;12m1109[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                @{&self.0}.fillText(@{text}, @{x}, @{y});[0m
[0m[1m[38;5;12m1110[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            }[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_____________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:334:71[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m334[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name, $a3_name, $a4_name );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                        [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1108:13[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1108[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m            js! { @(no_return)[0m
[0m[1m[38;5;12m1109[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                @{&self.0}.fillText(@{text}, @{x}, @{y});[0m
[0m[1m[38;5;12m1110[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            }[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_____________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1122:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1122[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try! ([0m
[0m[1m[38;5;12m1123[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.getImageData(@{sx}, @{sy}, @{sw}, @{sh});[0m
[0m[1m[38;5;12m1124[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:422:85[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m422[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1122:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1122[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try! ([0m
[0m[1m[38;5;12m1123[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.getImageData(@{sx}, @{sy}, @{sw}, @{sh});[0m
[0m[1m[38;5;12m1124[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1122:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1122[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try! ([0m
[0m[1m[38;5;12m1123[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.getImageData(@{sx}, @{sy}, @{sw}, @{sh});[0m
[0m[1m[38;5;12m1124[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1122:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1122[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try! ([0m
[0m[1m[38;5;12m1123[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.getImageData(@{sx}, @{sy}, @{sw}, @{sh});[0m
[0m[1m[38;5;12m1124[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1132:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1132[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m1133[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.getLineDash();[0m
[0m[1m[38;5;12m1134[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1132:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1132[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m1133[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.getLineDash();[0m
[0m[1m[38;5;12m1134[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1132:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1132[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m1133[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.getLineDash();[0m
[0m[1m[38;5;12m1134[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1146:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1146[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m1147[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.isPointInPath(@{x}, @{y}, @{fill_rule_str});[0m
[0m[1m[38;5;12m1148[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1146:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1146[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m1147[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.isPointInPath(@{x}, @{y}, @{fill_rule_str});[0m
[0m[1m[38;5;12m1148[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1146:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1146[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m1147[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.isPointInPath(@{x}, @{y}, @{fill_rule_str});[0m
[0m[1m[38;5;12m1148[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1158:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1158[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m1159[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.isPointInStroke(@{x}, @{y});[0m
[0m[1m[38;5;12m1160[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1158:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1158[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m1159[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.isPointInStroke(@{x}, @{y});[0m
[0m[1m[38;5;12m1160[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1158:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1158[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m1159[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.isPointInStroke(@{x}, @{y});[0m
[0m[1m[38;5;12m1160[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1168:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1168[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m1169[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.lineTo(@{x}, @{y});[0m
[0m[1m[38;5;12m1170[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:331:61[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m331[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name, $a3_name );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                              [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1168:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1168[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m1169[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.lineTo(@{x}, @{y});[0m
[0m[1m[38;5;12m1170[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1178:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1178[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try! ([0m
[0m[1m[38;5;12m1179[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.measureText(@{text});[0m
[0m[1m[38;5;12m1180[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:422:85[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m422[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1178:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1178[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try! ([0m
[0m[1m[38;5;12m1179[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.measureText(@{text});[0m
[0m[1m[38;5;12m1180[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1178:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1178[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try! ([0m
[0m[1m[38;5;12m1179[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.measureText(@{text});[0m
[0m[1m[38;5;12m1180[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1178:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1178[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try! ([0m
[0m[1m[38;5;12m1179[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.measureText(@{text});[0m
[0m[1m[38;5;12m1180[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1188:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1188[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m1189[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.moveTo(@{x}, @{y});[0m
[0m[1m[38;5;12m1190[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:331:61[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m331[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name, $a3_name );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                              [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1188:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1188[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m1189[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.moveTo(@{x}, @{y});[0m
[0m[1m[38;5;12m1190[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1202:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1202[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try! ( @(no_return)[0m
[0m[1m[38;5;12m1203[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.putImageData(@{image_data}, @{dx}, @{dy});[0m
[0m[1m[38;5;12m1204[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:422:85[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m422[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1202:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1202[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try! ( @(no_return)[0m
[0m[1m[38;5;12m1203[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.putImageData(@{image_data}, @{dx}, @{dy});[0m
[0m[1m[38;5;12m1204[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1202:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1202[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try! ( @(no_return)[0m
[0m[1m[38;5;12m1203[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.putImageData(@{image_data}, @{dx}, @{dy});[0m
[0m[1m[38;5;12m1204[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1202:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1202[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try! ( @(no_return)[0m
[0m[1m[38;5;12m1203[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.putImageData(@{image_data}, @{dx}, @{dy});[0m
[0m[1m[38;5;12m1204[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1218:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1218[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try! ( @(no_return)[0m
[0m[1m[38;5;12m1219[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.putImageData(@{image_data}, @{dx}, @{dy}, @{dirty_x}, @{dirty_y}, @{dirty_width}, @{dirty_height});[0m
[0m[1m[38;5;12m1220[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:422:85[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m422[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1218:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1218[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try! ( @(no_return)[0m
[0m[1m[38;5;12m1219[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.putImageData(@{image_data}, @{dx}, @{dy}, @{dirty_x}, @{dirty_y}, @{dirty_width}, @{dirty_height});[0m
[0m[1m[38;5;12m1220[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1218:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1218[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try! ( @(no_return)[0m
[0m[1m[38;5;12m1219[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.putImageData(@{image_data}, @{dx}, @{dy}, @{dirty_x}, @{dirty_y}, @{dirty_width}, @{dirty_height});[0m
[0m[1m[38;5;12m1220[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1218:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1218[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try! ( @(no_return)[0m
[0m[1m[38;5;12m1219[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.putImageData(@{image_data}, @{dx}, @{dy}, @{dirty_x}, @{dirty_y}, @{dirty_width}, @{dirty_height});[0m
[0m[1m[38;5;12m1220[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1231:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1231[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m1232[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.quadraticCurveTo(@{cpx}, @{cpy}, @{x}, @{y});[0m
[0m[1m[38;5;12m1233[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:337:81[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m337[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name, $a3_name, $a4_name, $a5_name );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                                  [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1231:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1231[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m1232[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.quadraticCurveTo(@{cpx}, @{cpy}, @{x}, @{y});[0m
[0m[1m[38;5;12m1233[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1243:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1243[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m1244[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.rect(@{x}, @{y}, @{width}, @{height});[0m
[0m[1m[38;5;12m1245[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:337:81[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m337[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name, $a3_name, $a4_name, $a5_name );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                                  [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1243:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1243[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m1244[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.rect(@{x}, @{y}, @{width}, @{height});[0m
[0m[1m[38;5;12m1245[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1254:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1254[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m1255[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.restore();[0m
[0m[1m[38;5;12m1256[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:325:41[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m325[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                          [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1254:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1254[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m1255[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.restore();[0m
[0m[1m[38;5;12m1256[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1264:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1264[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m1265[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.rotate(@{angle});[0m
[0m[1m[38;5;12m1266[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1264:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1264[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m1265[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.rotate(@{angle});[0m
[0m[1m[38;5;12m1266[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1274:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1274[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m1275[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.save();[0m
[0m[1m[38;5;12m1276[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:325:41[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m325[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                          [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1274:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1274[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m1275[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.save();[0m
[0m[1m[38;5;12m1276[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1288:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1288[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m1289[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.scale(@{x}, @{y});[0m
[0m[1m[38;5;12m1290[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:331:61[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m331[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name, $a3_name );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                              [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1288:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1288[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m1289[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.scale(@{x}, @{y});[0m
[0m[1m[38;5;12m1290[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1298:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1298[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m1299[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.setLineDash(@{segments});[0m
[0m[1m[38;5;12m1300[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1298:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1298[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m1299[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.setLineDash(@{segments});[0m
[0m[1m[38;5;12m1300[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1309:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1309[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m1310[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.setTransform(@{a}, @{b}, @{c}, @{d}, @{e}, @{f});[0m
[0m[1m[38;5;12m1311[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:343:101[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m343[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name, $a3_name, $a4_name, $a5_name, $a6_name, $a7_name );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                                                      [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1309:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1309[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m1310[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.setTransform(@{a}, @{b}, @{c}, @{d}, @{e}, @{f});[0m
[0m[1m[38;5;12m1311[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1321:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1321[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m1322[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.stroke();[0m
[0m[1m[38;5;12m1323[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:325:41[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m325[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                          [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1321:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1321[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m1322[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.stroke();[0m
[0m[1m[38;5;12m1323[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1331:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1331[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m1332[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.strokeRect(@{x}, @{y}, @{width}, @{height});[0m
[0m[1m[38;5;12m1333[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:337:81[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m337[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name, $a3_name, $a4_name, $a5_name );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                                  [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1331:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1331[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m1332[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.strokeRect(@{x}, @{y}, @{width}, @{height});[0m
[0m[1m[38;5;12m1333[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1344:13[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1344[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m            js! { @(no_return)[0m
[0m[1m[38;5;12m1345[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                @{&self.0}.strokeText(@{text}, @{x}, @{y}, @{max_width});[0m
[0m[1m[38;5;12m1346[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            }[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_____________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:337:81[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m337[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name, $a3_name, $a4_name, $a5_name );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                                  [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1344:13[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1344[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m            js! { @(no_return)[0m
[0m[1m[38;5;12m1345[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                @{&self.0}.strokeText(@{text}, @{x}, @{y}, @{max_width});[0m
[0m[1m[38;5;12m1346[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            }[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_____________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1349:13[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1349[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m            js! { @(no_return)[0m
[0m[1m[38;5;12m1350[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                @{&self.0}.strokeText(@{text}, @{x}, @{y}, @{Undefined});[0m
[0m[1m[38;5;12m1351[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            }[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_____________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:337:81[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m337[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name, $a3_name, $a4_name, $a5_name );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                                  [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1349:13[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1349[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m            js! { @(no_return)[0m
[0m[1m[38;5;12m1350[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                @{&self.0}.strokeText(@{text}, @{x}, @{y}, @{Undefined});[0m
[0m[1m[38;5;12m1351[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            }[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_____________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1362:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1362[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m1363[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.transform(@{a}, @{b}, @{c}, @{d}, @{e}, @{f});[0m
[0m[1m[38;5;12m1364[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:343:101[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m343[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name, $a3_name, $a4_name, $a5_name, $a6_name, $a7_name );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                                                      [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1362:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1362[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m1363[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.transform(@{a}, @{b}, @{c}, @{d}, @{e}, @{f});[0m
[0m[1m[38;5;12m1364[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1372:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1372[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m1373[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.translate(@{x}, @{y});[0m
[0m[1m[38;5;12m1374[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:331:61[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m331[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name, $a3_name );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                              [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1372:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1372[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m1373[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.0}.translate(@{x}, @{y});[0m
[0m[1m[38;5;12m1374[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1397:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1397[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m1398[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.width;[0m
[0m[1m[38;5;12m1399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/rendering_context.rs:1397:9[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1397[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m1398[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{&self.0}.width;[0m
[0m[1m[38;5;12m1399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/mutation_observer.rs:67:45[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m67[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        let callback_reference: Reference = js! ( return @{callback}; ).try_into().unwrap();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                            [0m[0m[1m[38;5;12m---------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/mutation_observer.rs:67:45[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m67[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        let callback_reference: Reference = js! ( return @{callback}; ).try_into().unwrap();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                            [0m[0m[1m[38;5;12m---------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/mutation_observer.rs:72:32[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m72[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m            mutation_observer: js! ([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m________________________________-[0m
[0m[1m[38;5;12m73[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                return new MutationObserver( @{callback_reference} );[0m
[0m[1m[38;5;12m74[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            ).try_into().unwrap(),[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_____________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/mutation_observer.rs:72:32[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m72[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m            mutation_observer: js! ([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m________________________________-[0m
[0m[1m[38;5;12m73[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                return new MutationObserver( @{callback_reference} );[0m
[0m[1m[38;5;12m74[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            ).try_into().unwrap(),[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_____________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/mutation_observer.rs:72:32[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m72[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m            mutation_observer: js! ([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m________________________________-[0m
[0m[1m[38;5;12m73[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                return new MutationObserver( @{callback_reference} );[0m
[0m[1m[38;5;12m74[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            ).try_into().unwrap(),[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_____________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/mutation_observer.rs:114:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m114[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m115[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self.as_ref()}.observe( @{target.as_ref()}, {[0m
[0m[1m[38;5;12m116[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                childList: @{options.child_list},[0m
[0m[1m[38;5;12m117[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                attributes: @{options.attributes},[0m
[0m[1m[38;5;12m...[0m[0m   [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m123[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            } );[0m
[0m[1m[38;5;12m124[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:349:121[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m349[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name, $a3_name, $a4_name, $a5_name, $a6_name, $a7_name, $a8_name, $a9_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                                                          [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/mutation_observer.rs:114:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m114[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m115[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self.as_ref()}.observe( @{target.as_ref()}, {[0m
[0m[1m[38;5;12m116[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                childList: @{options.child_list},[0m
[0m[1m[38;5;12m117[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                attributes: @{options.attributes},[0m
[0m[1m[38;5;12m...[0m[0m   [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m123[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            } );[0m
[0m[1m[38;5;12m124[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/mutation_observer.rs:137:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m137[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m138[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self.as_ref()}.disconnect();[0m
[0m[1m[38;5;12m139[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:325:41[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m325[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                          [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/mutation_observer.rs:137:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m137[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m138[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self.as_ref()}.disconnect();[0m
[0m[1m[38;5;12m139[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/mutation_observer.rs:150:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m150[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m151[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.takeRecords();[0m
[0m[1m[38;5;12m152[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/mutation_observer.rs:150:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m150[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m151[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.takeRecords();[0m
[0m[1m[38;5;12m152[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/mutation_observer.rs:150:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m150[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m151[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.takeRecords();[0m
[0m[1m[38;5;12m152[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/mutation_observer.rs:184:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m184[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m185[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.callback_reference}.drop();[0m
[0m[1m[38;5;12m186[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:325:41[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m325[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                          [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/mutation_observer.rs:184:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m184[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m185[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{&self.callback_reference}.drop();[0m
[0m[1m[38;5;12m186[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/mutation_observer.rs:249:36[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m249[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                let kind: String = js!( return @{r}.type; ).try_into()?;[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                   [0m[0m[1m[38;5;12m------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/mutation_observer.rs:249:36[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m249[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                let kind: String = js!( return @{r}.type; ).try_into()?;[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                   [0m[0m[1m[38;5;12m------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/mutation_observer.rs:250:36[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m250[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                let target: Node = js!( return @{r}.target; ).try_into()?;[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                   [0m[0m[1m[38;5;12m--------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/mutation_observer.rs:250:36[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m250[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                let target: Node = js!( return @{r}.target; ).try_into()?;[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                   [0m[0m[1m[38;5;12m--------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/mutation_observer.rs:255:31[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m255[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                        name: js!( return @{r}.attributeName; ).try_into()?,[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                              [0m[0m[1m[38;5;12m---------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/mutation_observer.rs:255:31[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m255[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                        name: js!( return @{r}.attributeName; ).try_into()?,[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                              [0m[0m[1m[38;5;12m---------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/mutation_observer.rs:256:36[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m256[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                        namespace: js!( return @{r}.attributeNamespace; ).try_into()?,[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                   [0m[0m[1m[38;5;12m--------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/mutation_observer.rs:256:36[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m256[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                        namespace: js!( return @{r}.attributeNamespace; ).try_into()?,[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                   [0m[0m[1m[38;5;12m--------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/mutation_observer.rs:257:36[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m257[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                        old_value: js!( return @{r}.oldValue; ).try_into()?,[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                   [0m[0m[1m[38;5;12m----------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/mutation_observer.rs:257:36[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m257[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                        old_value: js!( return @{r}.oldValue; ).try_into()?,[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                   [0m[0m[1m[38;5;12m----------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/mutation_observer.rs:262:35[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m262[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                        old_data: js!( return @{r}.oldValue; ).try_into()?,[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                  [0m[0m[1m[38;5;12m----------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/mutation_observer.rs:262:35[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m262[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                        old_data: js!( return @{r}.oldValue; ).try_into()?,[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                  [0m[0m[1m[38;5;12m----------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/mutation_observer.rs:267:41[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m267[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                        inserted_nodes: js!( return @{r}.addedNodes; ).try_into()?,[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                        [0m[0m[1m[38;5;12m------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/mutation_observer.rs:267:41[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m267[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                        inserted_nodes: js!( return @{r}.addedNodes; ).try_into()?,[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                        [0m[0m[1m[38;5;12m------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/mutation_observer.rs:268:40[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m268[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                        removed_nodes: js!( return @{r}.removedNodes; ).try_into()?,[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                       [0m[0m[1m[38;5;12m--------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/mutation_observer.rs:268:40[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m268[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                        removed_nodes: js!( return @{r}.removedNodes; ).try_into()?,[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                       [0m[0m[1m[38;5;12m--------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/mutation_observer.rs:269:43[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m269[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                        previous_sibling: js!( return @{r}.previousSibling; ).try_into()?,[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                          [0m[0m[1m[38;5;12m-----------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/mutation_observer.rs:269:43[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m269[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                        previous_sibling: js!( return @{r}.previousSibling; ).try_into()?,[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                          [0m[0m[1m[38;5;12m-----------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/mutation_observer.rs:270:39[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m270[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                        next_sibling: js!( return @{r}.nextSibling; ).try_into()?,[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                      [0m[0m[1m[38;5;12m-------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/mutation_observer.rs:270:39[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m270[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                        next_sibling: js!( return @{r}.nextSibling; ).try_into()?,[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                      [0m[0m[1m[38;5;12m-------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/error.rs:17:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m17[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m18[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.message;[0m
[0m[1m[38;5;12m19[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/error.rs:17:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m17[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m18[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.message;[0m
[0m[1m[38;5;12m19[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/error.rs:28:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m28[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m29[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.name;[0m
[0m[1m[38;5;12m30[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/error.rs:28:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m28[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m29[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.name;[0m
[0m[1m[38;5;12m30[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/error.rs:49:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m49[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js!( return new Error( @{description} ); ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/error.rs:49:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m49[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js!( return new Error( @{description} ); ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/error.rs:49:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m49[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js!( return new Error( @{description} ); ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:29:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m29[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m30[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.dataTransfer;[0m
[0m[1m[38;5;12m31[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:29:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m29[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m30[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.dataTransfer;[0m
[0m[1m[38;5;12m31[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:219:25[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m219[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        let v: String = js!([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_________________________-[0m
[0m[1m[38;5;12m220[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.dropEffect;[0m
[0m[1m[38;5;12m221[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:219:25[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m219[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        let v: String = js!([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_________________________-[0m
[0m[1m[38;5;12m220[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.dropEffect;[0m
[0m[1m[38;5;12m221[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:237:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m237[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m238[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self.as_ref()}.dropEffect = @{match value {[0m
[0m[1m[38;5;12m239[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                DropEffect::Copy => ""copy"",[0m
[0m[1m[38;5;12m240[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                DropEffect::Move => ""move"",[0m
[0m[1m[38;5;12m...[0m[0m   [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m243[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            }};[0m
[0m[1m[38;5;12m244[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:237:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m237[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m238[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self.as_ref()}.dropEffect = @{match value {[0m
[0m[1m[38;5;12m239[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                DropEffect::Copy => ""copy"",[0m
[0m[1m[38;5;12m240[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                DropEffect::Move => ""move"",[0m
[0m[1m[38;5;12m...[0m[0m   [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m243[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            }};[0m
[0m[1m[38;5;12m244[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:253:25[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m253[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        let v: String = js!([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_________________________-[0m
[0m[1m[38;5;12m254[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.effectAllowed;[0m
[0m[1m[38;5;12m255[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:253:25[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m253[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        let v: String = js!([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_________________________-[0m
[0m[1m[38;5;12m254[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.effectAllowed;[0m
[0m[1m[38;5;12m255[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:276:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m276[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m277[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self.as_ref()}.effectAllowed = @{match value {[0m
[0m[1m[38;5;12m278[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            EffectAllowed::None => ""none"",[0m
[0m[1m[38;5;12m279[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            EffectAllowed::Copy => ""copy"",[0m
[0m[1m[38;5;12m...[0m[0m   [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m287[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            }};[0m
[0m[1m[38;5;12m288[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:276:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m276[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m277[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self.as_ref()}.effectAllowed = @{match value {[0m
[0m[1m[38;5;12m278[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            EffectAllowed::None => ""none"",[0m
[0m[1m[38;5;12m279[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            EffectAllowed::Copy => ""copy"",[0m
[0m[1m[38;5;12m...[0m[0m   [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m287[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            }};[0m
[0m[1m[38;5;12m288[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        }[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:296:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m296[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m297[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.items;[0m
[0m[1m[38;5;12m298[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:296:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m296[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m297[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.items;[0m
[0m[1m[38;5;12m298[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:307:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m307[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m308[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.files;[0m
[0m[1m[38;5;12m309[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:307:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m307[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m308[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.files;[0m
[0m[1m[38;5;12m309[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:317:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m317[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m318[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.types;[0m
[0m[1m[38;5;12m319[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:317:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m317[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m318[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.types;[0m
[0m[1m[38;5;12m319[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:331:21[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m331[0m[0m [0m[0m[1m[38;5;12m| [0m[0m            None => js!(@(no_return) @{self.as_ref()}.clearData()),[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                    [0m[0m[1m[38;5;12m----------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:331:21[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m331[0m[0m [0m[0m[1m[38;5;12m| [0m[0m            None => js!(@(no_return) @{self.as_ref()}.clearData()),[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                    [0m[0m[1m[38;5;12m----------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:331:21[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m331[0m[0m [0m[0m[1m[38;5;12m| [0m[0m            None => js!(@(no_return) @{self.as_ref()}.clearData()),[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                    [0m[0m[1m[38;5;12m----------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:331:21[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m331[0m[0m [0m[0m[1m[38;5;12m| [0m[0m            None => js!(@(no_return) @{self.as_ref()}.clearData()),[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                    [0m[0m[1m[38;5;12m----------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:325:41[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m325[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        __js_raw_asm!( $code, $a1_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                        [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:331:21[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m331[0m[0m [0m[0m[1m[38;5;12m| [0m[0m            None => js!(@(no_return) @{self.as_ref()}.clearData()),[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                    [0m[0m[1m[38;5;12m----------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:332:24[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m332[0m[0m [0m[0m[1m[38;5;12m| [0m[0m            Some(x) => js!(@(no_return) @{self.as_ref()}.clearData(@{x}))[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                       [0m[0m[1m[38;5;12m--------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:332:24[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m332[0m[0m [0m[0m[1m[38;5;12m| [0m[0m            Some(x) => js!(@(no_return) @{self.as_ref()}.clearData(@{x}))[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                       [0m[0m[1m[38;5;12m--------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:332:24[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m332[0m[0m [0m[0m[1m[38;5;12m| [0m[0m            Some(x) => js!(@(no_return) @{self.as_ref()}.clearData(@{x}))[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                       [0m[0m[1m[38;5;12m--------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:332:24[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m332[0m[0m [0m[0m[1m[38;5;12m| [0m[0m            Some(x) => js!(@(no_return) @{self.as_ref()}.clearData(@{x}))[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                       [0m[0m[1m[38;5;12m--------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                  [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:332:24[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m332[0m[0m [0m[0m[1m[38;5;12m| [0m[0m            Some(x) => js!(@(no_return) @{self.as_ref()}.clearData(@{x}))[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                       [0m[0m[1m[38;5;12m--------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:342:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m342[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m343[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.getData(@{format});[0m
[0m[1m[38;5;12m344[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:342:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m342[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m343[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.getData(@{format});[0m
[0m[1m[38;5;12m344[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:342:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m342[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m343[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.getData(@{format});[0m
[0m[1m[38;5;12m344[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:355:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m355[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!(@(no_return)[0m
[0m[1m[38;5;12m356[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self.as_ref()}.setData(@{format}, @{data});[0m
[0m[1m[38;5;12m357[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:331:61[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m331[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name, $a3_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:355:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m355[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!(@(no_return)[0m
[0m[1m[38;5;12m356[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self.as_ref()}.setData(@{format}, @{data});[0m
[0m[1m[38;5;12m357[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:365:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m365[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!(@(no_return)[0m
[0m[1m[38;5;12m366[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self.as_ref()}.setDragImage(@{img.as_ref()}, @{x_offset}, @{y_offset});[0m
[0m[1m[38;5;12m367[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:334:71[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m334[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name, $a3_name, $a4_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                        [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:365:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m365[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!(@(no_return)[0m
[0m[1m[38;5;12m366[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self.as_ref()}.setDragImage(@{img.as_ref()}, @{x_offset}, @{y_offset});[0m
[0m[1m[38;5;12m367[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:425:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m425[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.length;[0m
[0m[1m[38;5;12m427[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:425:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m425[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.length;[0m
[0m[1m[38;5;12m427[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:436:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m436[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try!([0m
[0m[1m[38;5;12m437[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.add(@{data}, @{ty});[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:422:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m422[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:436:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m436[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try!([0m
[0m[1m[38;5;12m437[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.add(@{data}, @{ty});[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:436:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m436[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try!([0m
[0m[1m[38;5;12m437[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.add(@{data}, @{ty});[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:436:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m436[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js_try!([0m
[0m[1m[38;5;12m437[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.add(@{data}, @{ty});[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:447:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m447[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m448[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.add(@{file});[0m
[0m[1m[38;5;12m449[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:447:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m447[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m448[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.add(@{file});[0m
[0m[1m[38;5;12m449[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:447:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m447[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m448[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.add(@{file});[0m
[0m[1m[38;5;12m449[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:457:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m457[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        js_try!(@{self.as_ref()}.remove(@{index})).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:422:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m422[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:457:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m457[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        js_try!(@{self.as_ref()}.remove(@{index})).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:457:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m457[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        js_try!(@{self.as_ref()}.remove(@{index})).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:457:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m457[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        js_try!(@{self.as_ref()}.remove(@{index})).unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:465:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m465[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        js!(@(no_return) @{self.as_ref()}.clear());[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:325:41[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m325[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        __js_raw_asm!( $code, $a1_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                        [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:465:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m465[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        js!(@(no_return) @{self.as_ref()}.clear());[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:473:24[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m473[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        let v: Value = js!([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m________________________-[0m
[0m[1m[38;5;12m474[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}[@{index}];[0m
[0m[1m[38;5;12m475[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:473:24[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m473[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        let v: Value = js!([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m________________________-[0m
[0m[1m[38;5;12m474[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}[@{index}];[0m
[0m[1m[38;5;12m475[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:430:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m430[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:473:24[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m473[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        let v: Value = js!([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m________________________-[0m
[0m[1m[38;5;12m474[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}[@{index}];[0m
[0m[1m[38;5;12m475[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:551:28[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m551[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        let kind: String = js!([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m____________________________-[0m
[0m[1m[38;5;12m552[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.kind;[0m
[0m[1m[38;5;12m553[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:551:28[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m551[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        let kind: String = js!([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m____________________________-[0m
[0m[1m[38;5;12m552[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.kind;[0m
[0m[1m[38;5;12m553[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:566:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m566[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m567[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.type;[0m
[0m[1m[38;5;12m568[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:566:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m566[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m567[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.type;[0m
[0m[1m[38;5;12m568[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:577:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m577[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m578[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.getAsFile();[0m
[0m[1m[38;5;12m579[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:577:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m577[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m578[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.getAsFile();[0m
[0m[1m[38;5;12m579[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:577:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m577[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m578[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.getAsFile();[0m
[0m[1m[38;5;12m579[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:588:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m588[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!(@(no_return)[0m
[0m[1m[38;5;12m589[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self.as_ref()}.getAsString(@{Once(callback)});[0m
[0m[1m[38;5;12m590[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:328:51[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m328[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name, $a2_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/drag.rs:588:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m588[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!(@(no_return)[0m
[0m[1m[38;5;12m589[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self.as_ref()}.getAsString(@{Once(callback)});[0m
[0m[1m[38;5;12m590[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/focus.rs:18:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m18[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m19[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.relatedTarget;[0m
[0m[1m[38;5;12m20[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().ok()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/focus.rs:18:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m18[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m19[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.relatedTarget;[0m
[0m[1m[38;5;12m20[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().ok()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/gamepad.rs:16:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m16[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m17[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.gamepad;[0m
[0m[1m[38;5;12m18[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/gamepad.rs:16:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m16[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m17[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.gamepad;[0m
[0m[1m[38;5;12m18[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/history.rs:27:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m27[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m28[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.oldURL;[0m
[0m[1m[38;5;12m29[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/history.rs:27:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m27[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m28[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.oldURL;[0m
[0m[1m[38;5;12m29[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/history.rs:38:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m38[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m39[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.newURL;[0m
[0m[1m[38;5;12m40[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/history.rs:38:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m38[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m39[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.newURL;[0m
[0m[1m[38;5;12m40[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/history.rs:79:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m79[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js!(return @{self}.state;)[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m--------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/history.rs:79:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m79[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js!(return @{self}.state;)[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m--------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/keyboard.rs:7:5[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m7[0m[0m   [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m    js!([0m
[0m[1m[38;5;12m8[0m[0m   [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        return @{event.as_ref()}.getModifierState( @{[0m
[0m[1m[38;5;12m9[0m[0m   [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            match key {[0m
[0m[1m[38;5;12m10[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                ModifierKey::Alt => ""Alt"",[0m
[0m[1m[38;5;12m...[0m[0m   [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m26[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        } );[0m
[0m[1m[38;5;12m27[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m    ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_____-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/keyboard.rs:7:5[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m7[0m[0m   [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m    js!([0m
[0m[1m[38;5;12m8[0m[0m   [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        return @{event.as_ref()}.getModifierState( @{[0m
[0m[1m[38;5;12m9[0m[0m   [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            match key {[0m
[0m[1m[38;5;12m10[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                ModifierKey::Alt => ""Alt"",[0m
[0m[1m[38;5;12m...[0m[0m   [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m26[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        } );[0m
[0m[1m[38;5;12m27[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m    ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_____-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/keyboard.rs:7:5[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m7[0m[0m   [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m    js!([0m
[0m[1m[38;5;12m8[0m[0m   [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        return @{event.as_ref()}.getModifierState( @{[0m
[0m[1m[38;5;12m9[0m[0m   [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            match key {[0m
[0m[1m[38;5;12m10[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                ModifierKey::Alt => ""Alt"",[0m
[0m[1m[38;5;12m...[0m[0m   [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m26[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        } );[0m
[0m[1m[38;5;12m27[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m    ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_____-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/keyboard.rs:43:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m43[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m44[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.altKey;[0m
[0m[1m[38;5;12m45[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/keyboard.rs:43:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m43[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m44[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.altKey;[0m
[0m[1m[38;5;12m45[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/keyboard.rs:54:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m54[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m55[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.code;[0m
[0m[1m[38;5;12m56[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/keyboard.rs:54:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m54[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m55[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.code;[0m
[0m[1m[38;5;12m56[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/keyboard.rs:65:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m65[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m66[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.ctrlKey;[0m
[0m[1m[38;5;12m67[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/keyboard.rs:65:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m65[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m66[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.ctrlKey;[0m
[0m[1m[38;5;12m67[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/keyboard.rs:86:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m86[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m87[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.isComposing;[0m
[0m[1m[38;5;12m88[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/keyboard.rs:86:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m86[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m87[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.isComposing;[0m
[0m[1m[38;5;12m88[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/keyboard.rs:96:15[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m96[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        match js!([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_______________-[0m
[0m[1m[38;5;12m97[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.location;[0m
[0m[1m[38;5;12m98[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap() {[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/keyboard.rs:96:15[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m96[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        match js!([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_______________-[0m
[0m[1m[38;5;12m97[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.location;[0m
[0m[1m[38;5;12m98[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap() {[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/keyboard.rs:115:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m115[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m116[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.key;[0m
[0m[1m[38;5;12m117[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).into_string().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/keyboard.rs:115:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m115[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m116[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.key;[0m
[0m[1m[38;5;12m117[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).into_string().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/keyboard.rs:126:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m126[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m127[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.metaKey;[0m
[0m[1m[38;5;12m128[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/keyboard.rs:126:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m126[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m127[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.metaKey;[0m
[0m[1m[38;5;12m128[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/keyboard.rs:137:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m137[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m138[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.repeat;[0m
[0m[1m[38;5;12m139[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/keyboard.rs:137:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m137[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m138[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.repeat;[0m
[0m[1m[38;5;12m139[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/keyboard.rs:148:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m148[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m149[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.shiftKey;[0m
[0m[1m[38;5;12m150[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/keyboard.rs:148:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m148[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m149[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.shiftKey;[0m
[0m[1m[38;5;12m150[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/mouse.rs:19:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m19[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m20[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.altKey;[0m
[0m[1m[38;5;12m21[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/mouse.rs:19:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m19[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m20[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.altKey;[0m
[0m[1m[38;5;12m21[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/mouse.rs:29:15[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m29[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        match js!([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_______________-[0m
[0m[1m[38;5;12m30[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.button;[0m
[0m[1m[38;5;12m31[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap() {[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/mouse.rs:29:15[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m29[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        match js!([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_______________-[0m
[0m[1m[38;5;12m30[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.button;[0m
[0m[1m[38;5;12m31[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap() {[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/mouse.rs:47:13[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m47[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m            js!([0m
[0m[1m[38;5;12m48[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                return @{self.as_ref()}.buttons;[0m
[0m[1m[38;5;12m49[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_____________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/mouse.rs:47:13[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m47[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m            js!([0m
[0m[1m[38;5;12m48[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m                return @{self.as_ref()}.buttons;[0m
[0m[1m[38;5;12m49[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_____________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/mouse.rs:59:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m59[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m60[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.clientX;[0m
[0m[1m[38;5;12m61[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/mouse.rs:59:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m59[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m60[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.clientX;[0m
[0m[1m[38;5;12m61[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/mouse.rs:70:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m70[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m71[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.clientY;[0m
[0m[1m[38;5;12m72[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/mouse.rs:70:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m70[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m71[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.clientY;[0m
[0m[1m[38;5;12m72[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/mouse.rs:81:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m81[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m82[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.offsetX;[0m
[0m[1m[38;5;12m83[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/mouse.rs:81:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m81[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m82[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.offsetX;[0m
[0m[1m[38;5;12m83[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/mouse.rs:92:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m92[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m93[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.offsetY;[0m
[0m[1m[38;5;12m94[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/mouse.rs:92:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m92[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m93[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.offsetY;[0m
[0m[1m[38;5;12m94[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/mouse.rs:103:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m103[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m104[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.ctrlKey;[0m
[0m[1m[38;5;12m105[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/mouse.rs:103:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m103[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m104[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.ctrlKey;[0m
[0m[1m[38;5;12m105[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/mouse.rs:123:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m123[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m124[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.metaKey;[0m
[0m[1m[38;5;12m125[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/mouse.rs:123:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m123[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m124[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.metaKey;[0m
[0m[1m[38;5;12m125[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/mouse.rs:135:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m135[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m136[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.movementX;[0m
[0m[1m[38;5;12m137[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/mouse.rs:135:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m135[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m136[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.movementX;[0m
[0m[1m[38;5;12m137[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/mouse.rs:147:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m147[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m148[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.movementY;[0m
[0m[1m[38;5;12m149[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/mouse.rs:147:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m147[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m148[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.movementY;[0m
[0m[1m[38;5;12m149[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/mouse.rs:157:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m157[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m158[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.region;[0m
[0m[1m[38;5;12m159[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().ok()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/mouse.rs:157:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m157[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m158[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.region;[0m
[0m[1m[38;5;12m159[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().ok()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/mouse.rs:168:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m168[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m169[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.relatedTarget;[0m
[0m[1m[38;5;12m170[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().ok()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/mouse.rs:168:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m168[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m169[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.relatedTarget;[0m
[0m[1m[38;5;12m170[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().ok()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/mouse.rs:179:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m179[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m180[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.screenX;[0m
[0m[1m[38;5;12m181[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/mouse.rs:179:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m179[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m180[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.screenX;[0m
[0m[1m[38;5;12m181[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/mouse.rs:190:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m190[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m191[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.screenY;[0m
[0m[1m[38;5;12m192[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/mouse.rs:190:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m190[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m191[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.screenY;[0m
[0m[1m[38;5;12m192[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/mouse.rs:201:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m201[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m202[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.shiftKey;[0m
[0m[1m[38;5;12m203[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/mouse.rs:201:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m201[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m202[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.shiftKey;[0m
[0m[1m[38;5;12m203[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/mouse.rs:441:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m441[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m442[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.deltaX;[0m
[0m[1m[38;5;12m443[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/mouse.rs:441:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m441[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m442[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.deltaX;[0m
[0m[1m[38;5;12m443[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/mouse.rs:451:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m451[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m452[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.deltaY;[0m
[0m[1m[38;5;12m453[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/mouse.rs:451:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m451[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m452[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.deltaY;[0m
[0m[1m[38;5;12m453[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/mouse.rs:461:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m461[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m462[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.deltaZ;[0m
[0m[1m[38;5;12m463[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/mouse.rs:461:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m461[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! ([0m
[0m[1m[38;5;12m462[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.deltaZ;[0m
[0m[1m[38;5;12m463[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/mouse.rs:471:25[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m471[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        let mode: u32 = js! ([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_________________________-[0m
[0m[1m[38;5;12m472[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.deltaMode;[0m
[0m[1m[38;5;12m473[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/mouse.rs:471:25[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m471[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        let mode: u32 = js! ([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_________________________-[0m
[0m[1m[38;5;12m472[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.deltaMode;[0m
[0m[1m[38;5;12m473[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/pointer.rs:23:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m23[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m24[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.pointerId;[0m
[0m[1m[38;5;12m25[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/pointer.rs:23:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m23[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m24[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.pointerId;[0m
[0m[1m[38;5;12m25[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/pointer.rs:34:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m34[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m35[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.width;[0m
[0m[1m[38;5;12m36[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/pointer.rs:34:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m34[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m35[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.width;[0m
[0m[1m[38;5;12m36[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/pointer.rs:45:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m45[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m46[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.height;[0m
[0m[1m[38;5;12m47[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/pointer.rs:45:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m45[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m46[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.height;[0m
[0m[1m[38;5;12m47[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/pointer.rs:57:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m57[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m58[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.pressure;[0m
[0m[1m[38;5;12m59[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/pointer.rs:57:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m57[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m58[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.pressure;[0m
[0m[1m[38;5;12m59[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/pointer.rs:70:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m70[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m71[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.tangentialPressure;[0m
[0m[1m[38;5;12m72[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/pointer.rs:70:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m70[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m71[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.tangentialPressure;[0m
[0m[1m[38;5;12m72[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/pointer.rs:82:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m82[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m83[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.tiltX;[0m
[0m[1m[38;5;12m84[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/pointer.rs:82:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m82[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m83[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.tiltX;[0m
[0m[1m[38;5;12m84[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/pointer.rs:94:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m94[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m95[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.tiltY;[0m
[0m[1m[38;5;12m96[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/pointer.rs:94:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m94[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m95[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.tiltY;[0m
[0m[1m[38;5;12m96[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/pointer.rs:106:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m106[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m107[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.twist;[0m
[0m[1m[38;5;12m108[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/pointer.rs:106:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m106[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m107[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.twist;[0m
[0m[1m[38;5;12m108[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/pointer.rs:117:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m117[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m118[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.pointerType;[0m
[0m[1m[38;5;12m119[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/pointer.rs:117:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m117[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m118[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.pointerType;[0m
[0m[1m[38;5;12m119[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/pointer.rs:128:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m128[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m129[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.isPrimary;[0m
[0m[1m[38;5;12m130[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/pointer.rs:128:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m128[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m129[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.isPrimary;[0m
[0m[1m[38;5;12m130[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/pointer.rs:240:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m240[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m241[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.getCoalescedEvents();[0m
[0m[1m[38;5;12m242[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/pointer.rs:240:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m240[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m241[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.getCoalescedEvents();[0m
[0m[1m[38;5;12m242[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/pointer.rs:240:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m240[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m241[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.getCoalescedEvents();[0m
[0m[1m[38;5;12m242[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/progress.rs:17:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m17[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m18[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.lengthComputable;[0m
[0m[1m[38;5;12m19[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/progress.rs:17:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m17[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m18[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.lengthComputable;[0m
[0m[1m[38;5;12m19[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/progress.rs:28:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m28[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m29[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.loaded;[0m
[0m[1m[38;5;12m30[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/progress.rs:28:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m28[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m29[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.loaded;[0m
[0m[1m[38;5;12m30[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/progress.rs:39:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m39[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m40[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.total;[0m
[0m[1m[38;5;12m41[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/progress.rs:39:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m39[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m40[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.total;[0m
[0m[1m[38;5;12m41[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/socket.rs:27:25[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m27[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        SocketCloseCode(js!([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_________________________-[0m
[0m[1m[38;5;12m28[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.code;[0m
[0m[1m[38;5;12m29[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap())[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/socket.rs:27:25[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m27[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        SocketCloseCode(js!([0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m [0m[0m[1m[38;5;12m_________________________-[0m
[0m[1m[38;5;12m28[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.code;[0m
[0m[1m[38;5;12m29[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap())[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/socket.rs:38:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m38[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m39[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.reason;[0m
[0m[1m[38;5;12m40[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/socket.rs:38:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m38[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m39[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.reason;[0m
[0m[1m[38;5;12m40[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/socket.rs:49:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m49[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m50[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.wasClean;[0m
[0m[1m[38;5;12m51[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/socket.rs:49:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m49[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m50[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.wasClean;[0m
[0m[1m[38;5;12m51[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/socket.rs:148:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m148[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m149[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.data;[0m
[0m[1m[38;5;12m150[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/socket.rs:148:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m148[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m149[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.data;[0m
[0m[1m[38;5;12m150[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/socket.rs:159:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m159[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m160[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.origin;[0m
[0m[1m[38;5;12m161[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/socket.rs:159:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m159[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m160[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.origin;[0m
[0m[1m[38;5;12m161[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/socket.rs:170:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m170[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m171[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.lastEventId;[0m
[0m[1m[38;5;12m172[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/socket.rs:170:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m170[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m171[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.lastEventId;[0m
[0m[1m[38;5;12m172[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/socket.rs:182:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m182[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m183[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.source;[0m
[0m[1m[38;5;12m184[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().ok()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/socket.rs:182:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m182[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m183[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.source;[0m
[0m[1m[38;5;12m184[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().ok()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/socket.rs:195:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m195[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m196[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.ports;[0m
[0m[1m[38;5;12m197[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/events/socket.rs:195:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m195[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m196[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.ports;[0m
[0m[1m[38;5;12m197[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/parent_node.rs:23:17[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m23[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m            Ok( js!( return @{self.as_ref()}.querySelector( @{selector} ); ).into_reference_unchecked() )[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                [0m[0m[1m[38;5;12m------------------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/parent_node.rs:23:17[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m23[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m            Ok( js!( return @{self.as_ref()}.querySelector( @{selector} ); ).into_reference_unchecked() )[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                [0m[0m[1m[38;5;12m------------------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/parent_node.rs:23:17[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m23[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m            Ok( js!( return @{self.as_ref()}.querySelector( @{selector} ); ).into_reference_unchecked() )[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                [0m[0m[1m[38;5;12m------------------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/parent_node.rs:34:17[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m34[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m            Ok( js!( return @{self.as_ref()}.querySelectorAll( @{selector} ); ).into_reference_unchecked().unwrap() )[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                [0m[0m[1m[38;5;12m---------------------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/parent_node.rs:34:17[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m34[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m            Ok( js!( return @{self.as_ref()}.querySelectorAll( @{selector} ); ).into_reference_unchecked().unwrap() )[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                [0m[0m[1m[38;5;12m---------------------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/parent_node.rs:34:17[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m34[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m            Ok( js!( return @{self.as_ref()}.querySelectorAll( @{selector} ); ).into_reference_unchecked().unwrap() )[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                [0m[0m[1m[38;5;12m---------------------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/non_element_parent_node.rs:18:13[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m18[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m            js!( return @{self.as_ref()}.getElementById( @{id} ); ).into_reference_unchecked()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m            [0m[0m[1m[38;5;12m-------------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/non_element_parent_node.rs:18:13[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m18[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m            js!( return @{self.as_ref()}.getElementById( @{id} ); ).into_reference_unchecked()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m            [0m[0m[1m[38;5;12m-------------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                    [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/non_element_parent_node.rs:18:13[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m18[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m            js!( return @{self.as_ref()}.getElementById( @{id} ); ).into_reference_unchecked()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m            [0m[0m[1m[38;5;12m-------------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                         [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_collection.rs:24:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m24[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js!( return @{self}.length; ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m-----------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                              [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_collection.rs:24:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m24[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        js!( return @{self}.length; ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;12m-----------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_collection.rs:32:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m32[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m33[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.item(@{index});[0m
[0m[1m[38;5;12m34[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_collection.rs:32:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m32[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m33[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.item(@{index});[0m
[0m[1m[38;5;12m34[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/html_collection.rs:32:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m32[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m33[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self}.item(@{index});[0m
[0m[1m[38;5;12m34[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:399:26[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m399[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m                        );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/child_node.rs:17:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m17[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m18[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self.as_ref()}.remove();[0m
[0m[1m[38;5;12m19[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        };[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:325:41[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m325[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        __js_raw_asm!( $code, $a1_name );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                          [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/child_node.rs:17:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m17[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js! { @(no_return)[0m
[0m[1m[38;5;12m18[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            @{self.as_ref()}.remove();[0m
[0m[1m[38;5;12m19[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        };[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: macro invocations at the end of a block are treated as expressions[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `_js_impl`[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/gamepad.rs:54:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m54[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m55[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.pressed;[0m
[0m[1m[38;5;12m56[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/gamepad.rs:54:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m54[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m55[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.pressed;[0m
[0m[1m[38;5;12m56[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/gamepad.rs:65:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m65[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m66[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.touched;[0m
[0m[1m[38;5;12m67[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/gamepad.rs:65:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m65[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m66[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.touched;[0m
[0m[1m[38;5;12m67[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/gamepad.rs:76:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m76[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m77[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.value;[0m
[0m[1m[38;5;12m78[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/gamepad.rs:76:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m76[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m77[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.value;[0m
[0m[1m[38;5;12m78[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/gamepad.rs:98:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m98[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m99[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.id;[0m
[0m[1m[38;5;12m100[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/gamepad.rs:98:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m98[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m99[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.id;[0m
[0m[1m[38;5;12m100[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/gamepad.rs:109:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m109[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m110[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.index;[0m
[0m[1m[38;5;12m111[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/gamepad.rs:109:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m109[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m110[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.index;[0m
[0m[1m[38;5;12m111[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/gamepad.rs:120:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m120[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m121[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.connected;[0m
[0m[1m[38;5;12m122[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/gamepad.rs:120:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m120[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m121[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.connected;[0m
[0m[1m[38;5;12m122[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/gamepad.rs:131:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m131[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m132[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.timestamp;[0m
[0m[1m[38;5;12m133[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/gamepad.rs:131:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m131[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m132[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.timestamp;[0m
[0m[1m[38;5;12m133[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/gamepad.rs:142:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m142[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m143[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.mapping;[0m
[0m[1m[38;5;12m144[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/gamepad.rs:142:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m142[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m143[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.mapping;[0m
[0m[1m[38;5;12m144[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/gamepad.rs:153:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m153[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m154[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.axes;[0m
[0m[1m[38;5;12m155[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/gamepad.rs:153:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m153[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m154[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.axes;[0m
[0m[1m[38;5;12m155[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/gamepad.rs:164:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m164[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m165[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.buttons;[0m
[0m[1m[38;5;12m166[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:434:79[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m434[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)* $arg] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/gamepad.rs:164:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m164[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m165[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return @{self.as_ref()}.buttons;[0m
[0m[1m[38;5;12m166[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:438:74[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m438[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                           [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/gamepad.rs:176:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m176[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m177[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return Array.from(navigator.getGamepads());[0m
[0m[1m[38;5;12m178[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: trailing semicolon in macro used in expression position[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/macros.rs:426:85[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m426[0m[0m [0m[0m[1m[38;5;12m| [0m[0m  [0m[0m        _js_impl!( @call [$code, [$($flags)*]] [$($args)*] -> $($inner)* $($rest)* );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                                      [0m[0m[1m[33m^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m::: [0m[0msrc/webapi/gamepad.rs:176:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m176[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m/[0m[0m [0m[0m        js!([0m
[0m[1m[38;5;12m177[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m            return Array.from(navigator.getGamepads());[0m
[0m[1m[38;5;12m178[0m[0m [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|[0m[0m [0m[0m        ).try_into().unwrap()[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m|_________-[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `_js_impl` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: use of deprecated macro `try`: use the `?` operator instead[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/ecosystem/serde.rs:171:35[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m171[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                    let mut map = try!( serializer.serialize_map( Some( value.len() ) ) );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                  [0m[0m[1m[33m^^^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: `#[warn(deprecated)]` on by default[0m

[0m[1m[33mwarning[0m[0m[1m: use of deprecated macro `try`: use the `?` operator instead[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/ecosystem/serde.rs:173:25[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m173[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                        try!( map.serialize_key( &key ) );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                        [0m[0m[1m[33m^^^[0m

[0m[1m[33mwarning[0m[0m[1m: use of deprecated macro `try`: use the `?` operator instead[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/ecosystem/serde.rs:174:25[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m174[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                        try!( map.serialize_value( &value ) );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                        [0m[0m[1m[33m^^^[0m

[0m[1m[33mwarning[0m[0m[1m: use of deprecated macro `try`: use the `?` operator instead[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/ecosystem/serde.rs:179:31[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m179[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                    let map = try!( serializer.serialize_map( None ) );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                              [0m[0m[1m[33m^^^[0m

[0m[1m[33mwarning[0m[0m[1m: use of deprecated associated function `std::error::Error::description`: use the Display impl or to_string()[0m
[0m  [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/number.rs:36:37[0m
[0m   [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m36[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        let message = error::Error::description( self );[0m
[0m   [0m[0m[1m[38;5;12m| [0m[0m                                    [0m[0m[1m[33m^^^^^^^^^^^[0m

[0m[1m[33mwarning[0m[0m[1m: use of deprecated function `std::mem::uninitialized`: use `mem::MaybeUninit` instead[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/serialization.rs:355:59[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m355[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                    let mut value: SerializedValue = mem::uninitialized();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                          [0m[0m[1m[33m^^^^^^^^^^^^^[0m
[0m[1m[38;5;12m...[0m
[0m[1m[38;5;12m377[0m[0m [0m[0m[1m[38;5;12m| [0m[0muntagged_boilerplate!( test_undefined, as_undefined, Tag::Undefined, SerializedUntaggedUndefined );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m--------------------------------------------------------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `untagged_boilerplate` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: use of deprecated function `std::mem::uninitialized`: use `mem::MaybeUninit` instead[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/serialization.rs:355:59[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m355[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                    let mut value: SerializedValue = mem::uninitialized();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                          [0m[0m[1m[33m^^^^^^^^^^^^^[0m
[0m[1m[38;5;12m...[0m
[0m[1m[38;5;12m378[0m[0m [0m[0m[1m[38;5;12m| [0m[0muntagged_boilerplate!( test_null, as_null, Tag::Null, SerializedUntaggedNull );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m------------------------------------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `untagged_boilerplate` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: use of deprecated function `std::mem::uninitialized`: use `mem::MaybeUninit` instead[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/serialization.rs:355:59[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m355[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                    let mut value: SerializedValue = mem::uninitialized();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                          [0m[0m[1m[33m^^^^^^^^^^^^^[0m
[0m[1m[38;5;12m...[0m
[0m[1m[38;5;12m379[0m[0m [0m[0m[1m[38;5;12m| [0m[0muntagged_boilerplate!( test_i32, as_i32, Tag::I32, SerializedUntaggedI32 );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m--------------------------------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `untagged_boilerplate` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: use of deprecated function `std::mem::uninitialized`: use `mem::MaybeUninit` instead[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/serialization.rs:355:59[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m355[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                    let mut value: SerializedValue = mem::uninitialized();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                          [0m[0m[1m[33m^^^^^^^^^^^^^[0m
[0m[1m[38;5;12m...[0m
[0m[1m[38;5;12m380[0m[0m [0m[0m[1m[38;5;12m| [0m[0muntagged_boilerplate!( test_f64, as_f64, Tag::F64, SerializedUntaggedF64 );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m--------------------------------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `untagged_boilerplate` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: use of deprecated function `std::mem::uninitialized`: use `mem::MaybeUninit` instead[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/serialization.rs:355:59[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m355[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                    let mut value: SerializedValue = mem::uninitialized();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                          [0m[0m[1m[33m^^^^^^^^^^^^^[0m
[0m[1m[38;5;12m...[0m
[0m[1m[38;5;12m381[0m[0m [0m[0m[1m[38;5;12m| [0m[0muntagged_boilerplate!( test_true, as_true, Tag::True, SerializedUntaggedTrue );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m------------------------------------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `untagged_boilerplate` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: use of deprecated function `std::mem::uninitialized`: use `mem::MaybeUninit` instead[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/serialization.rs:355:59[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m355[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                    let mut value: SerializedValue = mem::uninitialized();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                          [0m[0m[1m[33m^^^^^^^^^^^^^[0m
[0m[1m[38;5;12m...[0m
[0m[1m[38;5;12m382[0m[0m [0m[0m[1m[38;5;12m| [0m[0muntagged_boilerplate!( test_false, as_false, Tag::False, SerializedUntaggedFalse );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m----------------------------------------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `untagged_boilerplate` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: use of deprecated function `std::mem::uninitialized`: use `mem::MaybeUninit` instead[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/serialization.rs:355:59[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m355[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                    let mut value: SerializedValue = mem::uninitialized();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                          [0m[0m[1m[33m^^^^^^^^^^^^^[0m
[0m[1m[38;5;12m...[0m
[0m[1m[38;5;12m383[0m[0m [0m[0m[1m[38;5;12m| [0m[0muntagged_boilerplate!( test_object, as_object, Tag::Object, SerializedUntaggedObject );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m--------------------------------------------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `untagged_boilerplate` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: use of deprecated function `std::mem::uninitialized`: use `mem::MaybeUninit` instead[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/serialization.rs:355:59[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m355[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                    let mut value: SerializedValue = mem::uninitialized();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                          [0m[0m[1m[33m^^^^^^^^^^^^^[0m
[0m[1m[38;5;12m...[0m
[0m[1m[38;5;12m384[0m[0m [0m[0m[1m[38;5;12m| [0m[0muntagged_boilerplate!( test_string, as_string, Tag::Str, SerializedUntaggedString );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m-----------------------------------------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `untagged_boilerplate` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: use of deprecated function `std::mem::uninitialized`: use `mem::MaybeUninit` instead[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/serialization.rs:355:59[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m355[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                    let mut value: SerializedValue = mem::uninitialized();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                          [0m[0m[1m[33m^^^^^^^^^^^^^[0m
[0m[1m[38;5;12m...[0m
[0m[1m[38;5;12m385[0m[0m [0m[0m[1m[38;5;12m| [0m[0muntagged_boilerplate!( test_array, as_array, Tag::Array, SerializedUntaggedArray );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m----------------------------------------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `untagged_boilerplate` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: use of deprecated function `std::mem::uninitialized`: use `mem::MaybeUninit` instead[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/serialization.rs:355:59[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m355[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                    let mut value: SerializedValue = mem::uninitialized();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                          [0m[0m[1m[33m^^^^^^^^^^^^^[0m
[0m[1m[38;5;12m...[0m
[0m[1m[38;5;12m386[0m[0m [0m[0m[1m[38;5;12m| [0m[0muntagged_boilerplate!( test_symbol, as_symbol, Tag::Symbol, SerializedUntaggedSymbol );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m--------------------------------------------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `untagged_boilerplate` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: use of deprecated function `std::mem::uninitialized`: use `mem::MaybeUninit` instead[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/serialization.rs:355:59[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m355[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                    let mut value: SerializedValue = mem::uninitialized();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                          [0m[0m[1m[33m^^^^^^^^^^^^^[0m
[0m[1m[38;5;12m...[0m
[0m[1m[38;5;12m387[0m[0m [0m[0m[1m[38;5;12m| [0m[0muntagged_boilerplate!( test_reference, as_reference, Tag::Reference, SerializedUntaggedReference );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m--------------------------------------------------------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `untagged_boilerplate` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: use of deprecated function `std::mem::uninitialized`: use `mem::MaybeUninit` instead[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/serialization.rs:355:59[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m355[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                    let mut value: SerializedValue = mem::uninitialized();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                          [0m[0m[1m[33m^^^^^^^^^^^^^[0m
[0m[1m[38;5;12m...[0m
[0m[1m[38;5;12m388[0m[0m [0m[0m[1m[38;5;12m| [0m[0muntagged_boilerplate!( test_function, as_function, Tag::Function, SerializedUntaggedFunction );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m----------------------------------------------------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `untagged_boilerplate` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: use of deprecated function `std::mem::uninitialized`: use `mem::MaybeUninit` instead[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/serialization.rs:355:59[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m355[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                    let mut value: SerializedValue = mem::uninitialized();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                          [0m[0m[1m[33m^^^^^^^^^^^^^[0m
[0m[1m[38;5;12m...[0m
[0m[1m[38;5;12m389[0m[0m [0m[0m[1m[38;5;12m| [0m[0muntagged_boilerplate!( test_function_once, as_function_once, Tag::FunctionOnce, SerializedUntaggedFunctionOnce );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m----------------------------------------------------------------------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `untagged_boilerplate` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: use of deprecated function `std::mem::uninitialized`: use `mem::MaybeUninit` instead[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/serialization.rs:355:59[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m355[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                    let mut value: SerializedValue = mem::uninitialized();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                          [0m[0m[1m[33m^^^^^^^^^^^^^[0m
[0m[1m[38;5;12m...[0m
[0m[1m[38;5;12m390[0m[0m [0m[0m[1m[38;5;12m| [0m[0muntagged_boilerplate!( test_unsafe_typed_array, as_unsafe_typed_array, Tag::UnsafeTypedArray, SerializedUntaggedUnsafeTypedArray );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m----------------------------------------------------------------------------------------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `untagged_boilerplate` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: use of deprecated associated function `std::error::Error::description`: use the Display impl or to_string()[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/ecosystem/serde.rs:331:37[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m331[0m[0m [0m[0m[1m[38;5;12m| [0m[0m        let message = error::Error::description( self );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                    [0m[0m[1m[33m^^^^^^^^^^^[0m

[0m[1m[33mwarning[0m[0m[1m: use of deprecated associated function `std::error::Error::description`: use the Display impl or to_string()[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/value.rs:863:75[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m863[0m[0m [0m[0m[1m[38;5;12m| [0m[0m            ConversionError::NumericConversionError( ref inner ) => inner.description(),[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                          [0m[0m[1m[33m^^^^^^^^^^^[0m

[0m[1m[33mwarning[0m[0m[1m: use of deprecated associated function `std::error::Error::description`: use the Display impl or to_string()[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/ecosystem/serde.rs:340:78[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m340[0m[0m [0m[0m[1m[38;5;12m| [0m[0m            ConversionErrorKind::NumberConversionError( ref error ) => error.description(),[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                                             [0m[0m[1m[33m^^^^^^^^^^^[0m

[0m[1m[38;5;9merror[0m[0m[1m: missing documentation for a function[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/ffi/emscripten.rs:21:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m21[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m        pub fn emscripten_asm_const_int( code: *const u8, ... ) -> i32;[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m        [0m[0m[1m[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;10mnote[0m[0m: the lint level is defined here[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/lib.rs:107:5[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m107[0m[0m [0m[0m[1m[38;5;12m| [0m[0m    missing_docs,[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m    [0m[0m[1m[38;5;10m^^^^^^^^^^^^[0m

[0m[1m[33mwarning[0m[0m[1m: the type `webcore::serialization::SerializedValue` does not permit being left uninitialized[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/serialization.rs:355:54[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m355[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                    let mut value: SerializedValue = mem::uninitialized();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33m^^^^^^^^^^^^^^^^^^^^[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33m|[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33mthis code causes undefined behavior when executed[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33mhelp: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done[0m
[0m[1m[38;5;12m...[0m
[0m[1m[38;5;12m377[0m[0m [0m[0m[1m[38;5;12m| [0m[0muntagged_boilerplate!( test_undefined, as_undefined, Tag::Undefined, SerializedUntaggedUndefined );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m--------------------------------------------------------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: `#[warn(invalid_value)]` on by default[0m
[0m[1m[38;5;10mnote[0m[0m: enums have to be initialized to a variant[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/serialization.rs:28:1[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m28[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m/[0m[0m [0m[0mpub enum Tag {[0m
[0m[1m[38;5;12m29[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    Undefined = 0,[0m
[0m[1m[38;5;12m30[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    Null = 1,[0m
[0m[1m[38;5;12m31[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    I32 = 2,[0m
[0m[1m[38;5;12m...[0m[0m   [0m[0m[1m[38;5;10m|[0m
[0m[1m[38;5;12m42[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    Symbol = 15[0m
[0m[1m[38;5;12m43[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m}[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|_^[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `untagged_boilerplate` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: the type `webcore::serialization::SerializedValue` does not permit being left uninitialized[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/serialization.rs:355:54[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m355[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                    let mut value: SerializedValue = mem::uninitialized();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33m^^^^^^^^^^^^^^^^^^^^[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33m|[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33mthis code causes undefined behavior when executed[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33mhelp: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done[0m
[0m[1m[38;5;12m...[0m
[0m[1m[38;5;12m378[0m[0m [0m[0m[1m[38;5;12m| [0m[0muntagged_boilerplate!( test_null, as_null, Tag::Null, SerializedUntaggedNull );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m------------------------------------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;10mnote[0m[0m: enums have to be initialized to a variant[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/serialization.rs:28:1[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m28[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m/[0m[0m [0m[0mpub enum Tag {[0m
[0m[1m[38;5;12m29[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    Undefined = 0,[0m
[0m[1m[38;5;12m30[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    Null = 1,[0m
[0m[1m[38;5;12m31[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    I32 = 2,[0m
[0m[1m[38;5;12m...[0m[0m   [0m[0m[1m[38;5;10m|[0m
[0m[1m[38;5;12m42[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    Symbol = 15[0m
[0m[1m[38;5;12m43[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m}[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|_^[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `untagged_boilerplate` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: the type `webcore::serialization::SerializedValue` does not permit being left uninitialized[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/serialization.rs:355:54[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m355[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                    let mut value: SerializedValue = mem::uninitialized();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33m^^^^^^^^^^^^^^^^^^^^[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33m|[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33mthis code causes undefined behavior when executed[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33mhelp: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done[0m
[0m[1m[38;5;12m...[0m
[0m[1m[38;5;12m379[0m[0m [0m[0m[1m[38;5;12m| [0m[0muntagged_boilerplate!( test_i32, as_i32, Tag::I32, SerializedUntaggedI32 );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m--------------------------------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;10mnote[0m[0m: enums have to be initialized to a variant[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/serialization.rs:28:1[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m28[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m/[0m[0m [0m[0mpub enum Tag {[0m
[0m[1m[38;5;12m29[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    Undefined = 0,[0m
[0m[1m[38;5;12m30[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    Null = 1,[0m
[0m[1m[38;5;12m31[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    I32 = 2,[0m
[0m[1m[38;5;12m...[0m[0m   [0m[0m[1m[38;5;10m|[0m
[0m[1m[38;5;12m42[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    Symbol = 15[0m
[0m[1m[38;5;12m43[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m}[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|_^[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `untagged_boilerplate` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: the type `webcore::serialization::SerializedValue` does not permit being left uninitialized[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/serialization.rs:355:54[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m355[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                    let mut value: SerializedValue = mem::uninitialized();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33m^^^^^^^^^^^^^^^^^^^^[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33m|[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33mthis code causes undefined behavior when executed[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33mhelp: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done[0m
[0m[1m[38;5;12m...[0m
[0m[1m[38;5;12m380[0m[0m [0m[0m[1m[38;5;12m| [0m[0muntagged_boilerplate!( test_f64, as_f64, Tag::F64, SerializedUntaggedF64 );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m--------------------------------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;10mnote[0m[0m: enums have to be initialized to a variant[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/serialization.rs:28:1[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m28[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m/[0m[0m [0m[0mpub enum Tag {[0m
[0m[1m[38;5;12m29[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    Undefined = 0,[0m
[0m[1m[38;5;12m30[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    Null = 1,[0m
[0m[1m[38;5;12m31[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    I32 = 2,[0m
[0m[1m[38;5;12m...[0m[0m   [0m[0m[1m[38;5;10m|[0m
[0m[1m[38;5;12m42[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    Symbol = 15[0m
[0m[1m[38;5;12m43[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m}[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|_^[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `untagged_boilerplate` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: the type `webcore::serialization::SerializedValue` does not permit being left uninitialized[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/serialization.rs:355:54[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m355[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                    let mut value: SerializedValue = mem::uninitialized();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33m^^^^^^^^^^^^^^^^^^^^[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33m|[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33mthis code causes undefined behavior when executed[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33mhelp: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done[0m
[0m[1m[38;5;12m...[0m
[0m[1m[38;5;12m381[0m[0m [0m[0m[1m[38;5;12m| [0m[0muntagged_boilerplate!( test_true, as_true, Tag::True, SerializedUntaggedTrue );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m------------------------------------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;10mnote[0m[0m: enums have to be initialized to a variant[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/serialization.rs:28:1[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m28[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m/[0m[0m [0m[0mpub enum Tag {[0m
[0m[1m[38;5;12m29[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    Undefined = 0,[0m
[0m[1m[38;5;12m30[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    Null = 1,[0m
[0m[1m[38;5;12m31[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    I32 = 2,[0m
[0m[1m[38;5;12m...[0m[0m   [0m[0m[1m[38;5;10m|[0m
[0m[1m[38;5;12m42[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    Symbol = 15[0m
[0m[1m[38;5;12m43[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m}[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|_^[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `untagged_boilerplate` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: the type `webcore::serialization::SerializedValue` does not permit being left uninitialized[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/serialization.rs:355:54[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m355[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                    let mut value: SerializedValue = mem::uninitialized();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33m^^^^^^^^^^^^^^^^^^^^[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33m|[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33mthis code causes undefined behavior when executed[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33mhelp: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done[0m
[0m[1m[38;5;12m...[0m
[0m[1m[38;5;12m382[0m[0m [0m[0m[1m[38;5;12m| [0m[0muntagged_boilerplate!( test_false, as_false, Tag::False, SerializedUntaggedFalse );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m----------------------------------------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;10mnote[0m[0m: enums have to be initialized to a variant[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/serialization.rs:28:1[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m28[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m/[0m[0m [0m[0mpub enum Tag {[0m
[0m[1m[38;5;12m29[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    Undefined = 0,[0m
[0m[1m[38;5;12m30[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    Null = 1,[0m
[0m[1m[38;5;12m31[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    I32 = 2,[0m
[0m[1m[38;5;12m...[0m[0m   [0m[0m[1m[38;5;10m|[0m
[0m[1m[38;5;12m42[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    Symbol = 15[0m
[0m[1m[38;5;12m43[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m}[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|_^[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `untagged_boilerplate` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: the type `webcore::serialization::SerializedValue` does not permit being left uninitialized[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/serialization.rs:355:54[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m355[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                    let mut value: SerializedValue = mem::uninitialized();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33m^^^^^^^^^^^^^^^^^^^^[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33m|[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33mthis code causes undefined behavior when executed[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33mhelp: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done[0m
[0m[1m[38;5;12m...[0m
[0m[1m[38;5;12m383[0m[0m [0m[0m[1m[38;5;12m| [0m[0muntagged_boilerplate!( test_object, as_object, Tag::Object, SerializedUntaggedObject );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m--------------------------------------------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;10mnote[0m[0m: enums have to be initialized to a variant[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/serialization.rs:28:1[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m28[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m/[0m[0m [0m[0mpub enum Tag {[0m
[0m[1m[38;5;12m29[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    Undefined = 0,[0m
[0m[1m[38;5;12m30[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    Null = 1,[0m
[0m[1m[38;5;12m31[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    I32 = 2,[0m
[0m[1m[38;5;12m...[0m[0m   [0m[0m[1m[38;5;10m|[0m
[0m[1m[38;5;12m42[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    Symbol = 15[0m
[0m[1m[38;5;12m43[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m}[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|_^[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `untagged_boilerplate` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: the type `webcore::serialization::SerializedValue` does not permit being left uninitialized[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/serialization.rs:355:54[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m355[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                    let mut value: SerializedValue = mem::uninitialized();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33m^^^^^^^^^^^^^^^^^^^^[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33m|[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33mthis code causes undefined behavior when executed[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33mhelp: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done[0m
[0m[1m[38;5;12m...[0m
[0m[1m[38;5;12m384[0m[0m [0m[0m[1m[38;5;12m| [0m[0muntagged_boilerplate!( test_string, as_string, Tag::Str, SerializedUntaggedString );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m-----------------------------------------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;10mnote[0m[0m: enums have to be initialized to a variant[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/serialization.rs:28:1[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m28[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m/[0m[0m [0m[0mpub enum Tag {[0m
[0m[1m[38;5;12m29[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    Undefined = 0,[0m
[0m[1m[38;5;12m30[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    Null = 1,[0m
[0m[1m[38;5;12m31[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    I32 = 2,[0m
[0m[1m[38;5;12m...[0m[0m   [0m[0m[1m[38;5;10m|[0m
[0m[1m[38;5;12m42[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    Symbol = 15[0m
[0m[1m[38;5;12m43[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m}[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|_^[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `untagged_boilerplate` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: the type `webcore::serialization::SerializedValue` does not permit being left uninitialized[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/serialization.rs:355:54[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m355[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                    let mut value: SerializedValue = mem::uninitialized();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33m^^^^^^^^^^^^^^^^^^^^[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33m|[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33mthis code causes undefined behavior when executed[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33mhelp: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done[0m
[0m[1m[38;5;12m...[0m
[0m[1m[38;5;12m385[0m[0m [0m[0m[1m[38;5;12m| [0m[0muntagged_boilerplate!( test_array, as_array, Tag::Array, SerializedUntaggedArray );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m----------------------------------------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;10mnote[0m[0m: enums have to be initialized to a variant[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/serialization.rs:28:1[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m28[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m/[0m[0m [0m[0mpub enum Tag {[0m
[0m[1m[38;5;12m29[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    Undefined = 0,[0m
[0m[1m[38;5;12m30[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    Null = 1,[0m
[0m[1m[38;5;12m31[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    I32 = 2,[0m
[0m[1m[38;5;12m...[0m[0m   [0m[0m[1m[38;5;10m|[0m
[0m[1m[38;5;12m42[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    Symbol = 15[0m
[0m[1m[38;5;12m43[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m}[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|_^[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `untagged_boilerplate` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: the type `webcore::serialization::SerializedValue` does not permit being left uninitialized[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/serialization.rs:355:54[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m355[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                    let mut value: SerializedValue = mem::uninitialized();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33m^^^^^^^^^^^^^^^^^^^^[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33m|[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33mthis code causes undefined behavior when executed[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33mhelp: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done[0m
[0m[1m[38;5;12m...[0m
[0m[1m[38;5;12m386[0m[0m [0m[0m[1m[38;5;12m| [0m[0muntagged_boilerplate!( test_symbol, as_symbol, Tag::Symbol, SerializedUntaggedSymbol );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m--------------------------------------------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;10mnote[0m[0m: enums have to be initialized to a variant[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/serialization.rs:28:1[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m28[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m/[0m[0m [0m[0mpub enum Tag {[0m
[0m[1m[38;5;12m29[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    Undefined = 0,[0m
[0m[1m[38;5;12m30[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    Null = 1,[0m
[0m[1m[38;5;12m31[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    I32 = 2,[0m
[0m[1m[38;5;12m...[0m[0m   [0m[0m[1m[38;5;10m|[0m
[0m[1m[38;5;12m42[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    Symbol = 15[0m
[0m[1m[38;5;12m43[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m}[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|_^[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `untagged_boilerplate` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: the type `webcore::serialization::SerializedValue` does not permit being left uninitialized[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/serialization.rs:355:54[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m355[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                    let mut value: SerializedValue = mem::uninitialized();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33m^^^^^^^^^^^^^^^^^^^^[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33m|[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33mthis code causes undefined behavior when executed[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33mhelp: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done[0m
[0m[1m[38;5;12m...[0m
[0m[1m[38;5;12m387[0m[0m [0m[0m[1m[38;5;12m| [0m[0muntagged_boilerplate!( test_reference, as_reference, Tag::Reference, SerializedUntaggedReference );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m--------------------------------------------------------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;10mnote[0m[0m: enums have to be initialized to a variant[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/serialization.rs:28:1[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m28[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m/[0m[0m [0m[0mpub enum Tag {[0m
[0m[1m[38;5;12m29[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    Undefined = 0,[0m
[0m[1m[38;5;12m30[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    Null = 1,[0m
[0m[1m[38;5;12m31[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    I32 = 2,[0m
[0m[1m[38;5;12m...[0m[0m   [0m[0m[1m[38;5;10m|[0m
[0m[1m[38;5;12m42[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    Symbol = 15[0m
[0m[1m[38;5;12m43[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m}[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|_^[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `untagged_boilerplate` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: the type `webcore::serialization::SerializedValue` does not permit being left uninitialized[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/serialization.rs:355:54[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m355[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                    let mut value: SerializedValue = mem::uninitialized();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33m^^^^^^^^^^^^^^^^^^^^[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33m|[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33mthis code causes undefined behavior when executed[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33mhelp: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done[0m
[0m[1m[38;5;12m...[0m
[0m[1m[38;5;12m388[0m[0m [0m[0m[1m[38;5;12m| [0m[0muntagged_boilerplate!( test_function, as_function, Tag::Function, SerializedUntaggedFunction );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m----------------------------------------------------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;10mnote[0m[0m: enums have to be initialized to a variant[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/serialization.rs:28:1[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m28[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m/[0m[0m [0m[0mpub enum Tag {[0m
[0m[1m[38;5;12m29[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    Undefined = 0,[0m
[0m[1m[38;5;12m30[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    Null = 1,[0m
[0m[1m[38;5;12m31[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    I32 = 2,[0m
[0m[1m[38;5;12m...[0m[0m   [0m[0m[1m[38;5;10m|[0m
[0m[1m[38;5;12m42[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    Symbol = 15[0m
[0m[1m[38;5;12m43[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m}[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|_^[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `untagged_boilerplate` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: the type `webcore::serialization::SerializedValue` does not permit being left uninitialized[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/serialization.rs:355:54[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m355[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                    let mut value: SerializedValue = mem::uninitialized();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33m^^^^^^^^^^^^^^^^^^^^[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33m|[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33mthis code causes undefined behavior when executed[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33mhelp: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done[0m
[0m[1m[38;5;12m...[0m
[0m[1m[38;5;12m389[0m[0m [0m[0m[1m[38;5;12m| [0m[0muntagged_boilerplate!( test_function_once, as_function_once, Tag::FunctionOnce, SerializedUntaggedFunctionOnce );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m----------------------------------------------------------------------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;10mnote[0m[0m: enums have to be initialized to a variant[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/serialization.rs:28:1[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m28[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m/[0m[0m [0m[0mpub enum Tag {[0m
[0m[1m[38;5;12m29[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    Undefined = 0,[0m
[0m[1m[38;5;12m30[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    Null = 1,[0m
[0m[1m[38;5;12m31[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    I32 = 2,[0m
[0m[1m[38;5;12m...[0m[0m   [0m[0m[1m[38;5;10m|[0m
[0m[1m[38;5;12m42[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    Symbol = 15[0m
[0m[1m[38;5;12m43[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m}[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|_^[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `untagged_boilerplate` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[1m[33mwarning[0m[0m[1m: the type `webcore::serialization::SerializedValue` does not permit being left uninitialized[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/serialization.rs:355:54[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m355[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                    let mut value: SerializedValue = mem::uninitialized();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33m^^^^^^^^^^^^^^^^^^^^[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33m|[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33mthis code causes undefined behavior when executed[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33mhelp: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done[0m
[0m[1m[38;5;12m...[0m
[0m[1m[38;5;12m390[0m[0m [0m[0m[1m[38;5;12m| [0m[0muntagged_boilerplate!( test_unsafe_typed_array, as_unsafe_typed_array, Tag::UnsafeTypedArray, SerializedUntaggedUnsafeTypedArray );[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;12m----------------------------------------------------------------------------------------------------------------------------------[0m[0m [0m[0m[1m[38;5;12min this macro invocation[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;10mnote[0m[0m: enums have to be initialized to a variant[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/webcore/serialization.rs:28:1[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m28[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m/[0m[0m [0m[0mpub enum Tag {[0m
[0m[1m[38;5;12m29[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    Undefined = 0,[0m
[0m[1m[38;5;12m30[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    Null = 1,[0m
[0m[1m[38;5;12m31[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    I32 = 2,[0m
[0m[1m[38;5;12m...[0m[0m   [0m[0m[1m[38;5;10m|[0m
[0m[1m[38;5;12m42[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m    Symbol = 15[0m
[0m[1m[38;5;12m43[0m[0m  [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|[0m[0m [0m[0m}[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m[1m[38;5;10m|_^[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: this warning originates in the macro `untagged_boilerplate` (in Nightly builds, run with -Z macro-backtrace for more info)[0m

[0m[0m[1m[31merror[0m[1m:[0m could not compile `stdweb` due to previous error; 3807 warnings emitted
2024-06-21 18:16:47.600509 |ERROR| [rudra-progress] Finished with non-zero exit code
"
************************************

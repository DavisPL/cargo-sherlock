************************************
event,timestamp,label
RustSec,-,Critical
************************************
event,timestamp,organization,type,criteria,delta,version,notes
************************************
event,timestamp,name,username,url
Author,-,gnzlbg,gnzlbg,https://github.com/gnzlbg
************************************
event,timestamp,downloads
Downloads,-,1495794
************************************
event,timestamp,total,flagged
Side Effects,-,,
************************************
Rudra,timestamp
"2024-06-21 16:19:55.366511 |INFO | [rudra-progress] Running cargo rudra
2024-06-21 16:19:59.468080 |INFO | [rudra-progress] Running rudra for target lib:slice-deque
[0m[1m[33mwarning[0m[0m[1m: variable does not need to be mutable[0m
[0m  [0m[0m[1m[38;5;12m--> [0m[0msrc/macros.rs:23:25[0m
[0m   [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m23[0m[0m [0m[0m[1m[38;5;12m| [0m[0m            if let Some(mut v) = self.buf.get_mut(idx) {[0m
[0m   [0m[0m[1m[38;5;12m| [0m[0m                        [0m[0m[1m[38;5;12m----[0m[0m[1m[33m^[0m
[0m   [0m[0m[1m[38;5;12m| [0m[0m                        [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m| [0m[0m                        [0m[0m[1m[38;5;12mhelp: remove this `mut`[0m
[0m   [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: `#[warn(unused_mut)]` on by default[0m

2024-06-21 16:20:07.386811 |INFO | [rudra-progress] Rudra started
2024-06-21 16:20:07.390817 |INFO | [rudra-progress] SendSyncVariance analysis started
2024-06-21 16:20:07.423926 |INFO | [rudra-progress] SendSyncVariance analysis finished
2024-06-21 16:20:07.423956 |INFO | [rudra-progress] UnsafeDataflow analysis started
2024-06-21 16:20:07.482228 |INFO | [rudra-progress] UnsafeDataflow analysis finished
2024-06-21 16:20:07.482254 |INFO | [rudra-progress] Rudra finished
Warning (UnsafeDataflow:/CopyFlow): Potential unsafe dataflow issue in `<DrainFilter<'a, T, F> as std::iter::Iterator>::next`
-> src/lib.rs:3065:5: 3089:6
fn next(&mut self) -> Option<T> {
        unsafe {
            while self.idx != self.old_len {
                let i = self.idx;
                self.idx += 1;
                let v = slice::from_raw_parts_mut(
                    self.deq.as_mut_ptr(),
                    self.old_len,
                );
                if [0m[36m(self.pred)(&mut v[i])[0m {
                    self.del += 1;
                    return Some([0m[31mptr::read(&v[i])[0m);
                } else if self.del > 0 {
                    let del = self.del;
                    let src: *const T = &v[i];
                    let dst: *mut T = &mut v[i - del];
                    // This is safe because self.deq has length 0
                    // thus its elements will not have Drop::drop
                    // called on them in the event of a panic.
                    [0m[31mptr::copy_nonoverlapping(src, dst, 1)[0m;
                }
            }
            None
        }
    }
[0m
Info (UnsafeDataflow:/SliceUnchecked): Potential unsafe dataflow issue in `SliceDeque::<T>::truncate_back`
-> src/lib.rs:1207:5: 1217:6
pub fn truncate_back(&mut self, len: usize) {
        unsafe {
            while len < self.len() {
                // decrement tail before the drop_in_place(), so a panic on
                // Drop doesn't re-drop the just-failed value.
                self.move_tail(-1);
                let len = self.len();
                [0m[36mcore::ptr::drop_in_place([0m[33mself.get_unchecked_mut(len)[0m[36m)[0m;
            }
        }
    }
[0m
Info (UnsafeDataflow:/SliceUnchecked): Potential unsafe dataflow issue in `SliceDeque::<T>::truncate_front`
-> src/lib.rs:1246:5: 1256:6
pub fn truncate_front(&mut self, len: usize) {
        unsafe {
            while len < self.len() {
                let head: *mut T = [0m[33mself.get_unchecked_mut(0)[0m as *mut _;
                // increment head before the drop_in_place(), so a panic on
                // Drop doesn't re-drop the just-failed value.
                self.move_head(1);
                [0m[36mcore::ptr::drop_in_place(head)[0m;
            }
        }
    }
[0m
Warning (UnsafeDataflow:/WriteFlow): Potential unsafe dataflow issue in `SliceDeque::<T>::extend_with`
-> src/lib.rs:1711:5: 1734:6
fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, value: E) {
        self.reserve(n);

        unsafe {
            let mut ptr = self.as_mut_ptr().add(self.len());

            // Write all elements except the last one
            for _ in 1..n {
                [0m[33mptr::write(ptr, [0m[36mvalue.next()[0m[33m)[0m;
                ptr = ptr.add(1);
                // Increment the length in every step in case next() panics
                self.move_tail_unchecked(1);
            }

            if n > 0 {
                // We can write the last element directly without cloning
                // needlessly
                [0m[33mptr::write(ptr, [0m[36mvalue.last()[0m[33m)[0m;
                self.move_tail_unchecked(1);
            }

            // len set by scope guard
        }
    }
[0m
Warning (UnsafeDataflow:/WriteFlow/SliceUnchecked): Potential unsafe dataflow issue in `SliceDeque::<T>::extend_desugared`
-> src/lib.rs:1744:5: 1771:6
fn extend_desugared<I: Iterator<Item = T>>(&mut self, mut iterator: I) {
        #[cfg_attr(
            feature = ""cargo-clippy"",
            allow(clippy::while_let_on_iterator)
        )]
        while let Some(element) = [0m[36miterator.next()[0m {
            let len = self.len();
            let cap = self.capacity();
            if len == cap {
                let (lower, upper) = [0m[36miterator.size_hint()[0m;
                let additional_cap = if let Some(upper) = upper {
                    upper
                } else {
                    lower
                }
                .checked_add(1)
                .expect(""overflow"");
                self.reserve(additional_cap);
            }
            debug_assert!(self.len() < self.capacity());
            unsafe {
                [0m[33mptr::write([0m[33mself.get_unchecked_mut(len)[0m[33m, element)[0m;
                // NB can't overflow since we would have had to alloc the
                // address space
                self.move_tail_unchecked(1);
            }
        }
    }
[0m
2024-06-21 16:20:08.782081 |WARN | [cargo_rudra] Target example:san is not supported
2024-06-21 16:20:08.782131 |WARN | [cargo_rudra] Target bench:pop_back is not supported
2024-06-21 16:20:08.782137 |WARN | [cargo_rudra] Target bench:index is not supported
2024-06-21 16:20:08.782148 |WARN | [cargo_rudra] Target bench:iter is not supported
2024-06-21 16:20:08.782151 |WARN | [cargo_rudra] Target bench:get is not supported
2024-06-21 16:20:08.782158 |WARN | [cargo_rudra] Target bench:alloc is not supported
2024-06-21 16:20:08.782161 |WARN | [cargo_rudra] Target bench:push_back is not supported
2024-06-21 16:20:08.782174 |WARN | [cargo_rudra] Target bench:pop_front is not supported
2024-06-21 16:20:08.782184 |WARN | [cargo_rudra] Target bench:push_front is not supported
2024-06-21 16:20:08.782282 |INFO | [rudra-progress] cargo rudra finished
"
************************************

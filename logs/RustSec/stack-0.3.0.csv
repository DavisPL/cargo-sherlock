************************************
event,timestamp,label
RustSec,-,Critical
************************************
event,timestamp,organization,type,criteria,delta,version,notes
************************************
event,timestamp,name,username,url
Author,-,,arcnmx,https://github.com/arcnmx
************************************
event,timestamp,downloads
Downloads,-,7555
************************************
event,timestamp,total,flagged
Side Effects,-,,
************************************
Rudra,timestamp
"2024-06-21 16:23:17.172848 |INFO | [rudra-progress] Running cargo rudra
2024-06-21 16:23:25.960613 |INFO | [rudra-progress] Running rudra for target lib:stack
[0m[1m[33mwarning[0m[0m[1m: trait objects without an explicit `dyn` are deprecated[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/small_vec.rs:245:54[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m245[0m[0m [0m[0m[1m[38;5;12m| [0m[0m            .field(""data"", &coalesce!(2 => |v| v as &fmt::Debug))[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                     [0m[0m[1m[33m^^^^^^^^^^[0m[0m [0m[0m[1m[33mhelp: use `dyn`: `dyn fmt::Debug`[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: `#[warn(bare_trait_objects)]` on by default[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>[0m

[0m[1m[33mwarning[0m[0m[1m: trait objects without an explicit `dyn` are deprecated[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/small_vec.rs:250:61[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m250[0m[0m [0m[0m[1m[38;5;12m| [0m[0mimpl<'a, T: Array + 'a, S: Vector<Item=T::Item> + 'a> AsRef<Vector<Item=T::Item> + 'a> for SmallVec<T, S> where T::Item: 'a, T::Index: 'a {[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                                            [0m[0m[1m[33m^^^^^^^^^^^^^^^^^^^^^^^^^[0m[0m [0m[0m[1m[33mhelp: use `dyn`: `dyn Vector<Item=T::Item> + 'a`[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>[0m

[0m[1m[33mwarning[0m[0m[1m: trait objects without an explicit `dyn` are deprecated[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/small_vec.rs:251:27[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m251[0m[0m [0m[0m[1m[38;5;12m| [0m[0m    fn as_ref(&self) -> &(Vector<Item=T::Item> + 'a) {[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                          [0m[0m[1m[33m^^^^^^^^^^^^^^^^^^^^^^^^^[0m[0m [0m[0m[1m[33mhelp: use `dyn`: `dyn Vector<Item=T::Item> + 'a`[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mwarning[0m[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021![0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>[0m

[0m[1m[33mwarning[0m[0m[1m: use of deprecated function `std::mem::uninitialized`: use `mem::MaybeUninit` instead[0m
[0m [0m[0m[1m[38;5;12m--> [0m[0msrc/array.rs:1:15[0m
[0m  [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1[0m[0m [0m[0m[1m[38;5;12m| [0m[0muse std::mem::uninitialized;[0m
[0m  [0m[0m[1m[38;5;12m| [0m[0m              [0m[0m[1m[33m^^^^^^^^^^^^^[0m
[0m  [0m[0m[1m[38;5;12m|[0m
[0m  [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: `#[warn(deprecated)]` on by default[0m

[0m[1m[33mwarning[0m[0m[1m: use of deprecated function `std::mem::uninitialized`: use `mem::MaybeUninit` instead[0m
[0m  [0m[0m[1m[38;5;12m--> [0m[0msrc/array.rs:13:59[0m
[0m   [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m13[0m[0m [0m[0m[1m[38;5;12m| [0m[0m    unsafe fn uninitialized() -> Self where Self: Sized { uninitialized() }[0m
[0m   [0m[0m[1m[38;5;12m| [0m[0m                                                          [0m[0m[1m[33m^^^^^^^^^^^^^[0m

[0m[1m[33mwarning[0m[0m[1m: use of deprecated function `std::mem::uninitialized`: use `mem::MaybeUninit` instead[0m
[0m [0m[0m[1m[38;5;12m--> [0m[0msrc/small_dst.rs:4:16[0m
[0m  [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m4[0m[0m [0m[0m[1m[38;5;12m| [0m[0muse std::mem::{uninitialized, transmute, forget, size_of, align_of};[0m
[0m  [0m[0m[1m[38;5;12m| [0m[0m               [0m[0m[1m[33m^^^^^^^^^^^^^[0m

[0m[1m[33mwarning[0m[0m[1m: use of deprecated function `std::mem::uninitialized`: use `mem::MaybeUninit` instead[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/small_dst.rs:122:35[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m122[0m[0m [0m[0m[1m[38;5;12m| [0m[0m            let mut v: *const T = uninitialized();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                  [0m[0m[1m[33m^^^^^^^^^^^^^[0m

[0m[1m[33mwarning[0m[0m[1m: use of deprecated function `std::mem::uninitialized`: use `mem::MaybeUninit` instead[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0msrc/small_dst.rs:137:35[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m137[0m[0m [0m[0m[1m[38;5;12m| [0m[0m            let mut v: *const T = uninitialized();[0m
[0m    [0m[0m[1m[38;5;12m| [0m[0m                                  [0m[0m[1m[33m^^^^^^^^^^^^^[0m

[0m[1m[33mwarning[0m[0m[1m: unused return value of `std::mem::replace` that must be used[0m
[0m  [0m[0m[1m[38;5;12m--> [0m[0msrc/small_vec.rs:47:38[0m
[0m   [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m47[0m[0m [0m[0m[1m[38;5;12m| [0m[0m                Coalesce2::A(v) => { replace(&mut self.0, Coalesce2::B(S::spill(v))); },[0m
[0m   [0m[0m[1m[38;5;12m| [0m[0m                                     [0m[0m[1m[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m
[0m   [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: `#[warn(unused_must_use)]` on by default[0m
[0m   [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: if you don't need the old value, you can just assign the new value directly[0m

2024-06-21 16:23:41.418459 |INFO | [rudra-progress] Rudra started
2024-06-21 16:23:41.429802 |INFO | [rudra-progress] SendSyncVariance analysis started
2024-06-21 16:23:41.430476 |INFO | [rudra-progress] SendSyncVariance analysis finished
2024-06-21 16:23:41.430496 |INFO | [rudra-progress] UnsafeDataflow analysis started
2024-06-21 16:23:41.544516 |INFO | [rudra-progress] UnsafeDataflow analysis finished
2024-06-21 16:23:41.544590 |INFO | [rudra-progress] Rudra finished
Warning (UnsafeDataflow:/ReadFlow): Potential unsafe dataflow issue in `vector::Vector::swap_remove`
-> src/vector.rs:37:5: 49:6
fn swap_remove(&mut self, index: usize) -> Self::Item {
        let len = [0m[36mself.len()[0m;
        assert!(index < len);
        unsafe {
            let ptr = [0m[36mself.as_mut_ptr()[0m;
            let v = [0m[31mread(ptr.uoffset(index))[0m;
            if index != len - 1 {
                swap(ptr.uoffset(len - 1), ptr.uoffset(index));
            }
            [0m[36mself.set_len(len - 1)[0m;
            v
        }
    }
[0m
Warning (UnsafeDataflow:/CopyFlow/WriteFlow): Potential unsafe dataflow issue in `vector::Vector::insert`
-> src/vector.rs:51:5: 60:6
fn insert(&mut self, index: usize, element: Self::Item) {
        [0m[36mself.reserve(1)[0m;
        unsafe {
            let len = [0m[36mself.len()[0m;
            let ptr = [0m[36mself.as_mut_ptr()[0m.uoffset(index);
            [0m[31mcopy(ptr, ptr.uoffset(1), len - index)[0m;
            [0m[33mwrite(ptr, element)[0m;
            [0m[36mself.set_len(len + 1)[0m;
        }
    }
[0m
Info (UnsafeDataflow:/Transmute): Potential unsafe dataflow issue in `vector::Vector::retain`
-> src/vector.rs:74:5: 91:6
fn retain<F: FnMut(&Self::Item) -> bool>(&mut self, mut f: F) where Self: Sized {
        let len = [0m[36mself.len()[0m;
        let mut del = 0;
        unsafe {
            let v = [0m[36mself.as_mut_ptr()[0m;

            for i in 0..len {
                if ![0m[36mf([0m[33mtransmute(v.uoffset(i) as *const _)[0m[36m)[0m {
                    del += 1;
                } else if del > 0 {
                    swap(v.uoffset(i - del), v.uoffset(i));
                }
            }
        }
        if del > 0 {
            [0m[36mself.truncate(len - del)[0m;
        }
    }
[0m
Warning (UnsafeDataflow:/WriteFlow): Potential unsafe dataflow issue in `vector::Vector::push`
-> src/vector.rs:93:5: 100:6
fn push(&mut self, value: Self::Item) {
        [0m[36mself.reserve(1)[0m;
        let len = [0m[36mself.len()[0m;
        unsafe {
            [0m[33mwrite([0m[36mself.as_mut_ptr()[0m[33m.uoffset(len), value)[0m;
            [0m[36mself.set_len(len + 1)[0m;
        }
    }
[0m
2024-06-21 16:23:44.851615 |WARN | [cargo_rudra] Target test:small_dst is not supported
2024-06-21 16:23:44.851804 |WARN | [cargo_rudra] Target test:small_vec is not supported
2024-06-21 16:23:44.851825 |WARN | [cargo_rudra] Target test:addressable is not supported
2024-06-21 16:23:44.851834 |WARN | [cargo_rudra] Target test:array_vec is not supported
2024-06-21 16:23:44.852091 |INFO | [rudra-progress] cargo rudra finished
"
************************************

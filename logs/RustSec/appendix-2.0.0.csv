************************************
event,timestamp,label
RustSec,-,Critical
************************************
event,timestamp,organization,type,criteria,delta,version,notes
************************************
event,timestamp,name,username,url
Author,-,kristoffer,krl,https://github.com/krl
************************************
event,timestamp,downloads
Downloads,-,11530
************************************
event,timestamp,total,flagged
Side Effects,-,29,12
************************************
Rudra,timestamp
"2024-06-21 18:35:27.334485 |INFO | [rudra-progress] Running cargo rudra
2024-06-21 18:35:30.801587 |INFO | [rudra-progress] Running rudra for target lib:appendix
2024-06-21 18:35:43.437975 |INFO | [rudra-progress] Rudra started
2024-06-21 18:35:43.442363 |INFO | [rudra-progress] SendSyncVariance analysis started
2024-06-21 18:35:43.465871 |INFO | [rudra-progress] SendSyncVariance analysis finished
2024-06-21 18:35:43.465895 |INFO | [rudra-progress] UnsafeDataflow analysis started
2024-06-21 18:35:43.501945 |INFO | [rudra-progress] UnsafeDataflow analysis finished
2024-06-21 18:35:43.501968 |INFO | [rudra-progress] Rudra finished
Info (SendSyncVariance:/NaiveSendForSend): Suspicious impl of `Send` found
-> src/lib.rs:61:1: 61:42
unsafe impl<K, V> Send for Index<K, V> {}
Info (SendSyncVariance:/NaiveSyncForSync): Suspicious impl of `Sync` found
-> src/lib.rs:62:1: 62:42
unsafe impl<K, V> Sync for Index<K, V> {}
Info (UnsafeDataflow:/Transmute): Potential unsafe dataflow issue in `Index::<K, V>::new`
-> src/lib.rs:125:5: 207:6
pub fn new<P: AsRef<Path>>(path: &P) -> io::Result<Self> {
        let mut lanes = ArrayVec::new();

        // check for lane files already on disk
        for n in 0..NUM_LANES {
            let mut pathbuf = PathBuf::from([0m[36mpath.as_ref()[0m);
            pathbuf.push(&format!(""{:02x}"", n));

            if pathbuf.exists() {
                let file =
                    OpenOptions::new().read(true).write(true).open(&pathbuf)?;

                let lane_pages = Self::lane_pages(n);
                let file_len = PAGE_SIZE as u64 * lane_pages as u64;
                file.set_len(file_len)?;
                unsafe { lanes.push(MmapMut::map_mut(&file)?) };
            }
        }

        // find the number of already occupied pages
        let mut num_pages = 0;
        if let Some(last) = lanes.last() {
            // help the type inferer along a bit.
            let last: &MmapMut = last;

            // add up pages of all but the last lane, since they are all full
            let mut full_pages = 0;
            for n in 0..lanes.len().saturating_sub(1) {
                println!(""lane {}, pages {}"", n, Self::lane_pages(n));
                full_pages += Self::lane_pages(n)
            }

            // do a binary search to find the last populated page in the last lane
            let mut low_bound = 0;
            let mut high_bound = Self::lane_pages(lanes.len() - 1) - 1;

            while low_bound + 1 != high_bound {
                let check = low_bound + (high_bound - low_bound) / 2;
                println!(
                    ""low bound: {}, high bound: {}, check {}"",
                    low_bound, high_bound, check,
                );

                let page_ofs = PAGE_SIZE * check;

                // is there a valid entry in this page?
                for slot in 0..Self::entries_per_page() {
                    let slot_ofs =
                        page_ofs + slot * mem::size_of::<Entry<K, V>>();

                    let ptr = last.as_ptr();

                    let entry: &Entry<K, V> = unsafe {
                        [0m[33mmem::transmute(ptr.offset(slot_ofs as isize))[0m
                    };

                    if entry.valid() {
                        low_bound = check;
                        break;
                    }
                }
                if low_bound != check {
                    high_bound = check
                }
            }

            num_pages = full_pages + high_bound;
        }

        // create the index
        let index = Index {
            lanes: UnsafeCell::new(lanes),
            path: PathBuf::from([0m[36mpath.as_ref()[0m),
            pages: Mutex::new(num_pages as u64),
            _marker: PhantomData,
        };

        // initialize index with at least one page
        if num_pages == 0 {
            assert_eq!(index.new_page()?, 0);
        }
        Ok(index)
    }
[0m
2024-06-21 18:35:44.565318 |INFO | [rudra-progress] cargo rudra finished
"
************************************

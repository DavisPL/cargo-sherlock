************************************
event,timestamp,label
RustSec,-,Critical
************************************
event,timestamp,organization,type,criteria,delta,version,notes
************************************
event,timestamp,name,username,url
Author,-,Peter Williams,pkgw,https://github.com/pkgw
Author,-,Mark,rm-dr,https://github.com/rm-dr
************************************
event,timestamp,downloads
Downloads,-,65554
************************************
event,timestamp,total,flagged
Side Effects,-,6,6
************************************
Rudra,timestamp
"2024-06-21 18:07:31.334094 |INFO | [rudra-progress] Running cargo rudra
2024-06-21 18:07:34.483205 |INFO | [rudra-progress] Running rudra for target lib:tectonic_xdv
2024-06-21 18:07:39.425848 |INFO | [rudra-progress] Rudra started
2024-06-21 18:07:39.429680 |INFO | [rudra-progress] SendSyncVariance analysis started
2024-06-21 18:07:39.430030 |INFO | [rudra-progress] SendSyncVariance analysis finished
2024-06-21 18:07:39.430041 |INFO | [rudra-progress] UnsafeDataflow analysis started
2024-06-21 18:07:39.477576 |INFO | [rudra-progress] UnsafeDataflow analysis finished
2024-06-21 18:07:39.477599 |INFO | [rudra-progress] Rudra finished
Error (UnsafeDataflow:/CopyFlow/VecSetLen): Potential unsafe dataflow issue in `XdvParser::<T>::process`
-> src/lib.rs:218:5: 268:6
pub fn process<R: Read>(mut stream: R, events: T) -> Result<(T, u64), T::Error>
    where
        T::Error: From<IoError>,
    {
        const BUF_SIZE: usize = 4096;
        let mut parser = Self::new(events);
        let mut buf = Vec::with_capacity(BUF_SIZE);
        unsafe {
            [0m[31mbuf.set_len(BUF_SIZE)[0m;
        }
        let mut n_saved_bytes = 0;

        loop {
            let n_read = [0m[36mstream.read(&mut buf[n_saved_bytes..])[0m?;
            let n_in_buffer = n_saved_bytes + n_read;
            let n_consumed = parser.parse(&buf[..n_in_buffer])?;
            n_saved_bytes = n_in_buffer - n_consumed;

            if n_consumed != 0 && n_saved_bytes != 0 {
                // The current parse did not consume the full buffer, so we
                // must copy the un-parsed bytes to its beginning. The next
                // time that we read data, we will append to these
                // already-read bytes so that the parser gets a nice
                // contiguous set of bytes to look at. The copy may involve
                // overlapping memory regions (imagine we read 4096 bytes but
                // only consume 1) so we have to get unsafe.
                use std::ptr;
                let ptr = buf.as_mut_ptr();
                unsafe {
                    [0m[31mptr::copy(ptr.add(n_consumed), ptr, n_saved_bytes)[0m;
                }
            }

            if n_in_buffer != 0 && n_consumed == 0 {
                // We're going to need a bigger buffer in order to handle whatever
                // we're reading. Let's double it.
                let len = buf.len();
                buf.reserve(len);
                unsafe {
                    [0m[31mbuf.set_len(2 * len)[0m;
                }
            }

            if n_read == 0 {
                break;
            }
        }

        let n_bytes = parser.current_offset();
        Ok((parser.finish()?, n_bytes))
    }
[0m
2024-06-21 18:07:40.588015 |WARN | [cargo_rudra] Target example:xdvdump is not supported
2024-06-21 18:07:40.588141 |INFO | [rudra-progress] cargo rudra finished
"
************************************
